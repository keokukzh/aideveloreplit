{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines for AIDevelo.AI Landing Page\n\n## Design Approach\n**Reference-Based Approach** - Drawing inspiration from modern SaaS landing pages like Linear, Notion, and Vercel, focusing on clean aesthetics with strategic use of vibrant colors for conversion optimization.\n\n## Core Design Elements\n\n### A. Color Palette\n**Dark Mode Primary:**\n- Background: 210 15% 6% (deep charcoal)\n- Surface: 215 20% 8% (card backgrounds) \n- Text Primary: 210 20% 96% (crisp white)\n- Text Secondary: 210 10% 78% (muted gray)\n\n**Brand Colors:**\n- Primary: 195 100% 85% (neon cyan #00cfff equivalent)\n- Secondary: 270 95% 70% (vibrant purple #a100ff equivalent)\n- Accent: Use sparingly for CTAs and highlights only\n\n**Gradients:**\n- Hero text gradient combining primary cyan to secondary purple\n- Subtle radial gradients in hero background for depth\n- CTA button gradients using brand colors\n\n### B. Typography\n**Font Family:** Inter (Google Fonts)\n**Hierarchy:**\n- H1: 48px (desktop) / 34px (mobile), weight 700-800\n- H2: 34px (desktop) / 26px (mobile), weight 600-700  \n- H3: 18px, weight 600\n- Body: 16-18px, weight 400-500\n- Small text/meta: 14px, weight 400\n\n### C. Layout System\n**Spacing Units:** Tailwind spacing of 4, 8, 16, 24, 32 units (p-4, m-8, gap-16, etc.)\n**Container:** Max-width 1200px, centered\n**Grid:** CSS Grid for sections, 3-column on desktop, 1-column on mobile\n\n### D. Component Library\n\n**Navigation:**\n- Sticky header with backdrop blur\n- Logo left, navigation right, prominent CTA button\n- Mobile: Hamburger menu\n\n**Cards:**\n- Subtle borders with background blur effects\n- Rounded corners (16px border-radius)\n- Drop shadows for depth\n\n**Buttons:**\n- Primary: Gradient background with brand colors\n- Secondary: Outline style with border\n- Rounded corners, adequate padding for touch targets\n\n**Forms:**\n- Dark input fields with subtle borders\n- Focus states using brand colors\n- Clear validation states\n\n### E. Animations\n**Minimal approach:**\n- Subtle fade-in animations on scroll\n- Smooth hover transitions for interactive elements\n- No complex or distracting animations\n\n## Section-Specific Guidelines\n\n### Hero Section\n- Large gradient text treatment for headline\n- Video placeholder with rounded corners and border\n- Pill-shaped feature tags below headline\n- Single prominent CTA button\n\n### Features Section  \n- Three-column grid on desktop\n- Icon badges for each feature category\n- Consistent card heights and spacing\n\n### Pricing Section\n- Three-tier comparison table\n- Popular plan highlighted with border accent\n- Clear pricing hierarchy and feature lists\n\n### Testimonials\n- Quote-style cards with attribution\n- Grid layout maintaining visual balance\n\n### Contact Form\n- Two-column layout on desktop\n- Lead capture fields as specified\n- GDPR compliance notice in footer\n\n## Images\n**Hero Section:** Requires a demo video placeholder (16:9 aspect ratio) showing the product interface\n**Gallery Section:** Six customer case study images (400x220px) in a three-column grid\n**Logo:** Dark theme logo mark for header navigation\n**No large hero background image** - using gradient overlays and clean typography instead\n\n## Responsive Behavior\n- Mobile-first approach with breakpoints at 768px and 1024px\n- Grid layouts collapse to single column on mobile\n- Typography scales appropriately across devices\n- Touch-friendly button sizes and spacing","size_bytes":3369},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AIDevelo.AI Landing Page\n\n## Overview\n\nAIDevelo.AI is a German SaaS landing page designed to help businesses generate more leads automatically using AI. The application is built as a modern web landing page with lead capture functionality, featuring a dark mode design inspired by companies like Linear, Notion, and Vercel. The platform focuses on converting visitors into qualified leads through strategic use of forms, testimonials, and clear value propositions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18+ with TypeScript**: Component-based architecture using functional components and hooks\n- **Vite**: Modern build tool for fast development and optimized production builds\n- **Wouter**: Lightweight client-side routing library for navigation\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Shadcn/ui**: Modern component library built on Radix UI primitives\n- **TanStack Query**: Server state management for API calls and caching\n\n### Backend Architecture\n- **Express.js**: RESTful API server handling lead submissions and data persistence\n- **TypeScript**: End-to-end type safety across client and server\n- **Shared Schema**: Common type definitions and validation schemas using Zod\n- **Memory Storage**: In-memory data persistence with interface for easy database migration\n- **Form Handling**: Validated lead capture with proper error handling and responses\n\n### Design System\n- **Dark Mode First**: Custom CSS variables and Tailwind configuration optimized for dark themes\n- **Brand Colors**: Neon cyan (#00cfff) and vibrant purple (#a100ff) for conversion elements\n- **Typography**: Inter font family with clear hierarchy (48px-14px range)\n- **Component Variants**: Consistent button, card, and form styling with hover states\n- **Responsive Layout**: Mobile-first approach with breakpoint-based adaptations\n\n### Data Management\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n- **Schema Validation**: Zod schemas for runtime type checking and validation\n- **Lead Management**: Structured data capture including name, company, industry, contact details\n- **User System**: Basic user authentication schema (prepared for future expansion)\n\n### Content Architecture\n- **Modular Components**: Hero, Features, Pricing, Testimonials, Case Studies, Contact Form\n- **German Localization**: All content optimized for German-speaking B2B market\n- **Conversion Optimization**: Strategic CTA placement, social proof, and lead magnets\n- **Asset Management**: Organized image assets with proper imports and optimization\n\n## External Dependencies\n\n### UI Framework\n- **Radix UI**: Headless component primitives for accessibility and functionality\n- **Lucide React**: Consistent icon set for UI elements\n- **Class Variance Authority**: Type-safe component variant management\n\n### Development Tools\n- **ESBuild**: Fast JavaScript bundling for production builds\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **Replit Integration**: Development environment optimizations and error handling\n\n### Database & Storage\n- **Neon Database**: PostgreSQL-compatible serverless database (configured via Drizzle)\n- **Connect PG Simple**: PostgreSQL session storage for future authentication needs\n\n### Form & Validation\n- **React Hook Form**: Performant form handling with minimal re-renders\n- **Hookform Resolvers**: Integration between React Hook Form and Zod validation\n- **Date-fns**: Date formatting and manipulation utilities\n\n### State Management\n- **TanStack React Query**: Server state synchronization and caching\n- **React Context**: Local state management for UI components like toasts and mobile menu","size_bytes":3765},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"client/vitest.config.ts":{"content":"import { defineConfig } from 'vitest/config'\nimport { resolve } from 'path'\n\nexport default defineConfig({\n  test: {\n    environment: 'jsdom',\n    globals: true,\n  },\n  resolve: {\n    alias: {\n      '@': resolve(__dirname, './src'),\n      '@shared': resolve(__dirname, '../shared'),\n      '@assets': resolve(__dirname, '../attached_assets'),\n    },\n  },\n})","size_bytes":356},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// CORS configuration for widget embedding\nconst corsOptions = {\n  origin: function (origin: string | undefined, callback: (error: Error | null, success?: boolean) => void) {\n    // Allow requests with no origin (like mobile apps or curl requests)\n    if (!origin) return callback(null, true);\n    \n    // Allow all origins for development and widget embedding\n    // In production, you might want to restrict this to verified domains\n    callback(null, true);\n  },\n  credentials: false, // Widget doesn't need credentials\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  optionsSuccessStatus: 200 // Some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.use(cors(corsOptions));\napp.options('*', cors(corsOptions)); // Enable preflight for all routes\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2866},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertLeadSchema, insertContactSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Stripe from \"stripe\";\nimport { generateChatResponse, type KnowledgeBase } from \"./services/openai\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\n// Chat API validation schemas\nconst createChatSessionSchema = z.object({\n  agentConfigId: z.string().min(1, \"Agent config ID is required\"),\n  visitorId: z.string().optional(),\n  visitorEmail: z.string().email().optional(),\n  visitorName: z.string().optional()\n});\n\nconst chatMessageSchema = z.object({\n  sessionId: z.string().min(1, \"Session ID is required\"),\n  message: z.string().min(1, \"Message is required\"),\n  sender: z.enum(['user', 'agent'], { required_error: \"Sender must be 'user' or 'agent'\" })\n});\n\n// Phone API validation schemas\nconst phoneProvisionSchema = z.object({\n  calendarProvider: z.enum(['google', 'microsoft'], { required_error: \"Calendar provider must be 'google' or 'microsoft'\" })\n});\n\nconst phoneTestCallSchema = z.object({\n  to: z.string().min(1, \"Phone number is required\")\n});\n\n// Chat Widget validation schemas\nconst chatVerifyInstallSchema = z.object({\n  widgetKey: z.string().min(1, \"Widget key is required\"),\n  origin: z.string().url(\"Origin must be a valid URL\")\n});\n\n// Social Media API validation schemas\nconst socialConnectSchema = z.object({\n  provider: z.enum(['facebook', 'instagram', 'linkedin', 'twitter'], { \n    required_error: \"Provider must be one of: facebook, instagram, linkedin, twitter\" \n  })\n});\n\nconst socialScheduleDraftSchema = z.object({\n  text: z.string().min(1, \"Post text is required\"),\n  when: z.string().optional()\n});\n\n// Rate limiting map (simple in-memory rate limiting)\nconst rateLimitMap = new Map<string, { count: number; resetTime: number }>();\n\nfunction checkRateLimit(identifier: string, maxRequests: number = 30, windowMs: number = 60000): boolean {\n  const now = Date.now();\n  const windowStart = now - windowMs;\n  \n  // Clean up old entries\n  for (const [key, value] of Array.from(rateLimitMap.entries())) {\n    if (value.resetTime < windowStart) {\n      rateLimitMap.delete(key);\n    }\n  }\n  \n  const current = rateLimitMap.get(identifier);\n  if (!current) {\n    rateLimitMap.set(identifier, { count: 1, resetTime: now + windowMs });\n    return true;\n  }\n  \n  if (current.resetTime < now) {\n    // Reset window\n    current.count = 1;\n    current.resetTime = now + windowMs;\n    return true;\n  }\n  \n  if (current.count >= maxRequests) {\n    return false;\n  }\n  \n  current.count++;\n  return true;\n}\n\n// Lazy initialize Stripe when needed\nlet stripe: Stripe | null = null;\n\nfunction getStripe(): Stripe {\n  if (!stripe) {\n    if (!process.env.STRIPE_SECRET_KEY) {\n      throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n    }\n    stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2025-08-27.basil\",\n    });\n  }\n  return stripe;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n\n  // Get all contacts endpoint (for potential admin dashboard)\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json({\n        success: true,\n        data: contacts\n      });\n    } catch (error) {\n      console.error(\"Error fetching contacts:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error\"\n      });\n    }\n  });\n\n  // Get all leads endpoint (for potential admin dashboard)\n  app.get(\"/api/leads\", async (req, res) => {\n    try {\n      const leads = await storage.getLeads();\n      res.json({\n        success: true,\n        data: leads\n      });\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error\"\n      });\n    }\n  });\n\n  // Stripe payment route for one-time payments (from javascript_stripe integration)\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount, selectedModuleIds } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Invalid amount\" \n        });\n      }\n\n      const paymentIntent = await getStripe().paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"eur\", // Use EUR for German market\n        metadata: {\n          selectedModules: selectedModuleIds?.join(',') || '',\n        },\n      });\n      \n      res.json({ \n        success: true,\n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id\n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ \n        success: false,\n        message: \"Error creating payment intent: \" + error.message \n      });\n    }\n  });\n\n  // Dashboard API - Get user dashboard data\n  app.get(\"/api/dashboard\", async (req, res) => {\n    try {\n      // For demo purposes, use a mock user ID\n      // In production, this would come from authentication\n      const mockUserId = \"demo-user-123\";\n      \n      let subscriptions = await storage.getUserSubscriptions(mockUserId);\n      let agentConfigs = await storage.getUserAgentConfigs(mockUserId);\n      \n      // If no data exists, create demo data for immediate testing\n      if (subscriptions.length === 0) {\n        // Create demo subscriptions for all three products\n        await storage.createSubscription({\n          userId: mockUserId,\n          moduleId: \"chat\",\n          price: 4900,\n          status: \"active\",\n          stripeSubscriptionId: \"sub_chat_demo_123\",\n          startDate: new Date()\n        });\n        \n        await storage.createSubscription({\n          userId: mockUserId,\n          moduleId: \"phone\", \n          price: 7900,\n          status: \"active\",\n          stripeSubscriptionId: \"sub_phone_demo_123\",\n          startDate: new Date()\n        });\n        \n        await storage.createSubscription({\n          userId: mockUserId,\n          moduleId: \"social\",\n          price: 5900,\n          status: \"active\", \n          stripeSubscriptionId: \"sub_social_demo_123\",\n          startDate: new Date()\n        });\n        \n        // Create demo agent configurations\n        await storage.createAgentConfig({\n          userId: mockUserId,\n          moduleId: \"chat\",\n          isActive: true,\n          configuration: {\n            name: \"Demo Chat Agent\",\n            prompt: \"You are a helpful AI assistant for AIDevelo.AI. Help users with questions about our AI products.\",\n            model: \"gpt-4\",\n            temperature: 0.7,\n            maxTokens: 150\n          },\n          knowledgeBase: {\n            name: \"AIDevelo.AI Knowledge Base\",\n            content: \"AIDevelo.AI offers AI automation tools for businesses.\"\n          }\n        });\n        \n        await storage.createAgentConfig({\n          userId: mockUserId,\n          moduleId: \"phone\",\n          isActive: true,\n          configuration: {\n            name: \"Demo Phone Agent\",\n            prompt: \"You are an AI phone assistant that helps with customer inquiries and appointment booking.\",\n            model: \"gpt-4\",\n            temperature: 0.7,\n            maxTokens: 200\n          },\n          knowledgeBase: {\n            name: \"Business Phone Scripts\",\n            content: \"Professional phone assistance for customer service and lead qualification.\"\n          }\n        });\n        \n        await storage.createAgentConfig({\n          userId: mockUserId,\n          moduleId: \"social\",\n          isActive: true,\n          configuration: {\n            name: \"Demo Social Media Agent\", \n            prompt: \"You are an AI social media assistant that creates engaging content and manages social platforms.\",\n            model: \"gpt-4\",\n            temperature: 0.8,\n            maxTokens: 180\n          },\n          knowledgeBase: {\n            name: \"Social Media Best Practices\",\n            content: \"Content creation strategies and social media engagement tactics.\"\n          }\n        });\n        \n        // Refresh data after creation\n        subscriptions = await storage.getUserSubscriptions(mockUserId);\n        agentConfigs = await storage.getUserAgentConfigs(mockUserId);\n      }\n      \n      // Calculate stats from agent configs\n      let totalChats = 0;\n      let totalCalls = 0;\n      let socialPosts = 0;\n      let leadsGenerated = 0;\n      \n      for (const config of agentConfigs) {\n        if (config.moduleId === 'chat') {\n          // Mock chat stats - in real implementation, query chat messages\n          totalChats += Math.floor(Math.random() * 50) + 10;\n        } else if (config.moduleId === 'phone') {\n          const calls = await storage.getPhoneCalls(config.id);\n          totalCalls += calls.length;\n        } else if (config.moduleId === 'social') {\n          const posts = await storage.getSocialPosts(config.id);\n          socialPosts += posts.length;\n        }\n      }\n      \n      // Mock leads generated\n      leadsGenerated = Math.floor(Math.random() * 20) + 5;\n      \n      res.json({\n        success: true,\n        data: {\n          subscriptions,\n          agentConfigs,\n          stats: {\n            totalChats,\n            totalCalls,\n            socialPosts,\n            leadsGenerated\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error\"\n      });\n    }\n  });\n\n  // Contact form submission endpoint with rate limiting\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      // Rate limiting for lead submissions\n      const clientIp = req.ip || req.connection.remoteAddress || 'unknown';\n      if (!checkRateLimit(`leads_${clientIp}`, 5, 60000)) { // 5 leads per minute\n        return res.status(429).json({\n          success: false,\n          message: \"Too many lead submissions. Please try again later.\"\n        });\n      }\n\n      const validationResult = insertLeadSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const leadData = await storage.createLead(validationResult.data);\n      \n      res.json({\n        success: true,\n        data: leadData\n      });\n    } catch (error) {\n      console.error('Error creating lead:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to submit contact information\"\n      });\n    }\n  });\n\n  // Contact form submission endpoint with rate limiting\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      // Rate limiting for contact submissions\n      const clientIp = req.ip || req.connection.remoteAddress || 'unknown';\n      if (!checkRateLimit(`contact_${clientIp}`, 5, 60000)) { // 5 contacts per minute\n        return res.status(429).json({\n          success: false,\n          message: \"Too many contact submissions. Please try again later.\"\n        });\n      }\n\n      const validationResult = insertContactSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const contactData = await storage.createContact(validationResult.data);\n      \n      res.json({\n        success: true,\n        data: contactData\n      });\n    } catch (error) {\n      console.error('Error creating contact:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to submit contact form\"\n      });\n    }\n  });\n\n  // Chat Agent API - Start new chat session\n  app.post(\"/api/chat/sessions\", async (req, res) => {\n    try {\n      // Rate limiting\n      const clientIp = req.ip || req.connection.remoteAddress || 'unknown';\n      if (!checkRateLimit(`session_${clientIp}`, 10, 60000)) { // 10 sessions per minute\n        return res.status(429).json({\n          success: false,\n          message: \"Too many requests. Please try again later.\"\n        });\n      }\n\n      // Validate request body\n      const validationResult = createChatSessionSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { agentConfigId, visitorId, visitorEmail, visitorName } = validationResult.data;\n      \n      const sessionData = {\n        agentConfigId,\n        visitorId: visitorId || null,\n        visitorEmail: visitorEmail || null,\n        visitorName: visitorName || null,\n        isLeadCaptured: false\n      };\n      \n      const session = await storage.createChatSession(sessionData);\n      \n      res.status(201).json({\n        success: true,\n        data: session\n      });\n    } catch (error) {\n      console.error(\"Error creating chat session:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error\"\n      });\n    }\n  });\n\n  // Chat Agent API - Send message and get AI response\n  app.post(\"/api/chat/messages\", async (req, res) => {\n    try {\n      // Rate limiting\n      const clientIp = req.ip || req.connection.remoteAddress || 'unknown';\n      if (!checkRateLimit(`message_${clientIp}`, 60, 60000)) { // 60 messages per minute\n        return res.status(429).json({\n          success: false,\n          message: \"Too many messages. Please slow down.\"\n        });\n      }\n\n      // Validate request body\n      const validationResult = chatMessageSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { sessionId, message, sender } = validationResult.data;\n      \n      // Store user message\n      await storage.createChatMessage({\n        sessionId,\n        sender,\n        message\n      });\n      \n      if (sender === 'user') {\n        // Get session and agent config\n        const session = await storage.getChatSession(sessionId);\n        if (!session) {\n          return res.status(404).json({\n            success: false,\n            message: \"Chat session not found\"\n          });\n        }\n        \n        // Get agent config or use default configuration\n        let agentConfig = await storage.getAgentConfig(session.agentConfigId);\n        if (!agentConfig) {\n          // Check if there's already a default chat config for this user to avoid duplicates\n          const existingConfigs = await storage.getUserAgentConfigs(\"demo-user-123\");\n          const existingChatConfig = existingConfigs.find(config => config.moduleId === \"chat\");\n          \n          if (existingChatConfig) {\n            // Use existing config and update session to reference it\n            agentConfig = existingChatConfig;\n            // Update session with correct agent config ID\n            await storage.updateChatSession(sessionId, { agentConfigId: existingChatConfig.id });\n          } else {\n            // Create a new default agent configuration\n            const defaultConfig = {\n              userId: \"demo-user-123\",\n              moduleId: \"chat\",\n              isActive: true,\n              configuration: {\n                name: \"Demo AI Agent\",\n                prompt: \"You are a helpful AI assistant for AIDevelo.AI. You help users with questions about our AI products and services. Keep responses friendly and professional.\",\n                model: \"gpt-4\",\n                temperature: 0.7,\n                maxTokens: 150\n              },\n              knowledgeBase: {\n                name: \"AIDevelo.AI Knowledge Base\",\n                content: \"AIDevelo.AI offers three main AI products: Phone Agent (€79/month), Chat Agent (€49/month), and Social Media Agent (€59/month). We help businesses automate customer interactions using AI.\"\n              }\n            };\n            \n            // Store the default configuration for future use\n            agentConfig = await storage.createAgentConfig(defaultConfig);\n            // Update session with correct agent config ID\n            await storage.updateChatSession(sessionId, { agentConfigId: agentConfig.id });\n          }\n        }\n        \n        // Get conversation history\n        const messages = await storage.getChatMessages(sessionId);\n        const conversationHistory = messages\n          .slice(-10) // Last 10 messages for context\n          .map(msg => ({\n            role: msg.sender === 'user' ? 'user' as const : 'assistant' as const,\n            content: msg.message\n          }));\n        \n        // Get knowledge base from agent config or use default\n        const agentKnowledgeBase = agentConfig.knowledgeBase as any || {};\n        const knowledgeBase: KnowledgeBase = {\n          companyInfo: agentKnowledgeBase.companyInfo || \"AIDevelo.AI - Your AI automation partner\",\n          services: agentKnowledgeBase.services || [\"AI Phone Agent\", \"AI Chat Agent\", \"AI Social Media Agent\"],\n          faq: agentKnowledgeBase.faq || [\n            { question: \"What services do you offer?\", answer: \"We offer AI automation solutions including phone agents, chat agents, and social media agents to help businesses grow.\" },\n            { question: \"How much does it cost?\", answer: \"Our packages start from €49/month for the Chat Agent, €79/month for the Phone Agent, and €59/month for the Social Media Agent.\" },\n            { question: \"How quickly can you set this up?\", answer: \"We can typically have your AI agents up and running within 24-48 hours.\" }\n          ],\n          businessHours: agentKnowledgeBase.businessHours || \"Monday-Friday 9AM-6PM CET\",\n          contactInfo: agentKnowledgeBase.contactInfo || {\n            email: \"hello@aidevelo.ai\",\n            phone: \"+49 123 456 7890\"\n          }\n        };\n        \n        // Generate AI response\n        const aiResponse = await generateChatResponse(\n          message,\n          conversationHistory,\n          knowledgeBase\n        );\n        \n        // Store AI response\n        await storage.createChatMessage({\n          sessionId,\n          sender: 'agent',\n          message: aiResponse.message\n        });\n        \n        res.json({\n          success: true,\n          data: {\n            message: aiResponse.message,\n            isActionRequired: aiResponse.isActionRequired,\n            actionType: aiResponse.actionType,\n            actionData: aiResponse.actionData,\n            sessionId: sessionId\n          }\n        });\n      } else {\n        // If sender is 'agent', just store the message\n        res.json({\n          success: true,\n          data: { message: \"Message stored\" }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error\"\n      });\n    }\n  });\n\n  // Create demo data endpoint for testing - Pro Account with All Products\n  app.post(\"/api/demo-data\", async (req, res) => {\n    try {\n      const mockUserId = \"pro-user-123\";\n      \n      // Create PRO subscriptions for ALL products\n      await storage.createSubscription({\n        userId: mockUserId,\n        moduleId: \"chat\",\n        price: 4900, // €49.00\n        status: \"active\",\n        stripeSubscriptionId: \"sub_chat_demo_123\",\n        startDate: new Date()\n      });\n      \n      await storage.createSubscription({\n        userId: mockUserId,\n        moduleId: \"phone\",\n        price: 7900, // €79.00\n        status: \"active\",\n        stripeSubscriptionId: \"sub_phone_demo_123\",\n        startDate: new Date()\n      });\n      \n      // Add Social Media Agent - NEW!\n      await storage.createSubscription({\n        userId: mockUserId,\n        moduleId: \"social\",\n        price: 5900, // €59.00\n        status: \"active\",\n        stripeSubscriptionId: \"sub_social_demo_123\",\n        startDate: new Date()\n      });\n      \n      // Create ADVANCED agent configs for ALL products\n      await storage.createAgentConfig({\n        userId: mockUserId,\n        moduleId: \"chat\",\n        isActive: true,\n        configuration: {\n          welcomeMessage: \"Welcome to AIDevelo.AI! I'm your AI assistant ready to help with automation solutions.\",\n          brandVoice: \"professional, knowledgeable, and solution-focused\",\n          leadCaptureEnabled: true,\n          appointmentBooking: true,\n          escalationEnabled: true,\n          maxConversationLength: 50,\n          responseTime: \"instant\"\n        },\n        knowledgeBase: {\n          companyInfo: \"AIDevelo.AI - Leading AI automation platform helping businesses scale with intelligent agents\",\n          services: [\n            \"AI Chat Agent - €49/month - Automated customer support and lead generation\",\n            \"AI Phone Agent - €79/month - Intelligent call handling and appointment booking\", \n            \"AI Social Media Agent - €59/month - Content creation and posting automation\"\n          ],\n          faq: [\n            { question: \"What's included in the Chat Agent?\", answer: \"24/7 automated chat support, lead capture forms, appointment booking, and CRM integration.\" },\n            { question: \"How does the Phone Agent work?\", answer: \"Handles incoming calls, qualifies leads, books appointments, and can transfer to human agents when needed.\" },\n            { question: \"Can the Social Media Agent post to multiple platforms?\", answer: \"Yes! It supports Facebook, Instagram, LinkedIn, and Twitter with automated content scheduling.\" },\n            { question: \"Is there a setup fee?\", answer: \"No setup fees! We include free onboarding and configuration for all plans.\" },\n            { question: \"How quickly can I get started?\", answer: \"Most clients are up and running within 24 hours with our express setup process.\" }\n          ],\n          businessHours: \"Monday-Friday 9AM-6PM CET\",\n          contactInfo: {\n            email: \"hello@aidevelo.ai\",\n            phone: \"+49 123 456 7890\",\n            website: \"https://aidevelo.ai\"\n          }\n        }\n      });\n      \n      await storage.createAgentConfig({\n        userId: mockUserId,\n        moduleId: \"phone\", \n        isActive: true,\n        configuration: {\n          greeting: \"Thank you for calling AIDevelo.AI, your AI automation partner. How can I help you today?\",\n          appointmentBooking: true,\n          leadQualification: true,\n          callRecording: true,\n          businessHours: \"Monday-Friday 9AM-6PM CET\",\n          afterHoursMessage: \"We're currently closed. Please leave a message or schedule a callback.\",\n          transferKeywords: [\"human\", \"manager\", \"urgent\", \"complaint\"],\n          maxCallDuration: 15\n        }\n      });\n      \n      await storage.createAgentConfig({\n        userId: mockUserId,\n        moduleId: \"social\",\n        isActive: true,\n        configuration: {\n          platforms: [\"facebook\", \"instagram\", \"linkedin\", \"twitter\"],\n          postingSchedule: {\n            frequency: \"daily\",\n            times: [\"09:00\", \"13:00\", \"17:00\"],\n            timezone: \"Europe/Berlin\"\n          },\n          contentTypes: [\"promotional\", \"educational\", \"industry_news\", \"company_updates\"],\n          brandVoice: \"professional, engaging, informative\",\n          hashtagStrategy: \"industry-relevant, trending, branded\",\n          engagementTracking: true,\n          autoRespond: true,\n          contentApproval: false\n        }\n      });\n      \n      res.json({\n        success: true,\n        message: \"✅ PRO Account Created! All AI products activated with advanced configurations.\",\n        data: {\n          userId: mockUserId,\n          activeProducts: [\n            {\n              name: \"AI Chat Agent\",\n              price: \"€49/month\",\n              status: \"active\",\n              features: [\"24/7 Support\", \"Lead Capture\", \"Appointment Booking\", \"CRM Integration\"]\n            },\n            {\n              name: \"AI Phone Agent\", \n              price: \"€79/month\",\n              status: \"active\",\n              features: [\"Call Handling\", \"Lead Qualification\", \"Call Recording\", \"Human Transfer\"]\n            },\n            {\n              name: \"AI Social Media Agent\",\n              price: \"€59/month\", \n              status: \"active\",\n              features: [\"Multi-Platform Posting\", \"Content Generation\", \"Engagement Tracking\", \"Auto-Response\"]\n            }\n          ],\n          totalValue: \"€187/month\",\n          setupStatus: \"Ready to use\"\n        }\n      });\n    } catch (error) {\n      console.error(\"Error creating demo data:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error\"\n      });\n    }\n  });\n\n  // Phone Agent API - Provision phone service\n  app.post(\"/api/phone/provision\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = phoneProvisionSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { calendarProvider } = validationResult.data;\n      \n      // Simulate provisioning delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mock successful provisioning\n      res.json({\n        success: true,\n        data: {\n          phoneNumber: \"+49 123 456 7890\",\n          twilioAccountSid: \"AC\" + Math.random().toString(36).substring(2, 36),\n          calendarIntegrated: calendarProvider === 'google' || calendarProvider === 'microsoft',\n          webhookUrl: \"https://your-app.replit.app/webhook/phone\"\n        }\n      });\n    } catch (error) {\n      console.error(\"Error provisioning phone:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Phone provisioning failed\"\n      });\n    }\n  });\n\n  // Phone Agent API - Run test call\n  app.post(\"/api/phone/test-call\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = phoneTestCallSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { to } = validationResult.data;\n      \n      // Simulate test call delay\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Mock successful test call\n      res.json({\n        success: true,\n        data: {\n          callSid: \"CA\" + Math.random().toString(36).substring(2, 36),\n          to: to,\n          status: \"completed\",\n          duration: \"28 seconds\",\n          recording: \"https://api.twilio.com/recording/test-123\",\n          transcript: \"Hello, this is a test call from AIDevelo.AI phone agent. The setup is working correctly. Thank you!\"\n        }\n      });\n    } catch (error) {\n      console.error(\"Error making test call:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Test call failed\"\n      });\n    }\n  });\n\n  // Chat Agent API - Get widget key for installation\n  app.get(\"/api/chat/widget-key\", async (req, res) => {\n    try {\n      // Generate a unique widget key\n      const widgetKey = \"widget_\" + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      \n      res.json({\n        ok: true,\n        widgetKey: widgetKey,\n        instructions: \"Add this script tag to your website before the closing </body> tag\"\n      });\n    } catch (error) {\n      console.error(\"Error generating widget key:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to generate widget key\"\n      });\n    }\n  });\n\n  // Chat Agent API - Verify widget installation\n  app.post(\"/api/chat/verify-install\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = chatVerifyInstallSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { widgetKey, origin } = validationResult.data;\n      \n      // Simulate verification delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mock successful verification\n      res.json({\n        success: true,\n        data: {\n          widgetKey: widgetKey,\n          isInstalled: true,\n          origin: origin,\n          verifiedAt: new Date().toISOString(),\n          chatEndpoint: \"/api/chat/messages\",\n          sessionEndpoint: \"/api/chat/sessions\"\n        }\n      });\n    } catch (error) {\n      console.error(\"Error verifying widget install:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Widget verification failed\"\n      });\n    }\n  });\n\n  // Social Media Agent API - Connect social platform\n  app.post(\"/api/social/connect\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = socialConnectSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { provider } = validationResult.data;\n      \n      // Simulate OAuth connection delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Mock successful connection\n      res.json({\n        success: true,\n        data: {\n          provider: provider,\n          accountId: provider + \"_\" + Math.random().toString(36).substring(2, 10),\n          accountName: `Demo ${provider.charAt(0).toUpperCase() + provider.slice(1)} Account`,\n          permissions: [\"read\", \"write\", \"manage\"],\n          connectedAt: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      console.error(\"Error connecting social platform:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Social platform connection failed\"\n      });\n    }\n  });\n\n  // Social Media Agent API - Schedule draft post\n  app.post(\"/api/social/schedule-draft\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = socialScheduleDraftSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"Validation error\",\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { text, when } = validationResult.data;\n      \n      // Simulate scheduling delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock successful scheduling\n      res.json({\n        success: true,\n        data: {\n          postId: \"post_\" + Math.random().toString(36).substring(2, 12),\n          text: text,\n          scheduledFor: when || new Date(Date.now() + 60000).toISOString(),\n          status: \"scheduled\",\n          platforms: [\"facebook\", \"instagram\", \"linkedin\"],\n          estimatedReach: Math.floor(Math.random() * 500) + 100,\n          createdAt: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      console.error(\"Error scheduling post:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Post scheduling failed\"\n      });\n    }\n  });\n\n  // Serve widget.js file for external embedding\n  app.get(\"/widget.js\", (req, res) => {\n    try {\n      const widgetPath = join(__dirname, 'widget.js');\n      const widgetContent = readFileSync(widgetPath, 'utf8');\n      \n      res.setHeader('Content-Type', 'application/javascript');\n      res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache for 1 hour\n      res.setHeader('Access-Control-Allow-Origin', '*'); // Allow cross-origin requests\n      res.send(widgetContent);\n    } catch (error) {\n      console.error('Error serving widget.js:', error);\n      res.status(404).send('Widget not found');\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":32588},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, \n  type Lead, type InsertLead, \n  type Contact, type InsertContact,\n  type Subscription, type InsertSubscription,\n  type AgentConfig, type InsertAgentConfig,\n  type ChatSession, type InsertChatSession,\n  type ChatMessage, type InsertChatMessage,\n  type PhoneCall, type SocialPost\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Lead management\n  createLead(lead: InsertLead): Promise<Lead>;\n  getLeads(): Promise<Lead[]>;\n  \n  // Contact management\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContacts(): Promise<Contact[]>;\n  updateContactStatus(id: string, status: string): Promise<Contact | undefined>;\n  \n  // Subscription management\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  getUserSubscriptions(userId: string): Promise<Subscription[]>;\n  updateSubscription(id: string, updates: Partial<Subscription>): Promise<Subscription | undefined>;\n  \n  // Agent configuration\n  createAgentConfig(config: InsertAgentConfig): Promise<AgentConfig>;\n  getUserAgentConfigs(userId: string): Promise<AgentConfig[]>;\n  getAgentConfig(id: string): Promise<AgentConfig | undefined>;\n  updateAgentConfig(id: string, updates: Partial<AgentConfig>): Promise<AgentConfig | undefined>;\n  \n  // Chat functionality\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessages(sessionId: string): Promise<ChatMessage[]>;\n  \n  // Phone functionality\n  createPhoneCall(call: Omit<PhoneCall, 'id' | 'createdAt'>): Promise<PhoneCall>;\n  getPhoneCalls(agentConfigId: string): Promise<PhoneCall[]>;\n  \n  // Social media functionality\n  createSocialPost(post: Omit<SocialPost, 'id' | 'createdAt'>): Promise<SocialPost>;\n  getSocialPosts(agentConfigId: string): Promise<SocialPost[]>;\n  updateSocialPost(id: string, updates: Partial<SocialPost>): Promise<SocialPost | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private leads: Map<string, Lead>;\n  private contacts: Map<string, Contact>;\n  private subscriptions: Map<string, Subscription>;\n  private agentConfigs: Map<string, AgentConfig>;\n  private chatSessions: Map<string, ChatSession>;\n  private chatMessages: Map<string, ChatMessage>;\n  private phoneCalls: Map<string, PhoneCall>;\n  private socialPosts: Map<string, SocialPost>;\n\n  constructor() {\n    this.users = new Map();\n    this.leads = new Map();\n    this.contacts = new Map();\n    this.subscriptions = new Map();\n    this.agentConfigs = new Map();\n    this.chatSessions = new Map();\n    this.chatMessages = new Map();\n    this.phoneCalls = new Map();\n    this.socialPosts = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      id,\n      username: insertUser.username,\n      password: insertUser.password,\n      email: insertUser.email,\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      company: insertUser.company || null,\n      stripeCustomerId: null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (user) {\n      const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n      this.users.set(id, updatedUser);\n      return updatedUser;\n    }\n    return undefined;\n  }\n\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const id = randomUUID();\n    const lead: Lead = { \n      ...insertLead,\n      message: insertLead.message ?? null,\n      phone: insertLead.phone ?? null,\n      id, \n      createdAt: new Date() \n    };\n    this.leads.set(id, lead);\n    return lead;\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return Array.from(this.leads.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    \n    // Calculate lead score based on responses\n    let leadScore = 0;\n    if (insertContact.budget === \"100k+\") leadScore += 30;\n    else if (insertContact.budget === \"50k-100k\") leadScore += 25;\n    else if (insertContact.budget === \"15k-50k\") leadScore += 20;\n    else leadScore += 10;\n    \n    if (insertContact.timeline === \"asap\") leadScore += 20;\n    else if (insertContact.timeline === \"1-3months\") leadScore += 15;\n    else if (insertContact.timeline === \"3-6months\") leadScore += 10;\n    else leadScore += 5;\n    \n    if (insertContact.employeeCount === \"1000+\") leadScore += 20;\n    else if (insertContact.employeeCount === \"201-999\") leadScore += 15;\n    else if (insertContact.employeeCount === \"51-200\") leadScore += 10;\n    else leadScore += 5;\n    \n    if (insertContact.interestedModules.length >= 3) leadScore += 15;\n    else if (insertContact.interestedModules.length >= 2) leadScore += 10;\n    else leadScore += 5;\n\n    const contact: Contact = { \n      ...insertContact,\n      website: insertContact.website || null,\n      phone: insertContact.phone || null,\n      additionalInfo: insertContact.additionalInfo || null,\n      acceptPrivacy: insertContact.acceptPrivacy || \"false\",\n      acceptNewsletter: insertContact.acceptNewsletter || \"false\",\n      leadScore: leadScore.toString(),\n      status: \"new\",\n      id, \n      createdAt: new Date() \n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async updateContactStatus(id: string, status: string): Promise<Contact | undefined> {\n    const contact = this.contacts.get(id);\n    if (contact) {\n      const updatedContact = { ...contact, status };\n      this.contacts.set(id, updatedContact);\n      return updatedContact;\n    }\n    return undefined;\n  }\n\n  // Subscription methods\n  async createSubscription(insertSubscription: InsertSubscription): Promise<Subscription> {\n    const id = randomUUID();\n    const now = new Date();\n    const subscription: Subscription = { \n      id,\n      userId: insertSubscription.userId,\n      moduleId: insertSubscription.moduleId,\n      stripeSubscriptionId: insertSubscription.stripeSubscriptionId || null,\n      status: insertSubscription.status || \"active\",\n      price: insertSubscription.price,\n      startDate: insertSubscription.startDate || now,\n      endDate: insertSubscription.endDate || null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.subscriptions.set(id, subscription);\n    return subscription;\n  }\n\n  async getUserSubscriptions(userId: string): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values())\n      .filter(sub => sub.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async updateSubscription(id: string, updates: Partial<Subscription>): Promise<Subscription | undefined> {\n    const subscription = this.subscriptions.get(id);\n    if (subscription) {\n      const updatedSubscription = { ...subscription, ...updates, updatedAt: new Date() };\n      this.subscriptions.set(id, updatedSubscription);\n      return updatedSubscription;\n    }\n    return undefined;\n  }\n\n  // Agent configuration methods\n  async createAgentConfig(insertConfig: InsertAgentConfig): Promise<AgentConfig> {\n    const id = randomUUID();\n    const now = new Date();\n    const config: AgentConfig = { \n      id,\n      userId: insertConfig.userId,\n      moduleId: insertConfig.moduleId,\n      isActive: insertConfig.isActive !== undefined ? insertConfig.isActive : true,\n      configuration: insertConfig.configuration,\n      knowledgeBase: insertConfig.knowledgeBase || null,\n      customInstructions: insertConfig.customInstructions || null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.agentConfigs.set(id, config);\n    return config;\n  }\n\n  async getUserAgentConfigs(userId: string): Promise<AgentConfig[]> {\n    return Array.from(this.agentConfigs.values())\n      .filter(config => config.userId === userId)\n      .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n  }\n\n  async getAgentConfig(id: string): Promise<AgentConfig | undefined> {\n    return this.agentConfigs.get(id);\n  }\n\n  async updateAgentConfig(id: string, updates: Partial<AgentConfig>): Promise<AgentConfig | undefined> {\n    const config = this.agentConfigs.get(id);\n    if (config) {\n      const updatedConfig = { ...config, ...updates, updatedAt: new Date() };\n      this.agentConfigs.set(id, updatedConfig);\n      return updatedConfig;\n    }\n    return undefined;\n  }\n\n  // Chat methods\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = { \n      id,\n      agentConfigId: insertSession.agentConfigId,\n      visitorId: insertSession.visitorId || null,\n      visitorEmail: insertSession.visitorEmail || null,\n      visitorName: insertSession.visitorName || null,\n      isLeadCaptured: insertSession.isLeadCaptured || false,\n      startedAt: new Date(),\n      endedAt: null\n    };\n    this.chatSessions.set(id, session);\n    return session;\n  }\n\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    return this.chatSessions.get(id);\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = { \n      ...insertMessage,\n      id,\n      timestamp: new Date()\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async getChatMessages(sessionId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(msg => msg.sessionId === sessionId)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  // Phone methods\n  async createPhoneCall(callData: Omit<PhoneCall, 'id' | 'createdAt'>): Promise<PhoneCall> {\n    const id = randomUUID();\n    const call: PhoneCall = { \n      ...callData,\n      id,\n      createdAt: new Date(),\n      duration: callData.duration || null,\n      transcript: callData.transcript || null,\n      summary: callData.summary || null,\n      appointmentDetails: callData.appointmentDetails || null\n    };\n    this.phoneCalls.set(id, call);\n    return call;\n  }\n\n  async getPhoneCalls(agentConfigId: string): Promise<PhoneCall[]> {\n    return Array.from(this.phoneCalls.values())\n      .filter(call => call.agentConfigId === agentConfigId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  // Social media methods\n  async createSocialPost(postData: Omit<SocialPost, 'id' | 'createdAt'>): Promise<SocialPost> {\n    const id = randomUUID();\n    const post: SocialPost = { \n      ...postData,\n      id,\n      createdAt: new Date(),\n      imageUrl: postData.imageUrl || null,\n      scheduledFor: postData.scheduledFor || null,\n      publishedAt: postData.publishedAt || null,\n      platformPostId: postData.platformPostId || null,\n      engagement: postData.engagement || null\n    };\n    this.socialPosts.set(id, post);\n    return post;\n  }\n\n  async getSocialPosts(agentConfigId: string): Promise<SocialPost[]> {\n    return Array.from(this.socialPosts.values())\n      .filter(post => post.agentConfigId === agentConfigId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async updateSocialPost(id: string, updates: Partial<SocialPost>): Promise<SocialPost | undefined> {\n    const post = this.socialPosts.get(id);\n    if (post) {\n      const updatedPost = { ...post, ...updates };\n      this.socialPosts.set(id, updatedPost);\n      return updatedPost;\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":12839},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  company: text(\"company\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  company: text(\"company\").notNull(),\n  industry: text(\"industry\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\").notNull(),\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  company: text(\"company\").notNull(),\n  website: text(\"website\"),\n  employeeCount: text(\"employee_count\").notNull(),\n  industry: text(\"industry\").notNull(),\n  interestedModules: text(\"interested_modules\").array().notNull(),\n  currentChallenges: text(\"current_challenges\").notNull(),\n  budget: text(\"budget\").notNull(),\n  timeline: text(\"timeline\").notNull(),\n  additionalInfo: text(\"additional_info\"),\n  acceptPrivacy: text(\"accept_privacy\").notNull().default(\"false\"),\n  acceptNewsletter: text(\"accept_newsletter\").default(\"false\"),\n  leadScore: text(\"lead_score\"), // calculated lead score based on responses\n  status: text(\"status\").default(\"new\"), // new, contacted, qualified, converted\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Subscriptions table for tracking user purchases\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  moduleId: text(\"module_id\").notNull(), // 'phone', 'chat', 'social'\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, cancelled, paused\n  price: integer(\"price\").notNull(), // price in cents\n  startDate: timestamp(\"start_date\").defaultNow().notNull(),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// AI Agent configurations for each user's purchased modules\nexport const agentConfigs = pgTable(\"agent_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  moduleId: text(\"module_id\").notNull(), // 'phone', 'chat', 'social'\n  isActive: boolean(\"is_active\").notNull().default(true),\n  configuration: jsonb(\"configuration\").notNull(), // module-specific config JSON\n  knowledgeBase: jsonb(\"knowledge_base\"), // FAQ, business info, etc.\n  customInstructions: text(\"custom_instructions\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Chat conversations and messages\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentConfigId: varchar(\"agent_config_id\").notNull().references(() => agentConfigs.id),\n  visitorId: text(\"visitor_id\"), // for anonymous website visitors\n  visitorEmail: text(\"visitor_email\"),\n  visitorName: text(\"visitor_name\"),\n  isLeadCaptured: boolean(\"is_lead_captured\").default(false),\n  startedAt: timestamp(\"started_at\").defaultNow().notNull(),\n  endedAt: timestamp(\"ended_at\"),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => chatSessions.id),\n  sender: text(\"sender\").notNull(), // 'user' or 'agent'\n  message: text(\"message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\n// Phone call logs\nexport const phoneCalls = pgTable(\"phone_calls\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentConfigId: varchar(\"agent_config_id\").notNull().references(() => agentConfigs.id),\n  callerNumber: text(\"caller_number\").notNull(),\n  duration: integer(\"duration\"), // in seconds\n  transcript: text(\"transcript\"),\n  summary: text(\"summary\"),\n  appointmentBooked: boolean(\"appointment_booked\").default(false),\n  appointmentDetails: jsonb(\"appointment_details\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Social media posts and analytics\nexport const socialPosts = pgTable(\"social_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentConfigId: varchar(\"agent_config_id\").notNull().references(() => agentConfigs.id),\n  platform: text(\"platform\").notNull(), // 'facebook', 'instagram', 'linkedin', 'twitter'\n  content: text(\"content\").notNull(),\n  imageUrl: text(\"image_url\"),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  publishedAt: timestamp(\"published_at\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, scheduled, published, failed\n  platformPostId: text(\"platform_post_id\"), // ID from the social platform\n  engagement: jsonb(\"engagement\"), // likes, shares, comments count\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  company: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAgentConfigSchema = createInsertSchema(agentConfigs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({\n  id: true,\n  startedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n  leadScore: true,\n  status: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertAgentConfig = z.infer<typeof insertAgentConfigSchema>;\nexport type AgentConfig = typeof agentConfigs.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type PhoneCall = typeof phoneCalls.$inferSelect;\nexport type SocialPost = typeof socialPosts.$inferSelect;\n","size_bytes":7691},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport ModularLandingPage from \"@/pages/ModularLandingPage\";\nimport CheckoutPage from \"@/pages/CheckoutPage\";\nimport PaymentSuccessPage from \"@/pages/PaymentSuccessPage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport ProductsPage from \"@/pages/ProductsPage\";\nimport PhoneOnboardingPage from \"@/pages/onboarding/PhoneOnboardingPage\";\nimport ChatOnboardingPage from \"@/pages/onboarding/ChatOnboardingPage\";\nimport SocialOnboardingPage from \"@/pages/onboarding/SocialOnboardingPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ModularLandingPage} />\n      <Route path=\"/products\" component={ProductsPage} />\n      <Route path=\"/checkout\" component={CheckoutPage} />\n      <Route path=\"/payment-success\" component={PaymentSuccessPage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route path=\"/onboarding/phone\" component={PhoneOnboardingPage} />\n      <Route path=\"/onboarding/chat\" component={ChatOnboardingPage} />\n      <Route path=\"/onboarding/social\" component={SocialOnboardingPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1639},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n  --foreground: 210 15% 15%;\n  --border: 220 13% 91%;\n  --card: 0 0% 96%;\n  --card-foreground: 210 15% 15%;\n  --card-border: 220 13% 88%;\n  --sidebar: 220 6% 93%;\n  --sidebar-foreground: 210 15% 15%;\n  --sidebar-border: 220 13% 86%;\n  --sidebar-primary: 195 100% 45%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 220 8% 88%;\n  --sidebar-accent-foreground: 210 15% 15%;\n  --sidebar-ring: 195 100% 45%;\n  --popover: 220 8% 90%;\n  --popover-foreground: 210 15% 15%;\n  --popover-border: 220 13% 83%;\n  --primary: 195 100% 45%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 220 8% 85%;\n  --secondary-foreground: 210 15% 15%;\n  --muted: 220 8% 87%;\n  --muted-foreground: 210 10% 45%;\n  --accent: 220 12% 89%;\n  --accent-foreground: 210 15% 15%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 220 13% 78%;\n  --ring: 195 100% 45%;\n  --chart-1: 195 100% 40%;\n  --chart-2: 270 95% 50%;\n  --chart-3: 280 65% 45%;\n  --chart-4: 160 60% 40%;\n  --chart-5: 30 80% 50%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 2px 4px -1px hsl(220 13% 91% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 4px 6px -1px hsl(220 13% 91% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 8px 10px -1px hsl(220 13% 91% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 16% 6%;\n  --foreground: 210 20% 98%;\n  --border: 215 16% 14%;\n  --card: 215 18% 9%;\n  --card-foreground: 210 20% 98%;\n  --card-border: 215 18% 16%;\n  --sidebar: 210 15% 4%;\n  --sidebar-foreground: 210 20% 96%;\n  --sidebar-border: 215 20% 10%;\n  --sidebar-primary: 195 100% 65%;\n  --sidebar-primary-foreground: 220 16% 6%;\n  --sidebar-accent: 215 18% 16%;\n  --sidebar-accent-foreground: 210 20% 98%;\n  --sidebar-ring: 195 100% 65%;\n  --popover: 215 18% 12%;\n  --popover-foreground: 210 20% 98%;\n  --popover-border: 215 18% 18%;\n  --primary: 195 100% 65%;\n  --primary-foreground: 220 16% 6%;\n  --secondary: 215 20% 18%;\n  --secondary-foreground: 210 20% 96%;\n  --muted: 215 20% 10%;\n  --muted-foreground: 210 10% 78%;\n  --accent: 215 20% 14%;\n  --accent-foreground: 210 20% 96%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 215 20% 25%;\n  --ring: 195 100% 65%;\n  --chart-1: 195 100% 75%;\n  --chart-2: 270 95% 80%;\n  --chart-3: 280 65% 75%;\n  --chart-4: 160 60% 70%;\n  --chart-5: 30 80% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(215 20% 12% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(215 20% 12% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(215 20% 12% / 0.00), 0px 1px 2px -1px hsl(215 20% 12% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(215 20% 12% / 0.00), 0px 1px 2px -1px hsl(215 20% 12% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(215 20% 12% / 0.00), 0px 2px 4px -1px hsl(215 20% 12% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(215 20% 12% / 0.00), 0px 4px 6px -1px hsl(215 20% 12% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(215 20% 12% / 0.00), 0px 8px 10px -1px hsl(215 20% 12% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(215 20% 12% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-feature-settings: 'cv02', 'cv03', 'cv04', 'cv11';\n    font-variant-numeric: lining-nums;\n    letter-spacing: -0.011em;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Modern UI Enhancements */\n  \n  /* Glassmorphism Effects */\n  .glass {\n    backdrop-filter: blur(20px) saturate(180%);\n    background: rgba(255, 255, 255, 0.08);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .dark .glass {\n    background: rgba(0, 0, 0, 0.15);\n    border: 1px solid rgba(255, 255, 255, 0.05);\n  }\n  \n  .glass-intense {\n    backdrop-filter: blur(40px) saturate(200%);\n    background: rgba(255, 255, 255, 0.15);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .dark .glass-intense {\n    background: rgba(0, 0, 0, 0.25);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  /* Gradient Text Effects */\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--chart-2)));\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-size: 200% 200%;\n    animation: gradient-shift 3s ease-in-out infinite;\n  }\n  \n  .gradient-text-cyan-purple {\n    background: linear-gradient(135deg, #00cfff, #a100ff);\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-size: 200% 200%;\n    animation: gradient-shift 3s ease-in-out infinite;\n  }\n  \n  /* 3D Card Effects */\n  .card-3d {\n    transform-style: preserve-3d;\n    transition: transform 0.3s ease-out;\n  }\n  \n  .card-3d:hover {\n    transform: perspective(1000px) rotateX(5deg) rotateY(10deg) translateZ(10px);\n  }\n  \n  /* Advanced Shadows */\n  .shadow-glow {\n    box-shadow: 0 0 30px rgba(0, 207, 255, 0.2), 0 8px 32px rgba(0, 0, 0, 0.12);\n  }\n  \n  .dark .shadow-glow {\n    box-shadow: 0 0 30px rgba(0, 207, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.4);\n  }\n  \n  .shadow-purple-glow {\n    box-shadow: 0 0 30px rgba(161, 0, 255, 0.2), 0 8px 32px rgba(0, 0, 0, 0.12);\n  }\n  \n  .dark .shadow-purple-glow {\n    box-shadow: 0 0 30px rgba(161, 0, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.4);\n  }\n  \n  /* Parallax Effects */\n  .parallax {\n    transform: translateZ(-1px) scale(2);\n  }\n  \n  .parallax-container {\n    height: 100vh;\n    overflow-x: hidden;\n    overflow-y: auto;\n    perspective: 1px;\n  }\n  \n  /* Floating Animation */\n  .float {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  /* Pulse Glow Animation */\n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n  \n  /* Magnetic Button Effect */\n  .magnetic {\n    transition: transform 0.2s ease-out;\n  }\n  \n  .magnetic:hover {\n    transform: translateY(-2px);\n  }\n  \n  /* Mesh Gradient Background */\n  .mesh-gradient {\n    background: radial-gradient(at 40% 20%, hsla(195, 100%, 50%, 0.15) 0px, transparent 50%),\n                radial-gradient(at 80% 0%, hsla(270, 95%, 60%, 0.15) 0px, transparent 50%),\n                radial-gradient(at 0% 50%, hsla(195, 100%, 65%, 0.1) 0px, transparent 50%),\n                radial-gradient(at 80% 50%, hsla(160, 60%, 50%, 0.1) 0px, transparent 50%),\n                radial-gradient(at 0% 100%, hsla(30, 80%, 60%, 0.1) 0px, transparent 50%),\n                radial-gradient(at 80% 100%, hsla(280, 65%, 55%, 0.15) 0px, transparent 50%),\n                radial-gradient(at 0% 0%, hsla(195, 100%, 70%, 0.1) 0px, transparent 50%);\n  }\n  \n  /* Interactive Glow Border */\n  .glow-border {\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .glow-border::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    padding: 1px;\n    background: linear-gradient(45deg, rgba(0, 207, 255, 0.5), rgba(161, 0, 255, 0.5), rgba(0, 207, 255, 0.5));\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: xor;\n    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: xor;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n  \n  .glow-border:hover::before {\n    opacity: 1;\n  }\n  \n  /* Scroll Reveal Animation */\n  .scroll-reveal {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: opacity 0.6s ease, transform 0.6s ease;\n  }\n  \n  .scroll-reveal.revealed {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  /* Stagger Animation Delays */\n  .stagger-1 { animation-delay: 0.1s; }\n  .stagger-2 { animation-delay: 0.2s; }\n  .stagger-3 { animation-delay: 0.3s; }\n  .stagger-4 { animation-delay: 0.4s; }\n  .stagger-5 { animation-delay: 0.5s; }\n}\n\n/* Animation Keyframes */\n@keyframes gradient-shift {\n  0%, 100% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(0, 207, 255, 0.2);\n  }\n  50% {\n    box-shadow: 0 0 40px rgba(0, 207, 255, 0.4);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Animate slide down utility */\n.animate-slideDown {\n  animation: slideDown 0.3s ease-out;\n}\n\n/* Support for reduced motion */\n@media (prefers-reduced-motion: reduce) {\n  .gradient-text,\n  .float,\n  .pulse-glow,\n  .card-3d,\n  .magnetic,\n  .scroll-reveal {\n    animation: none;\n    transition: none;\n  }\n  \n  .card-3d:hover {\n    transform: none;\n  }\n  \n  .magnetic:hover {\n    transform: none;\n  }\n}","size_bytes":15629},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIAssistantSimulation.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Bot, User, ArrowRight, Zap } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\n\ninterface Message {\n  id: number;\n  type: 'user' | 'ai';\n  content: string;\n  timestamp: number;\n}\n\ninterface Scenario {\n  id: string;\n  title: string;\n  userQuery: string;\n  aiResponse: string;\n  impact: string;\n}\n\nconst scenarios: Scenario[] = [\n  {\n    id: 'customer-support',\n    title: 'Kundensupport-Optimierung',\n    userQuery: 'Wie kann KI unseren Kundensupport verbessern?',\n    aiResponse: 'Ich analysiere Ihre Support-Daten... Mit unserem Multichannel-Kundensupport können Sie: 1) 80% der Anfragen automatisch bearbeiten, 2) Wartezeiten um 65% reduzieren, 3) Kundenzufriedenheit um 40% steigern. Geschätzte Kosteneinsparung: €125.000/Jahr.',\n    impact: '€125.000 Jahresersparnis'\n  },\n  {\n    id: 'process-automation',\n    title: 'Prozessautomatisierung',\n    userQuery: 'Welche Geschäftsprozesse kann KI automatisieren?',\n    aiResponse: 'Basierend auf Ihrer Branche empfehle ich: 1) Rechnungsverarbeitung (95% Automatisierung), 2) Dokumentenklassifizierung, 3) Datenvalidierung, 4) Berichtserstellung. ROI: 300% in 8 Monaten, 15 Stunden/Woche Zeitersparnis pro Mitarbeiter.',\n    impact: '300% ROI in 8 Monaten'\n  },\n  {\n    id: 'data-analysis',\n    title: 'Datenanalyse & Insights',\n    userQuery: 'Wie kann KI unsere Unternehmensdaten nutzen?',\n    aiResponse: 'Ihre Daten bergen enormes Potenzial: 1) Predictive Analytics für Verkaufsprognosen, 2) Kundenverhalten-Analyse, 3) Markttrend-Erkennung, 4) Risikobewertung. Erwartete Umsatzsteigerung: 25%, bessere Entscheidungen in Echtzeit.',\n    impact: '25% Umsatzsteigerung'\n  }\n];\n\nexport default function AIAssistantSimulation() {\n  const [currentScenario, setCurrentScenario] = useState(0);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingText, setTypingText] = useState('');\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    const startDemo = () => {\n      const scenario = scenarios[currentScenario];\n      \n      // Clear previous messages\n      setMessages([]);\n      \n      // Add user message\n      setTimeout(() => {\n        setMessages([{\n          id: 1,\n          type: 'user',\n          content: scenario.userQuery,\n          timestamp: Date.now()\n        }]);\n        \n        // Start AI typing animation\n        setTimeout(() => {\n          setIsTyping(true);\n          typeAIResponse(scenario.aiResponse);\n        }, 1000);\n      }, 500);\n    };\n\n    const typeAIResponse = (response: string) => {\n      let currentIndex = 0;\n      setTypingText('');\n      \n      const typeInterval = setInterval(() => {\n        if (currentIndex < response.length) {\n          setTypingText(response.substring(0, currentIndex + 1));\n          currentIndex++;\n        } else {\n          clearInterval(typeInterval);\n          setIsTyping(false);\n          \n          // Add complete AI message\n          setTimeout(() => {\n            setMessages(prev => [...prev, {\n              id: 2,\n              type: 'ai',\n              content: response,\n              timestamp: Date.now()\n            }]);\n            \n            // Move to next scenario after delay\n            setTimeout(() => {\n              setCurrentScenario((prev) => (prev + 1) % scenarios.length);\n            }, 4000);\n          }, 500);\n        }\n      }, 30); // Typing speed\n    };\n\n    startDemo();\n  }, [currentScenario]);\n\n  const scenario = scenarios[currentScenario];\n\n  return (\n    <div className={`relative transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n      {/* Scenario Header */}\n      <div className=\"flex items-center gap-3 mb-4\">\n        <div className=\"flex items-center gap-2 px-3 py-1 bg-primary/10 rounded-full border border-primary/20\">\n          <Zap className=\"h-3 w-3 text-primary\" />\n          <span className=\"text-xs font-medium text-primary\">Live Demo</span>\n        </div>\n        <h3 className=\"text-sm font-semibold text-muted-foreground\">{scenario.title}</h3>\n      </div>\n\n      {/* Chat Interface */}\n      <Card className=\"glass-intense border-primary/20 overflow-hidden\" data-testid=\"ai-chat-simulation\">\n        <div className=\"p-4 border-b border-primary/10 bg-gradient-to-r from-primary/5 to-transparent\">\n          <div className=\"flex items-center gap-2\">\n            <Bot className=\"h-4 w-4 text-primary\" />\n            <span className=\"text-sm font-medium\">AIDevelo Assistent</span>\n            <div className=\"ml-auto flex gap-1\">\n              <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n              <span className=\"text-xs text-muted-foreground\">Live</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"h-48 overflow-y-auto p-4 space-y-4\" data-testid=\"chat-messages\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              {message.type === 'ai' && (\n                <div className=\"w-8 h-8 rounded-full bg-primary/10 border border-primary/20 flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"h-4 w-4 text-primary\" />\n                </div>\n              )}\n              \n              <div className={`max-w-[80%] ${message.type === 'user' ? 'order-1' : ''}`}>\n                <div\n                  className={`p-3 rounded-lg text-sm leading-relaxed ${\n                    message.type === 'user'\n                      ? 'bg-primary text-primary-foreground ml-auto'\n                      : 'bg-muted border border-border'\n                  }`}\n                >\n                  {message.content}\n                </div>\n              </div>\n\n              {message.type === 'user' && (\n                <div className=\"w-8 h-8 rounded-full bg-muted border border-border flex items-center justify-center flex-shrink-0\">\n                  <User className=\"h-4 w-4\" />\n                </div>\n              )}\n            </div>\n          ))}\n\n          {/* Typing Indicator */}\n          {isTyping && (\n            <div className=\"flex gap-3 justify-start\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/10 border border-primary/20 flex items-center justify-center flex-shrink-0\">\n                <Bot className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div className=\"max-w-[80%]\">\n                <div className=\"p-3 rounded-lg text-sm leading-relaxed bg-muted border border-border\">\n                  {typingText}\n                  <span className=\"animate-pulse\">|</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Impact Display */}\n        <div className=\"p-4 border-t border-primary/10 bg-gradient-to-r from-green-500/5 to-transparent\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-muted-foreground\">Erwarteter Geschäftsimpact:</span>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-semibold text-green-600\">{scenario.impact}</span>\n              <ArrowRight className=\"h-3 w-3 text-green-600\" />\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Scenario Navigation */}\n      <div className=\"flex justify-center gap-2 mt-4\">\n        {scenarios.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentScenario(index)}\n            className={`w-2 h-2 rounded-full transition-all ${\n              index === currentScenario \n                ? 'bg-primary w-6' \n                : 'bg-muted-foreground/30 hover:bg-muted-foreground/50'\n            }`}\n            data-testid={`scenario-indicator-${index}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":8126},"client/src/components/CaseStudies.tsx":{"content":"import case1Image from \"@assets/stock_images/professional_busines_8402bf79.jpg\";\nimport case2Image from \"@assets/stock_images/professional_busines_144a79ff.jpg\";\nimport case3Image from \"@assets/stock_images/professional_busines_c54d25b6.jpg\";\nimport case4Image from \"@assets/stock_images/modern_website_landi_d9439cdb.jpg\";\nimport case5Image from \"@assets/stock_images/modern_website_landi_862c8977.jpg\";\nimport case6Image from \"@assets/stock_images/modern_website_landi_e8681405.jpg\";\n\nconst cases = [\n  { id: 1, image: case1Image, alt: \"Analytics Dashboard\" },\n  { id: 2, image: case2Image, alt: \"Business Interface\" },\n  { id: 3, image: case3Image, alt: \"Dashboard Overview\" },\n  { id: 4, image: case4Image, alt: \"Landing Page Design\" },\n  { id: 5, image: case5Image, alt: \"Website Interface\" },\n  { id: 6, image: case6Image, alt: \"Modern Website\" },\n];\n\nexport default function CaseStudies() {\n  return (\n    <section className=\"py-20 px-4\" id=\"cases\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl lg:text-5xl font-bold\" data-testid=\"heading-cases\">\n            Ergebnisse, die für sich sprechen\n          </h2>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"text-cases-description\">\n            Ein Blick in ausgewählte Kundenprojekte.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {cases.map((caseStudy) => (\n            <div \n              key={caseStudy.id} \n              className=\"group cursor-pointer\" \n              data-testid={`case-${caseStudy.id}`}\n              onClick={() => console.log(`Case ${caseStudy.id} clicked`)} // todo: remove mock functionality\n            >\n              <div className=\"aspect-[4/3] rounded-lg overflow-hidden border bg-card hover-elevate\">\n                <img \n                  src={caseStudy.image} \n                  alt={caseStudy.alt} \n                  className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  data-testid={`img-case-${caseStudy.id}`}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2286},"client/src/components/ContactForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Mail, Phone, Building, Users, CheckCircle, ArrowRight, Sparkles } from \"lucide-react\";\nimport { HolographicCard, HolographicButton } from \"./HolographicUI\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst contactFormSchema = z.object({\n  firstName: z.string().min(2, \"Vorname muss mindestens 2 Zeichen haben\"),\n  lastName: z.string().min(2, \"Nachname muss mindestens 2 Zeichen haben\"),\n  email: z.string().email(\"Bitte geben Sie eine gültige E-Mail-Adresse ein\"),\n  phone: z.string().optional(),\n  company: z.string().min(2, \"Firmenname ist erforderlich\"),\n  website: z.string().url(\"Bitte geben Sie eine gültige Website-URL ein\").optional().or(z.literal(\"\")),\n  employeeCount: z.string().min(1, \"Bitte wählen Sie die Mitarbeiteranzahl\"),\n  industry: z.string().min(1, \"Bitte wählen Sie Ihre Branche\"),\n  interestedModules: z.array(z.string()).min(1, \"Bitte wählen Sie mindestens ein Modul\"),\n  currentChallenges: z.string().min(10, \"Bitte beschreiben Sie Ihre Herausforderungen (mindestens 10 Zeichen)\"),\n  budget: z.string().min(1, \"Bitte wählen Sie Ihr Budget\"),\n  timeline: z.string().min(1, \"Bitte wählen Sie Ihren Zeitrahmen\"),\n  additionalInfo: z.string().optional(),\n  acceptPrivacy: z.boolean().refine(val => val === true, \"Sie müssen den Datenschutzbestimmungen zustimmen\"),\n  acceptNewsletter: z.boolean().optional()\n});\n\ntype ContactFormData = z.infer<typeof contactFormSchema>;\n\nconst employeeRanges = [\n  { value: \"1-10\", label: \"1-10 Mitarbeiter (Startup)\" },\n  { value: \"11-50\", label: \"11-50 Mitarbeiter (Klein)\" },\n  { value: \"51-200\", label: \"51-200 Mitarbeiter (Mittel)\" },\n  { value: \"201-999\", label: \"201-999 Mitarbeiter (Groß)\" },\n  { value: \"1000+\", label: \"1000+ Mitarbeiter (Enterprise)\" }\n];\n\nconst industries = [\n  { value: \"technology\", label: \"Technologie & Software\" },\n  { value: \"manufacturing\", label: \"Produktion & Fertigung\" },\n  { value: \"retail\", label: \"Einzelhandel & E-Commerce\" },\n  { value: \"healthcare\", label: \"Gesundheitswesen\" },\n  { value: \"finance\", label: \"Finanzdienstleistungen\" },\n  { value: \"consulting\", label: \"Beratung & Services\" },\n  { value: \"real-estate\", label: \"Immobilien\" },\n  { value: \"education\", label: \"Bildung & Forschung\" },\n  { value: \"logistics\", label: \"Logistik & Transport\" },\n  { value: \"other\", label: \"Andere\" }\n];\n\nconst modules = [\n  { id: \"support\", name: \"Multichannel-Kundensupport\", description: \"KI-Chat & Voice-Agenten\" },\n  { id: \"automation\", name: \"Prozessautomatisierung\", description: \"Workflow & Dokumenten-Automation\" },\n  { id: \"analytics\", name: \"Content & Datenanalyse\", description: \"Marketing-Content & Business Intelligence\" },\n  { id: \"security\", name: \"IT-Sicherheitspaket\", description: \"Bedrohungserkennung & Patch-Management\" },\n  { id: \"extras\", name: \"Zusatzmodule\", description: \"Kundenfeedback & Vertriebsunterstützung\" }\n];\n\nconst budgetRanges = [\n  { value: \"5k-15k\", label: \"€5.000 - €15.000\" },\n  { value: \"15k-50k\", label: \"€15.000 - €50.000\" },\n  { value: \"50k-100k\", label: \"€50.000 - €100.000\" },\n  { value: \"100k+\", label: \"€100.000+\" }\n];\n\nconst timelines = [\n  { value: \"asap\", label: \"So schnell wie möglich\" },\n  { value: \"1-3months\", label: \"1-3 Monate\" },\n  { value: \"3-6months\", label: \"3-6 Monate\" },\n  { value: \"6months+\", label: \"Über 6 Monate\" }\n];\n\nexport default function ContactForm() {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      company: \"\",\n      website: \"\",\n      employeeCount: \"\",\n      industry: \"\",\n      interestedModules: [],\n      currentChallenges: \"\",\n      budget: \"\",\n      timeline: \"\",\n      additionalInfo: \"\",\n      acceptPrivacy: false,\n      acceptNewsletter: false\n    }\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      const response = await apiRequest('POST', '/api/contact', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      toast({\n        title: \"Anfrage gesendet!\",\n        description: \"Wir melden uns innerhalb von 24 Stunden bei Ihnen.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Anfrage konnte nicht gesendet werden. Bitte versuchen Sie es erneut.\",\n        variant: \"destructive\"\n      });\n      console.error('Contact form error:', error);\n    }\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    submitMutation.mutate(data);\n  };\n\n  if (isSubmitted) {\n    return (\n      <HolographicCard className=\"max-w-2xl mx-auto text-center\" data-testid=\"contact-success\">\n        <CardContent className=\"pt-8\">\n          <div className=\"space-y-6\">\n            <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto\">\n              <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n            </div>\n            <h3 className=\"text-2xl font-bold\">Vielen Dank für Ihre Anfrage!</h3>\n            <p className=\"text-muted-foreground\">\n              Unser KI-Experten-Team wird Ihre Anfrage prüfen und sich innerhalb von 24 Stunden bei Ihnen melden, \n              um eine maßgeschneiderte Lösung für Ihr Unternehmen zu besprechen.\n            </p>\n            <div className=\"pt-4\">\n              <Badge variant=\"outline\" className=\"px-4 py-2\">\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                Prioritätsbearbeitung aktiviert\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </HolographicCard>\n    );\n  }\n\n  return (\n    <section className=\"py-20 px-4 relative\" id=\"contact\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <div className=\"text-center space-y-4 mb-12\">\n          <h2 className=\"text-3xl lg:text-5xl font-bold gradient-text\" data-testid=\"heading-contact\">\n            Jetzt Beratung anfordern\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-contact-description\">\n            Lassen Sie uns gemeinsam herausfinden, wie KI Ihr Unternehmen revolutionieren kann.\n          </p>\n        </div>\n\n        <HolographicCard data-testid=\"contact-form\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Mail className=\"h-5 w-5 text-primary\" />\n              Kostenlose Erstberatung\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Alle Felder mit * sind Pflichtfelder. Ihre Daten werden DSGVO-konform verarbeitet.\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Personal Information */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">Vorname *</Label>\n                  <Input\n                    id=\"firstName\"\n                    {...form.register(\"firstName\")}\n                    placeholder=\"Max\"\n                    data-testid=\"input-first-name\"\n                  />\n                  {form.formState.errors.firstName && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.firstName.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Nachname *</Label>\n                  <Input\n                    id=\"lastName\"\n                    {...form.register(\"lastName\")}\n                    placeholder=\"Mustermann\"\n                    data-testid=\"input-last-name\"\n                  />\n                  {form.formState.errors.lastName && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.lastName.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">E-Mail *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...form.register(\"email\")}\n                    placeholder=\"max@unternehmen.de\"\n                    data-testid=\"input-email\"\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Telefon</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    {...form.register(\"phone\")}\n                    placeholder=\"+49 123 456789\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n\n              {/* Company Information */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"company\">Unternehmen *</Label>\n                  <Input\n                    id=\"company\"\n                    {...form.register(\"company\")}\n                    placeholder=\"Muster GmbH\"\n                    data-testid=\"input-company\"\n                  />\n                  {form.formState.errors.company && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.company.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"website\">Website</Label>\n                  <Input\n                    id=\"website\"\n                    type=\"url\"\n                    {...form.register(\"website\")}\n                    placeholder=\"https://unternehmen.de\"\n                    data-testid=\"input-website\"\n                  />\n                  {form.formState.errors.website && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.website.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"employeeCount\">Mitarbeiteranzahl *</Label>\n                  <Select onValueChange={(value) => form.setValue(\"employeeCount\", value)}>\n                    <SelectTrigger data-testid=\"select-employees\">\n                      <SelectValue placeholder=\"Wählen Sie die Anzahl\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {employeeRanges.map((range) => (\n                        <SelectItem key={range.value} value={range.value}>\n                          {range.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.employeeCount && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.employeeCount.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"industry\">Branche *</Label>\n                  <Select onValueChange={(value) => form.setValue(\"industry\", value)}>\n                    <SelectTrigger data-testid=\"select-industry\">\n                      <SelectValue placeholder=\"Wählen Sie Ihre Branche\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {industries.map((industry) => (\n                        <SelectItem key={industry.value} value={industry.value}>\n                          {industry.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.industry && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.industry.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Interested Modules */}\n              <div className=\"space-y-4\">\n                <Label>Interessante KI-Module * (Mehrfachauswahl möglich)</Label>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {modules.map((module) => (\n                    <div key={module.id} className=\"flex items-start space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                      <Checkbox\n                        id={module.id}\n                        onCheckedChange={(checked) => {\n                          const current = form.getValues(\"interestedModules\");\n                          if (checked) {\n                            form.setValue(\"interestedModules\", [...current, module.id]);\n                          } else {\n                            form.setValue(\"interestedModules\", current.filter(id => id !== module.id));\n                          }\n                        }}\n                        data-testid={`checkbox-${module.id}`}\n                      />\n                      <div className=\"space-y-1\">\n                        <label htmlFor={module.id} className=\"text-sm font-medium cursor-pointer\">\n                          {module.name}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">{module.description}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                {form.formState.errors.interestedModules && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.interestedModules.message}</p>\n                )}\n              </div>\n\n              {/* Current Challenges */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currentChallenges\">Aktuelle Herausforderungen *</Label>\n                <Textarea\n                  id=\"currentChallenges\"\n                  {...form.register(\"currentChallenges\")}\n                  placeholder=\"Beschreiben Sie Ihre aktuellen Geschäftsherausforderungen, die durch KI gelöst werden könnten...\"\n                  rows={4}\n                  data-testid=\"textarea-challenges\"\n                />\n                {form.formState.errors.currentChallenges && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.currentChallenges.message}</p>\n                )}\n              </div>\n\n              {/* Budget and Timeline */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"budget\">Geschätztes Budget *</Label>\n                  <Select onValueChange={(value) => form.setValue(\"budget\", value)}>\n                    <SelectTrigger data-testid=\"select-budget\">\n                      <SelectValue placeholder=\"Wählen Sie Ihr Budget\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {budgetRanges.map((budget) => (\n                        <SelectItem key={budget.value} value={budget.value}>\n                          {budget.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.budget && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.budget.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"timeline\">Gewünschter Zeitrahmen *</Label>\n                  <Select onValueChange={(value) => form.setValue(\"timeline\", value)}>\n                    <SelectTrigger data-testid=\"select-timeline\">\n                      <SelectValue placeholder=\"Wählen Sie den Zeitrahmen\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timelines.map((timeline) => (\n                        <SelectItem key={timeline.value} value={timeline.value}>\n                          {timeline.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.timeline && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.timeline.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Additional Information */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"additionalInfo\">Zusätzliche Informationen</Label>\n                <Textarea\n                  id=\"additionalInfo\"\n                  {...form.register(\"additionalInfo\")}\n                  placeholder=\"Weitere wichtige Details zu Ihrem Projekt...\"\n                  rows={3}\n                  data-testid=\"textarea-additional\"\n                />\n              </div>\n\n              {/* Privacy and Newsletter */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id=\"acceptPrivacy\"\n                    {...form.register(\"acceptPrivacy\")}\n                    data-testid=\"checkbox-privacy\"\n                  />\n                  <label htmlFor=\"acceptPrivacy\" className=\"text-sm cursor-pointer\">\n                    Ich stimme der <a href=\"/datenschutz\" className=\"text-primary hover:underline\">Datenschutzerklärung</a> zu und bin damit einverstanden, dass meine Daten zur Bearbeitung meiner Anfrage gespeichert werden. *\n                  </label>\n                </div>\n                {form.formState.errors.acceptPrivacy && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.acceptPrivacy.message}</p>\n                )}\n\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id=\"acceptNewsletter\"\n                    {...form.register(\"acceptNewsletter\")}\n                    data-testid=\"checkbox-newsletter\"\n                  />\n                  <label htmlFor=\"acceptNewsletter\" className=\"text-sm cursor-pointer\">\n                    Ich möchte regelmäßig über neue KI-Lösungen und Best Practices informiert werden.\n                  </label>\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"flex justify-center pt-6\">\n                <HolographicButton \n                  data-testid=\"button-submit-contact\"\n                  className={submitMutation.isPending ? \"opacity-50\" : \"\"}\n                >\n                  <span className=\"flex items-center gap-2\">\n                    {submitMutation.isPending ? \"Wird gesendet...\" : \"Kostenlose Beratung anfordern\"}\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </span>\n                </HolographicButton>\n              </div>\n            </form>\n          </CardContent>\n        </HolographicCard>\n      </div>\n    </section>\n  );\n}","size_bytes":19965},"client/src/components/Features.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageCircle, Settings, BarChart3, Shield, Plus } from \"lucide-react\";\nimport { HolographicCard, HolographicBadge } from \"./HolographicUI\";\nimport InteractiveParticles from \"./InteractiveParticles\";\n\nconst productPortfolio = [\n  {\n    icon: MessageCircle,\n    badge: \"Support\",\n    title: \"Multichannel-Kundensupport\",\n    description: \"KI-Chat- & Voice-Agenten mit intelligenter Gesprächsführung.\",\n    features: [\n      \"KI-Chat- & Voice-Agenten mit natürlicher Sprachverarbeitung\",\n      \"Automatische E-Mail-Antworten und Follow-up-Generierung\", \n      \"Intelligente Ticket-Kategorisierung und Weiterleitung\",\n      \"24/7 Multilingual Support mit Echtzeit-Übersetzung\"\n    ]\n  },\n  {\n    icon: Settings,\n    badge: \"Automation\",\n    title: \"Prozessautomatisierung\",\n    description: \"Rechnungsverarbeitung, Terminplanung & Workflow-Automation.\",\n    features: [\n      \"Rechnungsverarbeitung (Erfassung, Prüfung, Buchung)\",\n      \"Terminplanung & Workflow-Automation\",\n      \"Dokumentenverwaltung (Kategorisierung, Archivierung, Suche)\"\n    ]\n  },\n  {\n    icon: BarChart3,\n    badge: \"Analytics\",\n    title: \"Content & Datenanalyse\",\n    description: \"Generative KI für Content-Erstellung und intelligente Geschäftseinblicke.\",\n    features: [\n      \"Blog-Posts, Social Media Content und SEO-optimierte Texte\",\n      \"Personalisierte E-Mail-Kampagnen und Kundenansprache\",\n      \"Automatische Berichtserstellung und Trend-Analyse\",\n      \"Meeting-Zusammenfassungen und Dokumenten-Generierung\"\n    ]\n  },\n  {\n    icon: Shield,\n    badge: \"Security\",\n    title: \"IT-Sicherheitspaket\",\n    description: \"Bedrohungserkennung, Patch-Management und Sicherheits-Dashboard.\",\n    features: [\n      \"Automatische Bedrohungserkennung & Alarme\",\n      \"Patch- & Update-Management\",\n      \"Sicherheits-Dashboard mit klaren Handlungsempfehlungen\"\n    ]\n  },\n  {\n    icon: Plus,\n    badge: \"Extras\",\n    title: \"Sales & Lead-Generierung\",\n    description: \"KI-gestützte Vertriebsoptimierung und Lead-Qualifizierung.\",\n    features: [\n      \"Automatische Angebotserstellung basierend auf Kundenanforderungen\",\n      \"Intelligente Lead-Bewertung und Priorisierung\",\n      \"Personalisierte Verkaufspräsentationen und Proposals\",\n      \"Predictive Sales Forecasting und Pipeline-Management\"\n    ]\n  }\n];\n\nexport default function Features() {\n  return (\n    <section className=\"py-20 px-4 relative overflow-hidden\" id=\"features\">\n      {/* Background effects */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-background/50 via-background to-background/50\" />\n      <div className=\"absolute top-1/2 left-0 w-96 h-96 bg-primary/5 rounded-full blur-3xl\" />\n      <div className=\"absolute bottom-0 right-0 w-96 h-96 bg-chart-2/5 rounded-full blur-3xl\" />\n      \n      {/* Interactive Particle System */}\n      <div className=\"absolute inset-0 z-5 opacity-50\">\n        <InteractiveParticles />\n      </div>\n      \n      <div className=\"container mx-auto max-w-6xl relative z-10\">\n        <div className=\"text-center space-y-4 mb-16 scroll-reveal\">\n          <h2 className=\"text-3xl lg:text-5xl font-bold gradient-text\" data-testid=\"heading-features\">\n            Dein KI-Produktportfolio\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto scroll-reveal stagger-1\" data-testid=\"text-features-description\">\n            Umfassende KI-Lösungen für jeden Bereich deines Unternehmens.\n          </p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-2 xl:grid-cols-3 gap-8\">\n          {productPortfolio.map((product, index) => {\n            const Icon = product.icon;\n            return (\n              <HolographicCard key={index} className=\"group scroll-reveal\" data-testid={`card-product-${index + 1}`}>\n                <CardHeader>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <div className=\"p-3 rounded-lg bg-primary/20 shadow-glow group-hover:shadow-purple-glow transition-all duration-300\">\n                      <Icon className=\"h-6 w-6 text-primary group-hover:text-chart-2 transition-colors duration-300\" />\n                    </div>\n                    <HolographicBadge data-testid={`badge-${product.badge.toLowerCase()}`}>\n                      {product.badge}\n                    </HolographicBadge>\n                  </div>\n                  <CardTitle className=\"text-xl mb-2\" data-testid={`title-product-${index + 1}`}>\n                    {product.title}\n                  </CardTitle>\n                  <p className=\"text-muted-foreground\" data-testid={`desc-product-${index + 1}`}>\n                    {product.description}\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {product.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"text-sm text-muted-foreground flex items-start gap-2\" data-testid={`feature-${index + 1}-${featureIndex + 1}`}>\n                        <span className=\"w-1 h-1 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </HolographicCard>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5491},"client/src/components/Footer.tsx":{"content":"import signatureLogoImage from \"@assets/IMG_0831 (3)_1758861135123.png\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"border-t bg-card/30\">\n      <div className=\"container mx-auto max-w-6xl px-4 py-16\">\n        {/* Central logo section - much larger and prominent */}\n        <div className=\"flex flex-col items-center gap-8 py-8\">\n          <div className=\"flex flex-col items-center\">\n            <img \n              src={signatureLogoImage} \n              alt=\"AIDevelo.AI Signature\" \n              className=\"h-24 lg:h-32 w-auto invert dark:invert-0 transition-opacity duration-300 hover:opacity-90\"\n              data-testid=\"img-footer-signature\"\n            />\n            <div className=\"w-24 lg:w-32 h-0.5 bg-primary mt-4\"></div>\n          </div>\n          \n          {/* Tagline prominently displayed under logo */}\n          <p className=\"text-lg font-medium text-center text-muted-foreground max-w-md\" data-testid=\"text-footer-description\">\n            Modular AI solutions for growing businesses.\n          </p>\n          \n          {/* Contact information prominently displayed */}\n          <div className=\"flex flex-col md:flex-row items-center gap-6 text-center\">\n            <a \n              href=\"mailto:hello@aidevelo.ai\" \n              className=\"text-base font-medium text-primary hover:text-primary/80 transition-colors\" \n              data-testid=\"link-email\"\n            >\n              hello@aidevelo.ai\n            </a>\n            <div className=\"hidden md:block w-1 h-1 rounded-full bg-muted-foreground\"></div>\n            <p className=\"text-base text-muted-foreground\" data-testid=\"text-gdpr\">\n              GDPR Compliant\n            </p>\n          </div>\n        </div>\n        \n        {/* Navigation links in one line under logo */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n          <div>\n            <h3 className=\"font-semibold mb-4\" data-testid=\"title-product\">Products</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#products\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-products-footer\">AI Agents</a></li>\n              <li><a href=\"#pricing-summary\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-pricing-footer\">Pricing</a></li>\n              <li><a href=\"#references\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-references-footer\">References</a></li>\n            </ul>\n          </div>\n          \n          <div className=\"text-center\">\n            <h3 className=\"font-semibold mb-4\" data-testid=\"title-company\">Company</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-about\">About</a></li>\n              <li><a href=\"#contact\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">Contact</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-blog\">Blog</a></li>\n            </ul>\n          </div>\n          \n          <div className=\"text-right\">\n            <h3 className=\"font-semibold mb-4\" data-testid=\"title-legal\">Legal</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-privacy\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-imprint\">Imprint</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-terms\">Terms</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        {/* Bottom section with copyright */}\n        <div className=\"border-t pt-8\">\n          <p className=\"text-sm text-center text-muted-foreground\" data-testid=\"text-copyright\">\n            © 2024 AIDevelo.AI. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":4194},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\nimport mainLogoImage from \"@assets/IMG_0948_1758859780928.png\";\nimport signatureLogoImage from \"@assets/IMG_0950_1758859780928.png\";\n\nexport default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"sticky top-0 z-50 glass-intense border-b border-white/10\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <nav className=\"flex h-20 items-center justify-between px-4\">\n          <div className=\"flex items-center\">\n            <img \n              src={mainLogoImage} \n              alt=\"AIDevelo.AI Logo\" \n              className=\"h-12 w-auto magnetic hover:scale-110 transition-transform duration-300\"\n              data-testid=\"img-logo\"\n            />\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center gap-8\">\n            <a \n              href=\"#features\" \n              className=\"text-muted-foreground hover:text-primary transition-all duration-300 font-medium relative group\"\n              data-testid=\"link-features\"\n            >\n              Funktionen\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </a>\n            <a \n              href=\"#pricing\" \n              className=\"text-muted-foreground hover:text-primary transition-all duration-300 font-medium relative group\"\n              data-testid=\"link-pricing\"\n            >\n              Preise\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </a>\n            <a \n              href=\"#cases\" \n              className=\"text-muted-foreground hover:text-primary transition-all duration-300 font-medium relative group\"\n              data-testid=\"link-cases\"\n            >\n              Referenzen\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </a>\n            <Button size=\"lg\" className=\"magnetic shadow-glow glow-border\" data-testid=\"button-cta-header\">\n              Kostenlos testen\n            </Button>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"md:hidden\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            data-testid=\"button-menu-toggle\"\n          >\n            {isMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </nav>\n        \n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden border-t border-white/10 glass p-4 animate-slideDown\" data-testid=\"menu-mobile\">\n            <div className=\"flex flex-col gap-4\">\n              <a \n                href=\"#features\" \n                className=\"text-muted-foreground hover:text-primary transition-all duration-300 py-2 px-3 rounded-lg hover-elevate\"\n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"link-features-mobile\"\n              >\n                Funktionen\n              </a>\n              <a \n                href=\"#pricing\" \n                className=\"text-muted-foreground hover:text-primary transition-all duration-300 py-2 px-3 rounded-lg hover-elevate\"\n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"link-pricing-mobile\"\n              >\n                Preise\n              </a>\n              <a \n                href=\"#cases\" \n                className=\"text-muted-foreground hover:text-primary transition-all duration-300 py-2 px-3 rounded-lg hover-elevate\"\n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"link-cases-mobile\"\n              >\n                Referenzen\n              </a>\n              <Button \n                className=\"w-full magnetic shadow-glow\" \n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"button-cta-mobile\"\n              >\n                Kostenlos testen\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}","size_bytes":4335},"client/src/components/Hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { ArrowRight, Play, Sparkles } from \"lucide-react\";\nimport AIAssistantSimulation from \"./AIAssistantSimulation\";\nimport InteractiveParticles from \"./InteractiveParticles\";\nimport { HolographicButton, HolographicBadge } from \"./HolographicUI\";\n\nexport default function Hero() {\n  return (\n    <section className=\"relative min-h-screen flex items-center py-20 px-4 overflow-hidden\">\n      {/* Advanced animated backgrounds */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute inset-0 mesh-gradient\" />\n        <div className=\"absolute top-0 left-1/4 w-96 h-96 bg-primary/20 rounded-full blur-3xl float\" />\n        <div className=\"absolute bottom-0 right-1/4 w-96 h-96 bg-chart-2/20 rounded-full blur-3xl float\" style={{ animationDelay: '2s', animationDuration: '4s' }} />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-background/60\" />\n      </div>\n      \n      {/* Interactive Particle System */}\n      <div className=\"absolute inset-0 z-5\">\n        <InteractiveParticles />\n      </div>\n      \n      <div className=\"container mx-auto max-w-6xl relative z-10\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8 scroll-reveal\">\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full glass text-sm font-medium mb-4 scroll-reveal stagger-1\">\n              <Sparkles className=\"h-4 w-4 text-primary\" />\n              <span>Revolutionäre KI-Lösungen für Ihr Unternehmen</span>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl lg:text-6xl font-bold leading-tight scroll-reveal stagger-2\" data-testid=\"heading-hero\">\n                <span className=\"block\">Mehr Aufträge. Automatisch.</span>{\" \"}\n                <span className=\"gradient-text-cyan-purple block\">\n                  Mit AI.\n                </span>\n              </h1>\n              \n              <p className=\"text-xl text-muted-foreground max-w-lg scroll-reveal stagger-3\" data-testid=\"text-hero-description\">\n                Umfassende KI-Lösungen für Kundensupport, Prozessautomatisierung, Content-Erstellung, IT-Sicherheit und Vertriebsoptimierung – maßgeschneidert für dein Unternehmen.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-3 scroll-reveal stagger-4\">\n              <HolographicBadge data-testid=\"badge-feature-1\">KI-Chat & Voice-Agenten</HolographicBadge>\n              <HolographicBadge data-testid=\"badge-feature-2\">Prozessautomatisierung</HolographicBadge>\n              <HolographicBadge data-testid=\"badge-feature-3\">IT-Sicherheitspaket</HolographicBadge>\n              <HolographicBadge data-testid=\"badge-feature-4\">14 Tage kostenlos</HolographicBadge>\n            </div>\n            \n            <div className=\"space-y-4 scroll-reveal stagger-5\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button size=\"lg\" className=\"text-lg px-8 magnetic shadow-glow glow-border\" data-testid=\"button-cta-hero\">\n                  Jetzt starten\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n                <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 magnetic glass\" data-testid=\"button-demo\">\n                  <Play className=\"mr-2 h-5 w-5\" />\n                  Demo ansehen\n                </Button>\n              </div>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-guarantee\">\n                ✅ 14 Tage Geld-zurück-Garantie • ✅ Keine Einrichtungsgebühren\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"lg:justify-self-end scroll-reveal stagger-3 relative\">\n            {/* AI Assistant Simulation */}\n            <div className=\"relative z-20\">\n              <AIAssistantSimulation />\n            </div>\n            \n            {/* Background holographic elements */}\n            <div className=\"absolute -inset-4 pointer-events-none\">\n              <div className=\"absolute top-0 left-0 w-4 h-4 bg-primary/40 rounded-full blur-sm animate-pulse\" />\n              <div className=\"absolute top-8 right-4 w-2 h-2 bg-chart-2/60 rounded-full blur-sm animate-pulse\" style={{ animationDelay: '1s' }} />\n              <div className=\"absolute bottom-4 left-8 w-3 h-3 bg-green-500/40 rounded-full blur-sm animate-pulse\" style={{ animationDelay: '2s' }} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4705},"client/src/components/HolographicUI.tsx":{"content":"import { useState, useEffect, useRef, ReactNode } from 'react';\n\ninterface HolographicUIProps {\n  children: ReactNode;\n  intensity?: number;\n  className?: string;\n  'data-testid'?: string;\n  enabled?: boolean;\n}\n\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\nexport default function HolographicUI({ \n  children, \n  intensity = 0.2, \n  className = '', \n  'data-testid': testId,\n  enabled = false\n}: HolographicUIProps) {\n  const [mouse, setMouse] = useState<MousePosition>({ x: 0, y: 0 });\n  const [isHovered, setIsHovered] = useState(false);\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = element.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      \n      setMouse({\n        x: (e.clientX - centerX) / (rect.width / 2),\n        y: (e.clientY - centerY) / (rect.height / 2)\n      });\n    };\n\n    const handleMouseEnter = () => setIsHovered(true);\n    const handleMouseLeave = () => {\n      setIsHovered(false);\n      setMouse({ x: 0, y: 0 });\n    };\n\n    element.addEventListener('mousemove', handleMouseMove);\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('mouseleave', handleMouseLeave);\n\n    return () => {\n      element.removeEventListener('mousemove', handleMouseMove);\n      element.removeEventListener('mouseenter', handleMouseEnter);\n      element.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, []);\n\n  const effectiveIntensity = enabled ? intensity : 0;\n  const rotateX = mouse.y * 10 * effectiveIntensity;\n  const rotateY = -mouse.x * 10 * effectiveIntensity;\n  const translateZ = isHovered && enabled ? 20 * effectiveIntensity : 0;\n\n  return (\n    <div\n      ref={elementRef}\n      className={`relative transition-all duration-300 ease-out ${className}`}\n      style={{\n        transform: `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(${translateZ}px)`,\n        transformStyle: 'preserve-3d',\n      }}\n      data-testid={testId}\n    >\n      {/* Holographic glow effect */}\n      <div\n        className=\"absolute inset-0 pointer-events-none opacity-0 transition-opacity duration-300\"\n        style={{\n          opacity: isHovered && enabled ? 0.6 : 0,\n          background: `\n            radial-gradient(\n              circle at ${50 + mouse.x * 20}% ${50 + mouse.y * 20}%, \n              rgba(0, 207, 255, 0.3) 0%, \n              rgba(161, 0, 255, 0.2) 40%, \n              transparent 70%\n            )\n          `,\n          borderRadius: 'inherit',\n          filter: 'blur(10px)',\n          transform: 'translateZ(-10px)',\n        }}\n      />\n\n      {/* Refraction overlay */}\n      <div\n        className=\"absolute inset-0 pointer-events-none opacity-0 transition-opacity duration-300\"\n        style={{\n          opacity: isHovered && enabled ? 0.4 : 0,\n          background: `\n            linear-gradient(\n              ${45 + mouse.x * 30}deg,\n              rgba(0, 207, 255, 0.1) 0%,\n              transparent 30%,\n              transparent 70%,\n              rgba(161, 0, 255, 0.1) 100%\n            )\n          `,\n          borderRadius: 'inherit',\n          transform: 'translateZ(5px)',\n        }}\n      />\n\n      {/* Content with 3D positioning */}\n      <div\n        className=\"relative z-10 transition-transform duration-300\"\n        style={{\n          transform: `translateZ(${isHovered && enabled ? 10 * effectiveIntensity : 0}px)`,\n        }}\n      >\n        {children}\n      </div>\n\n      {/* Floating elements */}\n      {isHovered && enabled && (\n        <>\n          {/* Top left floating orb */}\n          <div\n            className=\"absolute w-2 h-2 bg-primary rounded-full opacity-80 pointer-events-none\"\n            style={{\n              top: '10%',\n              left: '10%',\n              transform: `\n                translateZ(30px) \n                translateX(${mouse.x * 15}px) \n                translateY(${mouse.y * 10}px)\n                scale(${1 + Math.abs(mouse.x) * 0.3})\n              `,\n              boxShadow: '0 0 20px rgba(0, 207, 255, 0.8)',\n              animation: 'pulse 2s infinite ease-in-out',\n            }}\n          />\n\n          {/* Top right floating orb */}\n          <div\n            className=\"absolute w-1.5 h-1.5 bg-chart-2 rounded-full opacity-70 pointer-events-none\"\n            style={{\n              top: '20%',\n              right: '15%',\n              transform: `\n                translateZ(25px) \n                translateX(${mouse.x * -10}px) \n                translateY(${mouse.y * 15}px)\n                scale(${1 + Math.abs(mouse.y) * 0.2})\n              `,\n              boxShadow: '0 0 15px rgba(161, 0, 255, 0.6)',\n              animation: 'pulse 2.5s infinite ease-in-out',\n            }}\n          />\n\n          {/* Bottom floating orb */}\n          <div\n            className=\"absolute w-1 h-1 bg-green-500 rounded-full opacity-60 pointer-events-none\"\n            style={{\n              bottom: '15%',\n              left: '70%',\n              transform: `\n                translateZ(20px) \n                translateX(${mouse.x * 8}px) \n                translateY(${mouse.y * -12}px)\n                scale(${1 + (Math.abs(mouse.x) + Math.abs(mouse.y)) * 0.1})\n              `,\n              boxShadow: '0 0 10px rgba(34, 197, 94, 0.7)',\n              animation: 'pulse 3s infinite ease-in-out',\n            }}\n          />\n        </>\n      )}\n\n      {/* Edge glow */}\n      <div\n        className=\"absolute inset-0 pointer-events-none opacity-0 transition-opacity duration-300\"\n        style={{\n          opacity: isHovered && enabled ? 0.3 : 0,\n          background: 'transparent',\n          border: '1px solid transparent',\n          borderImage: `linear-gradient(\n            ${90 + mouse.x * 45}deg,\n            rgba(0, 207, 255, 0.5) 0%,\n            rgba(161, 0, 255, 0.3) 50%,\n            rgba(0, 207, 255, 0.5) 100%\n          ) 1`,\n          borderRadius: 'inherit',\n          transform: 'translateZ(2px)',\n        }}\n      />\n    </div>\n  );\n}\n\n// Specialized holographic components\nexport function HolographicCard({ children, className = '', ...props }: HolographicUIProps) {\n  return (\n    <HolographicUI\n      className={`glass-intense border border-primary/20 rounded-lg p-6 ${className}`}\n      intensity={0.2}\n      enabled={false}\n      {...props}\n    >\n      {children}\n    </HolographicUI>\n  );\n}\n\nexport function HolographicButton({ children, className = '', onClick, ...props }: HolographicUIProps & { onClick?: () => void }) {\n  return (\n    <HolographicUI\n      className={`inline-block ${className}`}\n      intensity={0.1}\n      enabled={false}\n      {...props}\n    >\n      <button\n        onClick={onClick}\n        className=\"relative px-6 py-3 bg-gradient-to-r from-primary to-chart-2 text-primary-foreground rounded-lg font-medium transition-colors duration-300 hover:opacity-90\"\n      >\n        {children}\n      </button>\n    </HolographicUI>\n  );\n}\n\nexport function HolographicBadge({ children, className = '', ...props }: HolographicUIProps) {\n  return (\n    <HolographicUI\n      className={`inline-block ${className}`}\n      intensity={0.1}\n      enabled={false}\n      {...props}\n    >\n      <div className=\"px-3 py-1 bg-primary/10 border border-primary/30 rounded-full text-sm font-medium text-primary backdrop-blur-sm\">\n        {children}\n      </div>\n    </HolographicUI>\n  );\n}","size_bytes":7540},"client/src/components/IntelligentPricing.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Calculator, TrendingUp, Users, CheckCircle, MessageCircle, Settings, BarChart3, Shield, Plus, Zap, Target, TrendingUp as TrendingUpIcon } from \"lucide-react\";\nimport { HolographicCard, HolographicButton, HolographicBadge } from \"./HolographicUI\";\nimport InteractiveParticles from \"./InteractiveParticles\";\n\nconst modules = [\n  {\n    id: \"support\",\n    name: \"Multichannel-Kundensupport\", \n    basePrice: 150,\n    pricePerUser: 25,\n    savings: \"40% weniger Support-Tickets\",\n    Icon: MessageCircle\n  },\n  {\n    id: \"automation\", \n    name: \"Prozessautomatisierung\",\n    basePrice: 200,\n    pricePerUser: 30,\n    savings: \"60% Zeitersparnis bei Routineaufgaben\",\n    Icon: Settings\n  },\n  {\n    id: \"analytics\",\n    name: \"Content & Datenanalyse\", \n    basePrice: 120,\n    pricePerUser: 20,\n    savings: \"3x schnellere Entscheidungsfindung\",\n    Icon: BarChart3\n  },\n  {\n    id: \"security\",\n    name: \"IT-Sicherheitspaket\",\n    basePrice: 180,\n    pricePerUser: 15,\n    savings: \"90% weniger Sicherheitsvorfälle\",\n    Icon: Shield\n  },\n  {\n    id: \"extras\",\n    name: \"Zusatzmodule\",\n    basePrice: 100,\n    pricePerUser: 10,\n    savings: \"25% höhere Conversion-Rate\", \n    Icon: Plus\n  }\n];\n\nconst companySizes = [\n  { range: \"1-10\", multiplier: 1.0, label: \"Startup\", min: 1, max: 10 },\n  { range: \"11-50\", multiplier: 0.9, label: \"Klein\", min: 11, max: 50 },\n  { range: \"51-200\", multiplier: 0.8, label: \"Mittel\", min: 51, max: 200 },\n  { range: \"201-999\", multiplier: 0.7, label: \"Groß\", min: 201, max: 999 },\n  { range: \"1000+\", multiplier: 0.6, label: \"Enterprise\", min: 1000, max: Infinity }\n];\n\nexport default function IntelligentPricing() {\n  const [employeeCount, setEmployeeCount] = useState([50]);\n  const [selectedModules, setSelectedModules] = useState<string[]>([\"support\", \"automation\"]);\n  const [contractLength, setContractLength] = useState(12);\n\n  const employees = employeeCount[0];\n  const sizeCategory = companySizes.find(size => {\n    return employees >= size.min && employees <= size.max;\n  }) || companySizes[0];\n\n  const calculatePrice = () => {\n    const modulesCost = selectedModules.reduce((total, moduleId) => {\n      const module = modules.find(m => m.id === moduleId);\n      if (!module) return total;\n      return total + module.basePrice + (module.pricePerUser * employees);\n    }, 0);\n\n    const sizeDiscount = modulesCost * sizeCategory.multiplier;\n    const contractDiscount = contractLength >= 24 ? 0.85 : contractLength >= 12 ? 0.9 : 1.0;\n    \n    return Math.round(sizeDiscount * contractDiscount);\n  };\n\n  const calculateROI = () => {\n    const monthlyPrice = calculatePrice();\n    const yearlyPrice = monthlyPrice * 12;\n    \n    // Guard against division by zero\n    if (yearlyPrice <= 0) {\n      return 0;\n    }\n    \n    // Conservative ROI calculation based on time savings and efficiency gains\n    const avgSalary = 50000; // Average German employee salary\n    const timeSavingsPerEmployee = 0.15; // 15% time savings\n    const yearlySavings = employees * avgSalary * timeSavingsPerEmployee;\n    \n    const roi = ((yearlySavings - yearlyPrice) / yearlyPrice) * 100;\n    return Math.round(roi);\n  };\n\n  const monthlyPrice = calculatePrice();\n  const roi = calculateROI();\n\n  return (\n    <section className=\"py-20 px-4 relative overflow-hidden\" id=\"intelligent-pricing\">\n      {/* Animated background */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute inset-0 mesh-gradient\" />\n        <div className=\"absolute top-1/4 right-0 w-96 h-96 bg-primary/10 rounded-full blur-3xl float\" />\n        <div className=\"absolute bottom-1/4 left-0 w-96 h-96 bg-chart-2/10 rounded-full blur-3xl float\" style={{ animationDelay: '3s' }} />\n      </div>\n      \n      <div className=\"container mx-auto max-w-6xl relative z-10\">\n        <div className=\"text-center space-y-4 mb-16 scroll-reveal\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <Calculator className=\"h-8 w-8 text-primary pulse-glow\" />\n            <h2 className=\"text-3xl lg:text-5xl font-bold gradient-text\" data-testid=\"heading-intelligent-pricing\">\n              Intelligenter Preisrechner\n            </h2>\n          </div>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto scroll-reveal stagger-1\" data-testid=\"text-pricing-description\">\n            Finde die perfekte KI-Lösung für dein Unternehmen. Preis und ROI werden automatisch berechnet.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Configuration Panel */}\n          <HolographicCard className=\"\" data-testid=\"card-pricing-config\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Konfiguration\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              {/* Employee Count */}\n              <div>\n                <label className=\"text-sm font-medium mb-4 block\" data-testid=\"label-employees\">\n                  Anzahl Mitarbeiter: {employees}\n                </label>\n                <Slider\n                  value={employeeCount}\n                  onValueChange={setEmployeeCount}\n                  max={2000}\n                  min={1}\n                  step={5}\n                  className=\"w-full\"\n                  data-testid=\"slider-employees\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground mt-2\">\n                  <span>1</span>\n                  <span>2000+</span>\n                </div>\n                <Badge variant=\"outline\" className=\"mt-2\" data-testid=\"badge-company-size\">\n                  {sizeCategory.label} ({sizeCategory.range} MA) - {Math.round((1 - sizeCategory.multiplier) * 100)}% Mengenrabatt\n                </Badge>\n              </div>\n\n              {/* Contract Length */}\n              <div>\n                <label className=\"text-sm font-medium mb-4 block\" data-testid=\"label-contract\">\n                  Vertragslaufzeit\n                </label>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {[6, 12, 24].map((months) => (\n                    <Button\n                      key={months}\n                      variant={contractLength === months ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setContractLength(months)}\n                      data-testid={`button-contract-${months}`}\n                    >\n                      {months} Monate\n                      {months >= 12 && (\n                        <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                          -{months >= 24 ? '15' : '10'}%\n                        </Badge>\n                      )}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Module Selection */}\n              <div>\n                <label className=\"text-sm font-medium mb-4 block\" data-testid=\"label-modules\">\n                  KI-Module auswählen\n                </label>\n                <div className=\"space-y-3\">\n                  {modules.map((module) => (\n                    <div key={module.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Switch\n                          checked={selectedModules.includes(module.id)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setSelectedModules([...selectedModules, module.id]);\n                            } else {\n                              setSelectedModules(selectedModules.filter(id => id !== module.id));\n                            }\n                          }}\n                          data-testid={`switch-module-${module.id}`}\n                        />\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <module.Icon className=\"h-4 w-4 text-primary\" />\n                            <span className=\"font-medium text-sm\">{module.name}</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">{module.savings}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">\n                          €{module.basePrice + (module.pricePerUser * employees)}/Monat\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          €{module.basePrice} + €{module.pricePerUser} × {employees} MA\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </HolographicCard>\n\n          {/* Results Panel */}\n          <HolographicCard className=\"scroll-reveal stagger-3\" data-testid=\"card-pricing-results\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Ihr Angebot\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Price Display */}\n              <div className=\"text-center space-y-2\">\n                <div className=\"text-4xl font-bold text-primary\" data-testid=\"text-monthly-price\">\n                  €{monthlyPrice.toLocaleString()}\n                </div>\n                <p className=\"text-muted-foreground\" data-testid=\"text-price-period\">pro Monat</p>\n                <p className=\"text-lg font-semibold\" data-testid=\"text-yearly-price\">\n                  €{(monthlyPrice * 12).toLocaleString()} / Jahr\n                </p>\n              </div>\n\n              {/* ROI Display */}\n              {monthlyPrice > 0 ? (\n                <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950/20 dark:to-blue-950/20 border-green-200 dark:border-green-800\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-roi\">\n                        {roi >= 0 ? '+' : ''}{roi}% ROI\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-roi-description\">\n                        Erwartete Rendite im ersten Jahr\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card className=\"bg-muted/30\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg text-muted-foreground\" data-testid=\"text-no-modules\">\n                        Wählen Sie Module für ROI-Berechnung\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Selected Features */}\n              <div>\n                <h4 className=\"font-medium mb-3\" data-testid=\"title-included-features\">Enthaltene Module:</h4>\n                <div className=\"space-y-2\">\n                  {selectedModules.map((moduleId) => {\n                    const module = modules.find(m => m.id === moduleId);\n                    if (!module) return null;\n                    return (\n                      <div key={moduleId} className=\"flex items-center gap-2 text-sm\">\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        <div className=\"flex items-center gap-2\">\n                          <module.Icon className=\"h-4 w-4 text-primary\" />\n                          <span>{module.name}</span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Call to Action */}\n              <div className=\"space-y-3 pt-4 border-t\">\n                <Button \n                  className=\"w-full\" \n                  size=\"lg\" \n                  onClick={() => {\n                    const contactSection = document.getElementById('kontakt');\n                    if (contactSection) {\n                      contactSection.scrollIntoView({ behavior: 'smooth' });\n                    }\n                  }}\n                  data-testid=\"button-request-quote\"\n                >\n                  Kostenloses Angebot anfordern\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  onClick={() => {\n                    const contactSection = document.getElementById('kontakt');\n                    if (contactSection) {\n                      contactSection.scrollIntoView({ behavior: 'smooth' });\n                    }\n                  }}\n                  data-testid=\"button-demo\"\n                >\n                  Live-Demo vereinbaren\n                </Button>\n                <p className=\"text-xs text-center text-muted-foreground\">\n                  14 Tage kostenlos testen • Keine Einrichtungsgebühren\n                </p>\n              </div>\n            </CardContent>\n          </HolographicCard>\n        </div>\n\n        {/* Value Propositions */}\n        <div className=\"grid md:grid-cols-3 gap-6 mt-16\">\n          <Card className=\"text-center hover-elevate\" data-testid=\"card-value-1\">\n            <CardContent className=\"pt-6\">\n              <Zap className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"font-semibold mb-2\">Sofortiger Start</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Implementation in 24-48h. Erste Ergebnisse sofort sichtbar.\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"text-center hover-elevate\" data-testid=\"card-value-2\">\n            <CardContent className=\"pt-6\">\n              <Target className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"font-semibold mb-2\">Maßgeschneidert</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Jede Lösung wird individuell an Ihre Branche angepasst.\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"text-center hover-elevate\" data-testid=\"card-value-3\">\n            <CardContent className=\"pt-6\">\n              <TrendingUpIcon className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"font-semibold mb-2\">Garantierte Einsparungen</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Geld-zurück-Garantie, wenn keine 20% Effizienzsteigerung erreicht wird.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":15427},"client/src/components/InteractiveParticles.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  maxLife: number;\n  size: number;\n  type: 'node' | 'connection';\n  connected: number[];\n}\n\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\nexport default function InteractiveParticles() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationFrameRef = useRef<number>();\n  const particlesRef = useRef<Particle[]>([]);\n  const mouseRef = useRef<MousePosition>({ x: 0, y: 0 });\n  const [isMouseActive, setIsMouseActive] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const updateCanvasSize = () => {\n      const rect = canvas.getBoundingClientRect();\n      canvas.width = rect.width * window.devicePixelRatio;\n      canvas.height = rect.height * window.devicePixelRatio;\n      ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n      canvas.style.width = rect.width + 'px';\n      canvas.style.height = rect.height + 'px';\n    };\n\n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n\n    // Initialize particles\n    const initParticles = () => {\n      particlesRef.current = [];\n      const particleCount = Math.min(80, Math.floor((canvas.width * canvas.height) / 15000));\n      \n      for (let i = 0; i < particleCount; i++) {\n        particlesRef.current.push({\n          x: Math.random() * canvas.width / window.devicePixelRatio,\n          y: Math.random() * canvas.height / window.devicePixelRatio,\n          vx: (Math.random() - 0.5) * 0.5,\n          vy: (Math.random() - 0.5) * 0.5,\n          life: Math.random() * 100,\n          maxLife: 100,\n          size: Math.random() * 2 + 1,\n          type: 'node',\n          connected: []\n        });\n      }\n    };\n\n    initParticles();\n\n    // Mouse tracking\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = canvas.getBoundingClientRect();\n      mouseRef.current = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      };\n      setIsMouseActive(true);\n    };\n\n    const handleMouseLeave = () => {\n      setIsMouseActive(false);\n    };\n\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n    // Animation loop\n    const animate = () => {\n      const rect = canvas.getBoundingClientRect();\n      ctx.clearRect(0, 0, rect.width, rect.height);\n      \n      const particles = particlesRef.current;\n      const mouse = mouseRef.current;\n\n      // Update particles\n      particles.forEach((particle, i) => {\n        // Apply mouse attraction\n        if (isMouseActive) {\n          const dx = mouse.x - particle.x;\n          const dy = mouse.y - particle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance < 150) {\n            const force = (150 - distance) / 150;\n            particle.vx += (dx / distance) * force * 0.02;\n            particle.vy += (dy / distance) * force * 0.02;\n          }\n        }\n\n        // Update position\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        // Apply friction\n        particle.vx *= 0.99;\n        particle.vy *= 0.99;\n\n        // Boundary bounce\n        if (particle.x < 0 || particle.x > rect.width) particle.vx *= -0.8;\n        if (particle.y < 0 || particle.y > rect.height) particle.vy *= -0.8;\n        \n        // Keep in bounds\n        particle.x = Math.max(0, Math.min(rect.width, particle.x));\n        particle.y = Math.max(0, Math.min(rect.height, particle.y));\n\n        // Update life\n        particle.life += 0.5;\n        if (particle.life > particle.maxLife) {\n          particle.life = 0;\n        }\n\n        // Find connections\n        particle.connected = [];\n        particles.forEach((other, j) => {\n          if (i !== j) {\n            const dx = particle.x - other.x;\n            const dy = particle.y - other.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            \n            if (distance < 120) {\n              particle.connected.push(j);\n            }\n          }\n        });\n      });\n\n      // Render connections\n      particles.forEach((particle, i) => {\n        particle.connected.forEach(connectedIndex => {\n          if (connectedIndex > i) { // Avoid duplicate lines\n            const other = particles[connectedIndex];\n            const dx = particle.x - other.x;\n            const dy = particle.y - other.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            const opacity = Math.max(0, (120 - distance) / 120) * 0.3;\n\n            ctx.beginPath();\n            ctx.moveTo(particle.x, particle.y);\n            ctx.lineTo(other.x, other.y);\n            \n            // Gradient line\n            const gradient = ctx.createLinearGradient(particle.x, particle.y, other.x, other.y);\n            gradient.addColorStop(0, `rgba(0, 207, 255, ${opacity})`);\n            gradient.addColorStop(1, `rgba(161, 0, 255, ${opacity * 0.8})`);\n            \n            ctx.strokeStyle = gradient;\n            ctx.lineWidth = 1;\n            ctx.stroke();\n          }\n        });\n      });\n\n      // Render particles\n      particles.forEach(particle => {\n        const lifeRatio = particle.life / particle.maxLife;\n        const opacity = Math.sin(lifeRatio * Math.PI) * 0.8 + 0.2;\n        \n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        \n        // Gradient fill\n        const gradient = ctx.createRadialGradient(\n          particle.x, particle.y, 0,\n          particle.x, particle.y, particle.size * 2\n        );\n        gradient.addColorStop(0, `rgba(0, 207, 255, ${opacity})`);\n        gradient.addColorStop(0.7, `rgba(161, 0, 255, ${opacity * 0.6})`);\n        gradient.addColorStop(1, `rgba(161, 0, 255, 0)`);\n        \n        ctx.fillStyle = gradient;\n        ctx.fill();\n\n        // Glow effect\n        if (isMouseActive) {\n          const dx = mouse.x - particle.x;\n          const dy = mouse.y - particle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance < 100) {\n            const glowIntensity = (100 - distance) / 100;\n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, particle.size * (1 + glowIntensity), 0, Math.PI * 2);\n            ctx.fillStyle = `rgba(0, 207, 255, ${glowIntensity * 0.3})`;\n            ctx.fill();\n          }\n        }\n      });\n\n      // Mouse interaction indicator\n      if (isMouseActive) {\n        ctx.beginPath();\n        ctx.arc(mouse.x, mouse.y, 50, 0, Math.PI * 2);\n        ctx.strokeStyle = 'rgba(0, 207, 255, 0.2)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        ctx.beginPath();\n        ctx.arc(mouse.x, mouse.y, 30, 0, Math.PI * 2);\n        ctx.strokeStyle = 'rgba(161, 0, 255, 0.3)';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener('resize', updateCanvasSize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isMouseActive]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full pointer-events-auto z-10\"\n      style={{ \n        background: 'transparent',\n        mixBlendMode: 'screen'\n      }}\n      data-testid=\"interactive-particles\"\n    />\n  );\n}","size_bytes":7701},"client/src/components/Pricing.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check } from \"lucide-react\";\n\nconst pricingTiers = [\n  {\n    name: \"Starter\",\n    price: \"€299\",\n    period: \"/Monat\",\n    badge: \"Starter\",\n    popular: false,\n    features: [\n      \"KI-Chat Agent (1 Kanal)\",\n      \"Basis Prozessautomatisierung\",\n      \"Standard Support\",\n    ],\n    cta: \"Los geht's\",\n  },\n  {\n    name: \"Professional\",\n    price: \"€799\",\n    period: \"/Monat\",\n    badge: \"Beliebt\",\n    popular: true,\n    features: [\n      \"Multichannel KI-Support\",\n      \"Vollständige Prozessautomatisierung\",\n      \"Content & Datenanalyse\",\n      \"IT-Sicherheitspaket\",\n    ],\n    cta: \"Kostenlos testen\",\n  },\n  {\n    name: \"Enterprise\",\n    price: \"€1.999\",\n    period: \"/Monat\",\n    badge: \"Enterprise\",\n    popular: false,\n    features: [\n      \"Alle KI-Module inklusive\",\n      \"Individuelle Anpassungen\",\n      \"Dedicated Account Manager\",\n      \"24/7 Premium Support\",\n    ],\n    cta: \"Demo anfragen\",\n  },\n];\n\nexport default function Pricing() {\n  return (\n    <section className=\"py-20 px-4\" id=\"pricing\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl lg:text-5xl font-bold\" data-testid=\"heading-pricing\">\n            Transparente Preise\n          </h2>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"text-pricing-description\">\n            Starte klein. Skaliere, wenn es sich lohnt.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          {pricingTiers.map((tier, index) => (\n            <Card \n              key={index} \n              className={`relative hover-elevate ${tier.popular ? 'ring-2 ring-primary/50' : ''}`}\n              data-testid={`card-pricing-${tier.name.toLowerCase()}`}\n            >\n              {tier.popular && (\n                <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                  <Badge className=\"bg-primary text-primary-foreground\" data-testid=\"badge-popular\">\n                    Beliebt\n                  </Badge>\n                </div>\n              )}\n              \n              <CardHeader className=\"text-center pb-8\">\n                <Badge variant=\"outline\" className=\"w-fit mx-auto\" data-testid={`badge-tier-${tier.name.toLowerCase()}`}>\n                  {tier.badge}\n                </Badge>\n                <div className=\"mt-4\">\n                  <div className=\"flex items-baseline justify-center gap-1\">\n                    <span className=\"text-4xl font-bold\" data-testid={`price-${tier.name.toLowerCase()}`}>\n                      {tier.price}\n                    </span>\n                    <span className=\"text-muted-foreground\" data-testid={`period-${tier.name.toLowerCase()}`}>\n                      {tier.period}\n                    </span>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <ul className=\"space-y-3\">\n                  {tier.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-start gap-3\">\n                      <Check className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\" data-testid={`feature-${tier.name.toLowerCase()}-${featureIndex}`}>\n                        {feature}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n              \n              <CardFooter>\n                <Button \n                  className=\"w-full\" \n                  variant={tier.popular ? \"default\" : \"outline\"}\n                  data-testid={`button-cta-${tier.name.toLowerCase()}`}\n                >\n                  {tier.cta}\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4149},"client/src/components/Testimonials.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Quote } from \"lucide-react\";\n\nconst testimonials = [\n  {\n    id: 1,\n    quote: \"In 6 Wochen von 0 auf 40 qualifizierte Leads/Monat – ohne Ads hochzudrehen.\",\n    author: \"Lara M.\",\n    role: \"Agenturinhaberin\",\n  },\n  {\n    id: 2,\n    quote: \"Der AI-Responder beantwortet 80% der Anfragen in < 60 Sekunden. Kunden lieben es.\",\n    author: \"Jonas M.\",\n    role: \"SaaS-Gründer\",\n  },\n  {\n    id: 3,\n    quote: \"Die Landingpages sind richtig schnell und sehen top aus. Conversion +38%.\",\n    author: \"Deniz M.\",\n    role: \"E‑Commerce\",\n  },\n];\n\nexport default function Testimonials() {\n  return (\n    <section className=\"py-20 px-4\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {testimonials.map((testimonial) => (\n            <Card key={testimonial.id} className=\"hover-elevate\" data-testid={`testimonial-${testimonial.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <Quote className=\"h-8 w-8 text-primary/60\" />\n                  <blockquote className=\"text-lg font-medium leading-relaxed\" data-testid={`quote-${testimonial.id}`}>\n                    {testimonial.quote}\n                  </blockquote>\n                  <footer className=\"text-sm text-muted-foreground\" data-testid={`author-${testimonial.id}`}>\n                    — {testimonial.author}, {testimonial.role}\n                  </footer>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":1647},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useProductSelection.ts":{"content":"import { useState, useEffect } from \"react\";\n\nconst STORAGE_KEY = \"aidevelo-selected-modules\";\n\nexport function useProductSelection() {\n  const [selectedModuleIds, setSelectedModuleIds] = useState<string[]>(() => {\n    // Load from localStorage on initial render\n    if (typeof window !== \"undefined\") {\n      try {\n        const stored = localStorage.getItem(STORAGE_KEY);\n        return stored ? JSON.parse(stored) : [];\n      } catch {\n        return [];\n      }\n    }\n    return [];\n  });\n\n  // Persist to localStorage whenever selection changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedModuleIds));\n    } catch (error) {\n      console.warn(\"Failed to save product selection to localStorage:\", error);\n    }\n  }, [selectedModuleIds]);\n\n  const toggleModule = (moduleId: string, enabled: boolean) => {\n    setSelectedModuleIds(prev => {\n      if (enabled) {\n        // Add module if not already selected\n        return prev.includes(moduleId) ? prev : [...prev, moduleId];\n      } else {\n        // Remove module\n        return prev.filter(id => id !== moduleId);\n      }\n    });\n  };\n\n  const isModuleSelected = (moduleId: string) => {\n    return selectedModuleIds.includes(moduleId);\n  };\n\n  const clearSelection = () => {\n    setSelectedModuleIds([]);\n  };\n\n  const selectAll = () => {\n    setSelectedModuleIds([\"phone\", \"chat\", \"social\"]);\n  };\n\n  return {\n    selectedModuleIds,\n    toggleModule,\n    isModuleSelected,\n    clearSelection,\n    selectAll,\n    hasSelection: selectedModuleIds.length > 0\n  };\n}","size_bytes":1567},"client/src/hooks/useScrollReveal.ts":{"content":"import { useEffect } from 'react';\n\nexport const useScrollReveal = () => {\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add('revealed');\n          }\n        });\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n      }\n    );\n\n    // Observe all scroll-reveal elements\n    const scrollRevealElements = document.querySelectorAll('.scroll-reveal');\n    scrollRevealElements.forEach((el) => observer.observe(el));\n\n    return () => {\n      scrollRevealElements.forEach((el) => observer.unobserve(el));\n    };\n  }, []);\n};","size_bytes":702},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/LandingPage.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/Header\";\nimport Hero from \"@/components/Hero\";\nimport Features from \"@/components/Features\";\nimport Pricing from \"@/components/Pricing\";\nimport IntelligentPricing from \"@/components/IntelligentPricing\";\nimport CaseStudies from \"@/components/CaseStudies\";\nimport Testimonials from \"@/components/Testimonials\";\nimport ContactForm from \"@/components/ContactForm\";\nimport Footer from \"@/components/Footer\";\nimport { useScrollReveal } from \"@/hooks/useScrollReveal\";\n\nexport default function LandingPage() {\n  // Set dark mode by default for AIDevelo.AI design\n  useEffect(() => {\n    document.documentElement.classList.add('dark');\n  }, []);\n  \n  // Initialize scroll reveal animations\n  useScrollReveal();\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n      <main>\n        <Hero />\n        <Features />\n        <Pricing />\n        <IntelligentPricing />\n        <CaseStudies />\n        <Testimonials />\n        <ContactForm />\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":1088},"client/src/pages/ModularLandingPage.tsx":{"content":"import EnglishHeader from \"@/components/landing/EnglishHeader\";\nimport EnglishHero from \"@/components/landing/EnglishHero\";\nimport ProductCards from \"@/components/landing/ProductCards\";\nimport PricingSummary from \"@/components/landing/PricingSummary\";\nimport References from \"@/components/landing/References\";\nimport FAQ from \"@/components/landing/FAQ\";\nimport ContactForm from \"@/components/ContactForm\";\nimport Footer from \"@/components/Footer\";\nimport { useProductSelection } from \"@/hooks/useProductSelection\";\nimport ChatWidget from \"@/components/ChatWidget\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\n\nexport default function ModularLandingPage() {\n  const { selectedModuleIds, toggleModule } = useProductSelection();\n  const [demoDataCreated, setDemoDataCreated] = useState(false);\n  const [showChatDemo, setShowChatDemo] = useState(false);\n\n  const createDemoData = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/demo-data', {});\n      const data = await response.json();\n      if (data.success) {\n        setDemoDataCreated(true);\n        alert('Demo data created! You can now visit the dashboard to see your AI agents.');\n      }\n    } catch (error) {\n      console.error('Error creating demo data:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <EnglishHeader />\n      \n      <main>\n        <EnglishHero />\n        \n        <ProductCards \n          selectedModuleIds={selectedModuleIds}\n          onModuleToggle={toggleModule}\n        />\n        \n        <PricingSummary selectedModuleIds={selectedModuleIds} />\n        \n        <References />\n        \n        <FAQ />\n        \n        <ContactForm />\n        \n        {/* Demo Section */}\n        <section className=\"py-20 bg-muted/50\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold mb-4\">Try Our AI Agents</h2>\n              <p className=\"text-lg text-muted-foreground mb-8\">\n                Experience the power of AI automation with live demos\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                <Button \n                  onClick={createDemoData}\n                  disabled={demoDataCreated}\n                  variant=\"outline\"\n                  className=\"font-semibold\"\n                  data-testid=\"button-create-demo-data\"\n                >\n                  {demoDataCreated ? '✅ PRO Account Active - All Products Unlocked!' : '🚀 Create PRO Account (All AI Products)'}\n                </Button>\n                \n                <Button \n                  onClick={() => window.open('/dashboard', '_blank')}\n                  variant=\"default\"\n                  data-testid=\"button-view-dashboard\"\n                >\n                  View Dashboard\n                </Button>\n                \n                <Button \n                  onClick={() => setShowChatDemo(!showChatDemo)}\n                  variant=\"secondary\"\n                  data-testid=\"button-toggle-chat-demo\"\n                >\n                  {showChatDemo ? 'Hide Chat Demo' : 'Try Chat Agent'}\n                </Button>\n              </div>\n            </div>\n            \n            {showChatDemo && (\n              <div className=\"max-w-md mx-auto\">\n                <ChatWidget \n                  agentConfigId=\"demo-chat-agent\"\n                  position=\"embedded\"\n                  welcomeMessage=\"Hello! I'm your AI assistant. I can help you learn about our AI automation services. What would you like to know?\"\n                  companyName=\"AIDevelo.AI\"\n                  brandColor=\"#00cfff\"\n                />\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n      \n      {/* Floating Chat Widget for website visitors */}\n      <ChatWidget \n        agentConfigId=\"demo-chat-agent\"\n        position=\"bottom-right\"\n        welcomeMessage=\"Hi! I'm here to help you learn about our AI automation solutions. How can I assist you today?\"\n        companyName=\"AIDevelo.AI\"\n        brandColor=\"#00cfff\"\n      />\n    </div>\n  );\n}","size_bytes":4292},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CaseStudies.tsx":{"content":"import CaseStudies from '../CaseStudies';\n\nexport default function CaseStudiesExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <CaseStudies />\n    </div>\n  );\n}","size_bytes":189},"client/src/components/examples/ContactForm.tsx":{"content":"import ContactForm from '../ContactForm';\n\nexport default function ContactFormExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <ContactForm />\n    </div>\n  );\n}","size_bytes":189},"client/src/components/examples/Features.tsx":{"content":"import Features from '../Features';\n\nexport default function FeaturesExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Features />\n    </div>\n  );\n}","size_bytes":177},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}","size_bytes":97},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return <Header />;\n}","size_bytes":97},"client/src/components/examples/Hero.tsx":{"content":"import Hero from '../Hero';\n\nexport default function HeroExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Hero />\n    </div>\n  );\n}","size_bytes":161},"client/src/components/examples/Pricing.tsx":{"content":"import Pricing from '../Pricing';\n\nexport default function PricingExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Pricing />\n    </div>\n  );\n}","size_bytes":173},"client/src/components/examples/Testimonials.tsx":{"content":"import Testimonials from '../Testimonials';\n\nexport default function TestimonialsExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Testimonials />\n    </div>\n  );\n}","size_bytes":193},"client/src/components/landing/EnglishHeader.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport mainLogoImage from \"@assets/IMG_0948_1758859780928.png\";\n\nexport default function EnglishHeader() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"sticky top-0 z-50 glass-intense border-b border-white/10\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <nav className=\"relative flex h-20 items-center px-4\">\n          {/* Left Navigation */}\n          <div className=\"hidden lg:flex items-center gap-6 flex-1\">\n            <a \n              href=\"#products\" \n              className=\"text-muted-foreground hover:text-primary transition-all duration-300 font-medium relative group\"\n              data-testid=\"link-products\"\n            >\n              Products\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </a>\n            <a \n              href=\"#pricing-summary\" \n              className=\"text-muted-foreground hover:text-primary transition-all duration-300 font-medium relative group\"\n              data-testid=\"link-pricing\"\n            >\n              Pricing\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </a>\n          </div>\n          \n          {/* Perfectly Centered Logo */}\n          <div className=\"absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n            <img \n              src={mainLogoImage} \n              alt=\"AIDevelo.AI Logo\" \n              className=\"h-12 w-auto invert dark:invert-0 transition-opacity duration-300 hover:opacity-90\"\n              data-testid=\"img-logo\"\n            />\n          </div>\n          \n          {/* Right Navigation */}\n          <div className=\"hidden lg:flex items-center gap-6 flex-1 justify-end\">\n            <a \n              href=\"#references\" \n              className=\"text-muted-foreground hover:text-primary transition-all duration-300 font-medium relative group\"\n              data-testid=\"link-references\"\n            >\n              References\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </a>\n            <Link \n              href=\"/dashboard\" \n              className=\"text-muted-foreground hover:text-primary transition-all duration-300 font-medium relative group\"\n              data-testid=\"link-dashboard\"\n            >\n              My Dashboard\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </Link>\n            <Button size=\"lg\" className=\"\" data-testid=\"button-cta-header\">\n              Start Free Trial\n            </Button>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"lg:hidden ml-auto\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            data-testid=\"button-menu-toggle\"\n          >\n            {isMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </nav>\n        \n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"lg:hidden border-t border-white/10 glass p-4\" data-testid=\"menu-mobile\">\n            <div className=\"flex flex-col gap-4\">\n              <a \n                href=\"#products\" \n                className=\"text-muted-foreground hover:text-primary transition-all duration-300 py-2 px-3 rounded-lg hover-elevate\"\n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"link-products-mobile\"\n              >\n                Products\n              </a>\n              <a \n                href=\"#pricing-summary\" \n                className=\"text-muted-foreground hover:text-primary transition-all duration-300 py-2 px-3 rounded-lg hover-elevate\"\n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"link-pricing-mobile\"\n              >\n                Pricing\n              </a>\n              <a \n                href=\"#references\" \n                className=\"text-muted-foreground hover:text-primary transition-all duration-300 py-2 px-3 rounded-lg hover-elevate\"\n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"link-references-mobile\"\n              >\n                References\n              </a>\n              <Link \n                href=\"/dashboard\" \n                className=\"text-muted-foreground hover:text-primary transition-all duration-300 py-2 px-3 rounded-lg hover-elevate\"\n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"link-dashboard-mobile\"\n              >\n                My Dashboard\n              </Link>\n              <Button \n                className=\"w-full\" \n                onClick={() => setIsMenuOpen(false)}\n                data-testid=\"button-cta-mobile\"\n              >\n                Start Free Trial\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}","size_bytes":5293},"client/src/components/landing/EnglishHero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRight, Sparkles, Zap, Users } from \"lucide-react\";\nimport { HolographicCard, HolographicButton } from \"@/components/HolographicUI\";\n\nexport default function EnglishHero() {\n  const scrollToProducts = () => {\n    document.getElementById('products')?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const scrollToContact = () => {\n    document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center px-4 overflow-hidden\">\n      {/* Animated background elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-primary/5 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute bottom-1/4 right-1/4 w-80 h-80 bg-chart-2/5 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-primary/3 to-chart-2/3 rounded-full blur-3xl animate-pulse delay-500\"></div>\n      </div>\n\n      <div className=\"container mx-auto max-w-4xl text-center relative z-10\">\n        {/* Trust indicators */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-8\">\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            <Sparkles className=\"w-3 h-3 mr-1\" />\n            AI-Powered\n          </Badge>\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            <Zap className=\"w-3 h-3 mr-1\" />\n            14-Day Free Trial\n          </Badge>\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            <Users className=\"w-3 h-3 mr-1\" />\n            SME Focused\n          </Badge>\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* Main headline */}\n          <div className=\"space-y-4\">\n            <h1 \n              className=\"text-4xl lg:text-7xl font-bold gradient-text leading-tight\"\n              data-testid=\"heading-hero\"\n            >\n              Pick Your AI Agents.\n              <br />\n              <span className=\"text-primary\">Pay Only for What You Use.</span>\n            </h1>\n            \n            <p \n              className=\"text-xl lg:text-2xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\"\n              data-testid=\"text-hero-description\"\n            >\n              Transform your business with modular AI solutions. Choose phone, chat, or social media agents individually. \n              <strong className=\"text-foreground\"> No bundles, no waste, just results.</strong>\n            </p>\n          </div>\n\n          {/* Value proposition */}\n          <HolographicCard className=\"max-w-2xl mx-auto\">\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\">€49-79</div>\n                  <div className=\"text-sm text-muted-foreground\">Per agent/month</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\">24/7</div>\n                  <div className=\"text-sm text-muted-foreground\">Always working</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\">15%</div>\n                  <div className=\"text-sm text-muted-foreground\">Multi-agent discount</div>\n                </div>\n              </div>\n            </div>\n          </HolographicCard>\n\n          {/* CTAs */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <HolographicButton \n              onClick={scrollToProducts}\n              className=\"text-lg font-semibold\"\n              data-testid=\"button-explore-products\"\n            >\n              <span className=\"flex items-center gap-2\">\n                Explore AI Agents\n                <ArrowRight className=\"h-5 w-5\" />\n              </span>\n            </HolographicButton>\n            \n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              onClick={scrollToContact}\n              className=\"text-lg backdrop-blur-sm bg-background/50\"\n              data-testid=\"button-talk-to-expert\"\n            >\n              Talk to Expert\n            </Button>\n          </div>\n\n          {/* Social proof teaser */}\n          <div className=\"pt-8\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Trusted by SMEs across Europe\n            </p>\n            <div className=\"flex justify-center items-center gap-8 opacity-60\">\n              <div className=\"text-xs font-medium\">Manufacturing</div>\n              <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n              <div className=\"text-xs font-medium\">Professional Services</div>\n              <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n              <div className=\"text-xs font-medium\">E-commerce</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5198},"client/src/components/landing/FAQ.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { HelpCircle, MessageCircle } from \"lucide-react\";\nimport { HolographicCard } from \"@/components/HolographicUI\";\n\ninterface FAQItem {\n  id: string;\n  question: string;\n  answer: string;\n  category: \"general\" | \"pricing\" | \"technical\" | \"business\";\n}\n\nconst faqItems: FAQItem[] = [\n  {\n    id: \"what-are-ai-agents\",\n    question: \"What exactly are AI agents and how do they work?\",\n    answer: \"AI agents are intelligent software programs that can understand, learn, and act on behalf of your business. Our phone agent answers calls using natural language processing, our chat agent handles website inquiries in real-time, and our social media agent creates content and engages with your audience automatically. They operate 24/7 and integrate seamlessly with your existing systems.\",\n    category: \"general\"\n  },\n  {\n    id: \"modular-pricing\",\n    question: \"How does the modular pricing work?\", \n    answer: \"Unlike traditional bundled solutions, you pay only for the AI agents you actually need. Each agent has its own monthly fee: Phone Agent (€79), Chat Agent (€49), Social Media Agent (€59). Select multiple agents and get automatic discounts: 10% off for 2 agents, 15% off for 3 agents. No long-term contracts, cancel anytime.\",\n    category: \"pricing\"\n  },\n  {\n    id: \"setup-time\",\n    question: \"How long does it take to set up and see results?\",\n    answer: \"Most customers see initial results within 48 hours. Phone and chat agents can be configured in under 2 hours with our guided setup process. Social media agents need 3-5 days for content planning and audience analysis. We provide dedicated onboarding support to ensure smooth implementation.\",\n    category: \"technical\"\n  },\n  {\n    id: \"data-security\",\n    question: \"Is my business data secure and GDPR compliant?\",\n    answer: \"Absolutely. All data is processed in EU data centers, fully encrypted, and we maintain strict GDPR compliance. Your customer data never leaves our secure infrastructure, and you maintain full control over data retention and deletion. We undergo regular security audits and provide detailed compliance documentation.\",\n    category: \"technical\"\n  },\n  {\n    id: \"human-handover\",\n    question: \"What happens when the AI can't handle a request?\",\n    answer: \"Our AI agents are designed to recognize their limitations. When they encounter complex requests, they seamlessly transfer to your human team with full context and conversation history. You can set custom escalation rules and the handover process is completely transparent to your customers.\",\n    category: \"business\"\n  },\n  {\n    id: \"integration\",\n    question: \"Can the agents integrate with my existing business tools?\",\n    answer: \"Yes! Our agents integrate with popular CRM systems (Salesforce, HubSpot), calendar applications (Google Calendar, Outlook), communication tools (Slack, Teams), and e-commerce platforms (Shopify, WooCommerce). We also provide API access for custom integrations with your specific business systems.\",\n    category: \"technical\"\n  },\n  {\n    id: \"scaling\",\n    question: \"How do the agents scale as my business grows?\",\n    answer: \"Our AI agents scale automatically with your business volume. There are no per-interaction fees or volume limits. Whether you have 10 customers or 10,000, the monthly price remains the same. As your needs evolve, you can easily add or remove agents from your subscription.\",\n    category: \"business\"\n  },\n  {\n    id: \"roi-timeline\",\n    question: \"What kind of ROI can I expect and when?\",\n    answer: \"Most customers see positive ROI within 30-60 days. Typical savings include: 60-80% reduction in routine inquiry handling costs, 3x faster response times leading to higher conversion rates, and 200%+ increase in qualified leads. The exact ROI depends on your current volume and industry, but our team provides ROI projections during onboarding.\",\n    category: \"business\"\n  }\n];\n\nconst categories = [\n  { id: \"general\", label: \"General\", count: faqItems.filter(item => item.category === \"general\").length },\n  { id: \"pricing\", label: \"Pricing\", count: faqItems.filter(item => item.category === \"pricing\").length },\n  { id: \"technical\", label: \"Technical\", count: faqItems.filter(item => item.category === \"technical\").length },\n  { id: \"business\", label: \"Business\", count: faqItems.filter(item => item.category === \"business\").length }\n];\n\nexport default function FAQ() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"general\");\n\n  const filteredFAQs = faqItems.filter(item => \n    selectedCategory === \"all\" || item.category === selectedCategory\n  );\n\n  const scrollToContact = () => {\n    document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <section className=\"py-20 px-4\" id=\"faq\">\n      <div className=\"container mx-auto max-w-4xl\">\n        {/* Section header */}\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl lg:text-5xl font-bold gradient-text\" data-testid=\"heading-faq\">\n            Frequently Asked Questions\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-faq-description\">\n            Everything you need to know about our AI agents and modular pricing model.\n          </p>\n        </div>\n\n        {/* Category filters */}\n        <div className=\"flex flex-wrap justify-center gap-3 mb-12\">\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedCategory(category.id)}\n              className=\"text-sm\"\n              data-testid={`button-category-${category.id}`}\n            >\n              {category.label} ({category.count})\n            </Button>\n          ))}\n        </div>\n\n        {/* FAQ Accordion */}\n        <HolographicCard className=\"mb-12\">\n          <CardContent className=\"p-6\">\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {filteredFAQs.map((item) => (\n                <AccordionItem key={item.id} value={item.id} data-testid={`faq-${item.id}`}>\n                  <AccordionTrigger className=\"text-left hover:text-primary\">\n                    <div className=\"flex items-center gap-3\">\n                      <HelpCircle className=\"h-5 w-5 flex-shrink-0 text-primary\" />\n                      <span>{item.question}</span>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"pl-8 pt-2 text-muted-foreground leading-relaxed\">\n                      {item.answer}\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          </CardContent>\n        </HolographicCard>\n\n        {/* Still have questions CTA */}\n        <HolographicCard className=\"text-center\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <MessageCircle className=\"h-6 w-6 text-primary\" />\n              Still Have Questions?\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Our AI experts are here to help you choose the right combination of agents for your business.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\"\n                onClick={scrollToContact}\n                data-testid=\"button-contact-expert\"\n              >\n                Talk to an Expert\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                onClick={() => window.open('mailto:support@aidevelo.ai', '_blank')}\n                data-testid=\"button-email-support\"\n              >\n                Email Support\n              </Button>\n            </div>\n          </CardContent>\n        </HolographicCard>\n      </div>\n    </section>\n  );\n}","size_bytes":8422},"client/src/components/landing/PricingSummary.tsx":{"content":"import { useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowRight, Sparkles } from \"lucide-react\";\nimport { calculatePricing, formatPrice, formatDiscountPercent } from \"@/lib/pricing/calc\";\nimport { startCheckout } from \"@/lib/checkout/stripeStub\";\nimport { HolographicCard, HolographicButton } from \"@/components/HolographicUI\";\n\ninterface PricingSummaryProps {\n  selectedModuleIds: string[];\n}\n\nexport default function PricingSummary({ selectedModuleIds }: PricingSummaryProps) {\n  const pricing = useMemo(() => calculatePricing(selectedModuleIds), [selectedModuleIds]);\n  \n  const handleCheckout = () => {\n    if (selectedModuleIds.length === 0) return;\n    startCheckout(selectedModuleIds, pricing.total);\n  };\n  \n  if (selectedModuleIds.length === 0) {\n    return (\n      <section className=\"py-12 px-4\" id=\"pricing-summary\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <HolographicCard className=\"text-center\">\n            <CardContent className=\"py-12\">\n              <Sparkles className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Ready to get started?</h3>\n              <p className=\"text-muted-foreground\">\n                Select the AI agents you need above to see your custom pricing.\n              </p>\n            </CardContent>\n          </HolographicCard>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-12 px-4\" id=\"pricing-summary\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <HolographicCard data-testid=\"pricing-summary\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"h-5 w-5 text-primary\" />\n              Your Custom AI Solution\n            </CardTitle>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {/* Selected modules */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium text-sm text-muted-foreground uppercase tracking-wide\">\n                Selected Modules\n              </h4>\n              <div className=\"space-y-2\">\n                {pricing.selectedModules.map((module) => (\n                  <div \n                    key={module.id} \n                    className=\"flex items-center justify-between py-2\"\n                    data-testid={`summary-item-${module.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Active\n                      </Badge>\n                      <span className=\"font-medium\">{module.name}</span>\n                    </div>\n                    <span className=\"font-mono text-sm\">\n                      {formatPrice(module.price)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <Separator />\n            \n            {/* Pricing breakdown */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span>Subtotal</span>\n                <span className=\"font-mono\" data-testid=\"subtotal\">\n                  {formatPrice(pricing.subtotal)}\n                </span>\n              </div>\n              \n              {pricing.discountPercent > 0 && (\n                <div className=\"flex items-center justify-between text-green-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>Multi-module discount</span>\n                    <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                      {formatDiscountPercent(pricing.discountPercent)} off\n                    </Badge>\n                  </div>\n                  <span className=\"font-mono\" data-testid=\"discount-amount\">\n                    -{formatPrice(pricing.discountAmount)}\n                  </span>\n                </div>\n              )}\n              \n              <Separator />\n              \n              <div className=\"flex items-center justify-between text-lg font-bold\">\n                <span>Total per month</span>\n                <span className=\"font-mono text-primary\" data-testid=\"total\">\n                  {formatPrice(pricing.total)}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"pt-4\">\n              <HolographicButton \n                className=\"w-full text-lg\"\n                onClick={handleCheckout}\n                data-testid=\"button-checkout\"\n              >\n                <span className=\"flex items-center justify-center gap-2\">\n                  Continue to Checkout\n                  <ArrowRight className=\"h-5 w-5\" />\n                </span>\n              </HolographicButton>\n              \n              <div className=\"text-center mt-4 space-y-1\">\n                <p className=\"text-sm text-muted-foreground\">\n                  14-day free trial • Cancel anytime\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  All prices exclude VAT\n                </p>\n              </div>\n            </div>\n            \n            {/* Trust indicators */}\n            <div className=\"flex items-center justify-center gap-6 pt-4 border-t border-border\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                ✅ 14-day guarantee\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                ✅ No setup fees\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                ✅ GDPR compliant\n              </div>\n            </div>\n          </CardContent>\n        </HolographicCard>\n      </div>\n    </section>\n  );\n}","size_bytes":6102},"client/src/components/landing/ProductCards.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Check, Phone, MessageCircle, Share2 } from \"lucide-react\";\nimport { MODULES } from \"@/lib/pricing/config\";\nimport { formatPrice } from \"@/lib/pricing/calc\";\nimport { HolographicCard } from \"@/components/HolographicUI\";\n\ninterface ProductCardsProps {\n  selectedModuleIds: string[];\n  onModuleToggle: (moduleId: string, enabled: boolean) => void;\n}\n\nconst moduleIcons = {\n  phone: Phone,\n  chat: MessageCircle,\n  social: Share2,\n} as const;\n\nexport default function ProductCards({ selectedModuleIds, onModuleToggle }: ProductCardsProps) {\n  return (\n    <section className=\"py-20 px-4\" id=\"products\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl lg:text-5xl font-bold gradient-text\" data-testid=\"heading-products\">\n            Pick Exactly What You Need\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-products-description\">\n            Activate our AI agents individually or combine them. No unnecessary bundles, just the tools that drive results.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {MODULES.map((module) => {\n            const isSelected = selectedModuleIds.includes(module.id);\n            const IconComponent = moduleIcons[module.id as keyof typeof moduleIcons];\n            \n            return (\n              <HolographicCard \n                key={module.id} \n                className={`relative overflow-hidden transition-all duration-300 ${\n                  isSelected \n                    ? 'ring-2 ring-primary shadow-lg shadow-primary/20' \n                    : 'hover:shadow-lg'\n                }`}\n                data-testid={`card-product-${module.id}`}\n              >\n                <CardHeader className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 rounded-lg bg-primary/10\">\n                        <IconComponent className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{module.name}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {formatPrice(module.price)}/month\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        checked={isSelected}\n                        onCheckedChange={(checked) => onModuleToggle(module.id, checked)}\n                        aria-label={`Toggle ${module.name}`}\n                        data-testid={`switch-${module.id}`}\n                      />\n                      {isSelected && (\n                        <Badge variant=\"default\" className=\"text-xs\">\n                          Active\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-sm text-muted-foreground\">\n                    {module.description}\n                  </p>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium text-sm\">Key Benefits:</h4>\n                    <ul className=\"space-y-2\">\n                      {module.highlights.map((highlight, index) => (\n                        <li key={index} className=\"flex items-center gap-2 text-sm\">\n                          <Check className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                          <span>{highlight}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  <div className=\"pt-4 border-t border-border\">\n                    <Button \n                      variant={isSelected ? \"default\" : \"outline\"}\n                      className=\"w-full\"\n                      onClick={() => onModuleToggle(module.id, !isSelected)}\n                      data-testid={`button-activate-${module.id}`}\n                    >\n                      {isSelected ? \"✓ Activated\" : \"Activate\"}\n                    </Button>\n                  </div>\n                </CardContent>\n                \n                {/* Selection indicator */}\n                {isSelected && (\n                  <div className=\"absolute top-4 right-4 w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                    <Check className=\"h-4 w-4 text-primary-foreground\" />\n                  </div>\n                )}\n              </HolographicCard>\n            );\n          })}\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <p className=\"text-sm text-muted-foreground\">\n            All prices exclude VAT • 14-day free trial • Cancel anytime\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5387},"client/src/components/landing/References.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Quote, Building2, Users, TrendingUp } from \"lucide-react\";\nimport { HolographicCard } from \"@/components/HolographicUI\";\n\ninterface Reference {\n  id: string;\n  company: string;\n  industry: string;\n  testimonial: string;\n  author: string;\n  role: string;\n  results: string;\n  rating: number;\n}\n\nconst references: Reference[] = [\n  {\n    id: \"manufacturing-co\",\n    company: \"TechManu GmbH\",\n    industry: \"Manufacturing\",\n    testimonial: \"Our phone agent handles 85% of customer inquiries automatically. We've reduced response time from hours to seconds while our team focuses on complex technical support.\",\n    author: \"Michael Schmidt\",\n    role: \"Operations Director\",\n    results: \"85% automation rate\",\n    rating: 5\n  },\n  {\n    id: \"consulting-firm\",\n    company: \"Strategic Partners Ltd\",\n    industry: \"Consulting\",\n    testimonial: \"The chat agent has transformed our lead qualification process. We capture 3x more qualified leads and book appointments directly through our website, even outside business hours.\",\n    author: \"Sarah Chen\",\n    role: \"Managing Partner\",\n    results: \"3x more qualified leads\",\n    rating: 5\n  },\n  {\n    id: \"retail-business\",\n    company: \"Fashion Forward\",\n    industry: \"E-commerce\",\n    testimonial: \"Our social media agent maintains consistent engagement across all platforms. Our reach has grown 200% while we focus on product development and customer service.\",\n    author: \"Lisa Weber\",\n    role: \"Marketing Director\", \n    results: \"200% reach increase\",\n    rating: 5\n  },\n  {\n    id: \"professional-services\",\n    company: \"Legal Associates\",\n    industry: \"Professional Services\",\n    testimonial: \"The modular approach was perfect for us. We started with the chat agent, saw great results, then added the phone agent. Total cost of ownership is 60% less than hiring additional staff.\",\n    author: \"Dr. Thomas Mueller\",\n    role: \"Senior Partner\",\n    results: \"60% cost reduction\",\n    rating: 5\n  }\n];\n\nconst stats = [\n  { label: \"SME Customers\", value: \"500+\", icon: Building2 },\n  { label: \"Automation Rate\", value: \"82%\", icon: TrendingUp },\n  { label: \"Customer Satisfaction\", value: \"4.9/5\", icon: Star },\n  { label: \"Support Requests Handled\", value: \"1M+\", icon: Users }\n];\n\nexport default function References() {\n  return (\n    <section className=\"py-20 px-4 bg-muted/30\" id=\"references\">\n      <div className=\"container mx-auto max-w-6xl\">\n        {/* Section header */}\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl lg:text-5xl font-bold gradient-text\" data-testid=\"heading-references\">\n            Trusted by SMEs Across Europe\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-references-description\">\n            See how businesses like yours are automating operations and growing revenue with our AI agents.\n          </p>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          {stats.map((stat) => {\n            const IconComponent = stat.icon;\n            return (\n              <HolographicCard key={stat.label} className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <IconComponent className=\"h-8 w-8 text-primary mx-auto mb-3\" />\n                  <div className=\"text-2xl font-bold gradient-text\">{stat.value}</div>\n                  <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                </CardContent>\n              </HolographicCard>\n            );\n          })}\n        </div>\n\n        {/* Customer testimonials */}\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {references.map((reference) => (\n            <HolographicCard key={reference.id} data-testid={`reference-${reference.id}`}>\n              <CardHeader className=\"space-y-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">{reference.company}</h3>\n                    <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                      {reference.industry}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: reference.rating }).map((_, i) => (\n                      <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                    ))}\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"space-y-4\">\n                <div className=\"relative\">\n                  <Quote className=\"h-6 w-6 text-primary opacity-50 absolute -top-2 -left-2\" />\n                  <p className=\"text-muted-foreground leading-relaxed pl-4\">\n                    {reference.testimonial}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n                  <div>\n                    <div className=\"font-medium\">{reference.author}</div>\n                    <div className=\"text-sm text-muted-foreground\">{reference.role}</div>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                    {reference.results}\n                  </Badge>\n                </div>\n              </CardContent>\n            </HolographicCard>\n          ))}\n        </div>\n\n        {/* Trust indicators */}\n        <div className=\"text-center mt-16\">\n          <div className=\"flex flex-wrap justify-center gap-8 items-center opacity-60\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm\">GDPR Compliant</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <span className=\"text-sm\">EU Data Centers</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n              <span className=\"text-sm\">24/7 Support</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n              <span className=\"text-sm\">99.9% Uptime</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6652},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/checkout/stripeStub.ts":{"content":"/**\n * Stripe checkout stub - placeholder for future integration\n * TODO: Replace with actual Stripe integration\n */\n\nexport interface CheckoutData {\n  selectedModuleIds: string[];\n  total: number;\n  customerEmail?: string;\n}\n\n/**\n * Stub function for starting checkout process\n * @param selectedIds Array of selected module IDs\n * @param total Total amount to charge\n */\nexport function startCheckout(selectedIds: string[], total: number): void {\n  const checkoutData: CheckoutData = {\n    selectedModuleIds: selectedIds,\n    total,\n  };\n  \n  console.log('🚀 Starting checkout with data:', checkoutData);\n  \n  // Redirect to Stripe checkout page with selected modules and total\n  window.location.href = `/checkout?modules=${selectedIds.join(',')}&total=${total}`;\n}","size_bytes":768},"client/src/lib/pricing/calc.ts":{"content":"import { PRICING_CONFIG, getModuleById } from './config';\nimport { type PricingCalculation, type Module } from './types';\n\n/**\n * Calculate pricing with discounts based on selected module IDs\n * @param selectedModuleIds Array of selected module IDs\n * @returns PricingCalculation with subtotal, discount, and total\n */\nexport function calculatePricing(selectedModuleIds: string[]): PricingCalculation {\n  // Deduplicate IDs first, then get selected modules\n  const uniqueIds = [...new Set(selectedModuleIds)];\n  const selectedModules: Module[] = uniqueIds\n    .map(id => getModuleById(id))\n    .filter((module): module is Module => module !== undefined);\n  \n  // Calculate subtotal\n  const subtotal = selectedModules.reduce((sum, module) => sum + module.price, 0);\n  \n  // Determine discount based on number of selected modules\n  const moduleCount = selectedModules.length;\n  const discountTier = PRICING_CONFIG.discountTiers\n    .slice()\n    .reverse() // Check highest discounts first\n    .find(tier => moduleCount >= tier.moduleCount);\n  \n  const discountPercent = discountTier ? discountTier.discountPercent : 0;\n  const discountAmount = (subtotal * discountPercent) / 100;\n  const total = subtotal - discountAmount;\n  \n  return {\n    subtotal,\n    discountPercent,\n    discountAmount,\n    total,\n    selectedModules\n  };\n}\n\n/**\n * Format price for display (EUR with 2 decimal places)\n */\nexport function formatPrice(amount: number): string {\n  return `€${amount.toFixed(2)}`;\n}\n\n/**\n * Format discount percentage for display\n */\nexport function formatDiscountPercent(percent: number): string {\n  return `${percent}%`;\n}","size_bytes":1626},"client/src/lib/pricing/config.ts":{"content":"import { type Module, type PricingConfig } from './types';\n\nexport const MODULES: readonly Module[] = [\n  {\n    id: \"phone\",\n    name: \"AI Phone Agent\",\n    price: 79,\n    highlights: [\n      \"Answers calls 24/7\",\n      \"Books appointments\",\n      \"Creates call notes\"\n    ],\n    description: \"Intelligent phone assistant that handles calls, understands customer intents, and automatically schedules appointments to your calendar.\"\n  },\n  {\n    id: \"chat\", \n    name: \"AI Website Chat Agent\",\n    price: 49,\n    highlights: [\n      \"Answers FAQs instantly\",\n      \"Captures leads\", \n      \"Schedules appointments\"\n    ],\n    description: \"24/7 website assistant that answers customer questions, captures leads, and converts visitors into appointments.\"\n  },\n  {\n    id: \"social\",\n    name: \"AI Social Media Agent\", \n    price: 59,\n    highlights: [\n      \"Plans & publishes content\",\n      \"Replies to comments/messages\",\n      \"Grows your reach\"\n    ],\n    description: \"Automated social media management that creates content, engages with your audience, and grows your online presence.\"\n  }\n] as const;\n\nexport const PRICING_CONFIG: PricingConfig = {\n  modules: MODULES,\n  discountTiers: [\n    { moduleCount: 2, discountPercent: 10 },\n    { moduleCount: 3, discountPercent: 15 }\n  ]\n} as const;\n\n// Helper function to get module by ID\nexport const getModuleById = (id: string): Module | undefined => {\n  return MODULES.find(module => module.id === id);\n};\n\n// Helper function to get all module IDs\nexport const getAllModuleIds = (): string[] => {\n  return MODULES.map(module => module.id);\n};","size_bytes":1594},"client/src/lib/pricing/types.ts":{"content":"export interface Module {\n  readonly id: string;\n  readonly name: string;\n  readonly price: number;\n  readonly highlights: readonly string[];\n  readonly icon?: string;\n  readonly description?: string;\n}\n\nexport interface PricingCalculation {\n  subtotal: number;\n  discountPercent: number;\n  discountAmount: number;\n  total: number;\n  selectedModules: Module[];\n}\n\nexport type ModuleId = \"phone\" | \"chat\" | \"social\";\n\nexport interface PricingConfig {\n  modules: readonly Module[];\n  discountTiers: readonly {\n    moduleCount: number;\n    discountPercent: number;\n  }[];\n}\n\nexport interface ProductActivation {\n  moduleId: string;\n  status: 'inactive' | 'provisioning' | 'active';\n  activatedAt?: string;\n  onboardingCompleted?: boolean;\n}\n\nexport type ActiveProducts = Record<string, ProductActivation>;","size_bytes":802},"client/src/lib/pricing/__tests__/calc.test.ts":{"content":"import { describe, it, expect } from 'vitest';\nimport { calculatePricing, formatPrice, formatDiscountPercent } from '../calc';\n\ndescribe('calculatePricing', () => {\n  it('calculates pricing for no modules selected', () => {\n    const result = calculatePricing([]);\n    \n    expect(result).toEqual({\n      subtotal: 0,\n      discountPercent: 0,\n      discountAmount: 0,\n      total: 0,\n      selectedModules: []\n    });\n  });\n\n  it('calculates pricing for single phone module', () => {\n    const result = calculatePricing(['phone']);\n    \n    expect(result.subtotal).toBe(79);\n    expect(result.discountPercent).toBe(0);\n    expect(result.discountAmount).toBe(0);\n    expect(result.total).toBe(79);\n    expect(result.selectedModules).toHaveLength(1);\n    expect(result.selectedModules[0].id).toBe('phone');\n  });\n\n  it('calculates pricing for single chat module', () => {\n    const result = calculatePricing(['chat']);\n    \n    expect(result.subtotal).toBe(49);\n    expect(result.discountPercent).toBe(0);\n    expect(result.discountAmount).toBe(0);\n    expect(result.total).toBe(49);\n    expect(result.selectedModules).toHaveLength(1);\n    expect(result.selectedModules[0].id).toBe('chat');\n  });\n\n  it('calculates pricing for single social module', () => {\n    const result = calculatePricing(['social']);\n    \n    expect(result.subtotal).toBe(59);\n    expect(result.discountPercent).toBe(0);\n    expect(result.discountAmount).toBe(0);\n    expect(result.total).toBe(59);\n    expect(result.selectedModules).toHaveLength(1);\n    expect(result.selectedModules[0].id).toBe('social');\n  });\n\n  it('calculates pricing for two modules with 10% discount', () => {\n    const result = calculatePricing(['phone', 'chat']);\n    \n    expect(result.subtotal).toBe(128); // 79 + 49\n    expect(result.discountPercent).toBe(10);\n    expect(result.discountAmount).toBe(12.8); // 10% of 128\n    expect(result.total).toBe(115.2); // 128 - 12.8\n    expect(result.selectedModules).toHaveLength(2);\n  });\n\n  it('calculates pricing for three modules with 15% discount', () => {\n    const result = calculatePricing(['phone', 'chat', 'social']);\n    \n    expect(result.subtotal).toBe(187); // 79 + 49 + 59\n    expect(result.discountPercent).toBe(15);\n    expect(result.discountAmount).toBe(28.05); // 15% of 187\n    expect(result.total).toBe(158.95); // 187 - 28.05\n    expect(result.selectedModules).toHaveLength(3);\n  });\n\n  it('ignores unknown module IDs', () => {\n    const result = calculatePricing(['phone', 'unknown-module', 'chat']);\n    \n    expect(result.subtotal).toBe(128); // 79 + 49 (unknown ignored)\n    expect(result.discountPercent).toBe(10);\n    expect(result.discountAmount).toBe(12.8);\n    expect(result.total).toBe(115.2);\n    expect(result.selectedModules).toHaveLength(2);\n    expect(result.selectedModules.some(m => m.id === 'unknown-module')).toBe(false);\n  });\n\n  it('handles duplicate module IDs correctly', () => {\n    const result = calculatePricing(['phone', 'phone', 'chat']);\n    \n    // Should treat duplicates as single selection\n    expect(result.subtotal).toBe(128); // 79 + 49 (phone counted once)\n    expect(result.discountPercent).toBe(10);\n    expect(result.total).toBe(115.2);\n    expect(result.selectedModules).toHaveLength(2);\n  });\n\n  it('calculates correct discount for mixed valid/invalid modules', () => {\n    const result = calculatePricing(['invalid', 'phone', 'also-invalid', 'chat', 'social']);\n    \n    expect(result.subtotal).toBe(187); // All 3 valid modules\n    expect(result.discountPercent).toBe(15); // 3 modules = 15% discount\n    expect(result.total).toBe(158.95);\n    expect(result.selectedModules).toHaveLength(3);\n  });\n});\n\ndescribe('formatPrice', () => {\n  it('formats whole numbers correctly', () => {\n    expect(formatPrice(100)).toBe('€100.00');\n    expect(formatPrice(0)).toBe('€0.00');\n  });\n\n  it('formats decimal numbers correctly', () => {\n    expect(formatPrice(99.99)).toBe('€99.99');\n    expect(formatPrice(115.2)).toBe('€115.20');\n    expect(formatPrice(158.95)).toBe('€158.95');\n  });\n\n  it('handles edge cases', () => {\n    expect(formatPrice(0.01)).toBe('€0.01');\n    expect(formatPrice(9999.99)).toBe('€9999.99');\n  });\n});\n\ndescribe('formatDiscountPercent', () => {\n  it('formats discount percentages correctly', () => {\n    expect(formatDiscountPercent(0)).toBe('0%');\n    expect(formatDiscountPercent(10)).toBe('10%');\n    expect(formatDiscountPercent(15)).toBe('15%');\n    expect(formatDiscountPercent(100)).toBe('100%');\n  });\n\n  it('handles decimal percentages', () => {\n    expect(formatDiscountPercent(12.5)).toBe('12.5%');\n    expect(formatDiscountPercent(0.1)).toBe('0.1%');\n  });\n});\n\ndescribe('pricing edge cases', () => {\n  it('applies highest discount tier when multiple apply', () => {\n    // With 3 modules, should get 15% not 10%\n    const result = calculatePricing(['phone', 'chat', 'social']);\n    expect(result.discountPercent).toBe(15);\n  });\n\n  it('handles empty array gracefully', () => {\n    const result = calculatePricing([]);\n    expect(result.selectedModules).toEqual([]);\n    expect(result.total).toBe(0);\n  });\n\n  it('handles array with only invalid modules', () => {\n    const result = calculatePricing(['invalid1', 'invalid2']);\n    expect(result.selectedModules).toEqual([]);\n    expect(result.total).toBe(0);\n    expect(result.discountPercent).toBe(0);\n  });\n});","size_bytes":5365},"client/src/components/ChatWidget.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageCircle, X, Send, Minimize2, Maximize2, User, Mail, Phone } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ChatMessage {\n  id: string;\n  sender: 'user' | 'agent';\n  message: string;\n  timestamp: string;\n}\n\ninterface ChatSession {\n  id: string;\n  agentConfigId: string;\n  startedAt: string;\n}\n\ninterface ChatWidgetProps {\n  agentConfigId: string;\n  position?: 'bottom-right' | 'bottom-left' | 'embedded';\n  theme?: 'light' | 'dark' | 'auto';\n  welcomeMessage?: string;\n  brandColor?: string;\n  companyName?: string;\n}\n\nexport default function ChatWidget({\n  agentConfigId,\n  position = 'bottom-right',\n  theme = 'auto',\n  welcomeMessage = \"Hello! How can I help you today?\",\n  brandColor = '#00cfff',\n  companyName = 'AIDevelo.AI'\n}: ChatWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [session, setSession] = useState<ChatSession | null>(null);\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [showLeadForm, setShowLeadForm] = useState(false);\n  const [leadFormData, setLeadFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    message: ''\n  });\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const positionClasses = {\n    'bottom-right': 'fixed bottom-4 right-4 z-50',\n    'bottom-left': 'fixed bottom-4 left-4 z-50',\n    'embedded': 'relative w-full h-full'\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isOpen && !session) {\n      initializeChat();\n    }\n  }, [isOpen]);\n\n  const initializeChat = async () => {\n    try {\n      const response = await apiRequest(\n        'POST',\n        '/api/chat/sessions',\n        {\n          agentConfigId,\n          visitorId: `visitor-${Date.now()}`,\n          visitorEmail: null,\n          visitorName: null\n        }\n      );\n      const responseData = await response.json();\n\n      if (responseData.data) {\n        setSession(responseData.data);\n        \n        // Add welcome message\n        const welcomeMsg: ChatMessage = {\n          id: `welcome-${Date.now()}`,\n          sender: 'agent',\n          message: welcomeMessage,\n          timestamp: new Date().toISOString()\n        };\n        setMessages([welcomeMsg]);\n      }\n    } catch (error) {\n      console.error('Error initializing chat:', error);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim() || !session || isLoading) return;\n\n    const userMessage: ChatMessage = {\n      id: `user-${Date.now()}`,\n      sender: 'user',\n      message: inputMessage,\n      timestamp: new Date().toISOString()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\n        'POST',\n        '/api/chat/messages',\n        {\n          sessionId: session.id,\n          message: inputMessage,\n          sender: 'user'\n        }\n      );\n      const responseData = await response.json();\n\n      if (responseData.data?.message) {\n        const agentMessage: ChatMessage = {\n          id: `agent-${Date.now()}`,\n          sender: 'agent',\n          message: responseData.data.message,\n          timestamp: new Date().toISOString()\n        };\n\n        setMessages(prev => [...prev, agentMessage]);\n        \n        // Handle AI actions\n        if (responseData.data.isActionRequired) {\n          switch (responseData.data.actionType) {\n            case 'capture_lead':\n              setShowLeadForm(true);\n              break;\n            case 'book_appointment':\n              const appointmentMessage: ChatMessage = {\n                id: `appointment-${Date.now()}`,\n                sender: 'agent',\n                message: \"Great! I'd be happy to help you book an appointment. Please call us at +49 123 456 7890 or email hello@aidevelo.ai to schedule.\",\n                timestamp: new Date().toISOString()\n              };\n              setTimeout(() => setMessages(prev => [...prev, appointmentMessage]), 1000);\n              break;\n            case 'escalate_human':\n              const escalateMessage: ChatMessage = {\n                id: `escalate-${Date.now()}`,\n                sender: 'agent',\n                message: \"I'll connect you with a human agent. Please hold while I transfer you, or you can contact us directly at hello@aidevelo.ai.\",\n                timestamp: new Date().toISOString()\n              };\n              setTimeout(() => setMessages(prev => [...prev, escalateMessage]), 1000);\n              break;\n          }\n        }\n        \n        // If chat is minimized, increment unread count\n        if (isMinimized) {\n          setUnreadCount(prev => prev + 1);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage: ChatMessage = {\n        id: `error-${Date.now()}`,\n        sender: 'agent',\n        message: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const toggleMinimize = () => {\n    setIsMinimized(!isMinimized);\n    if (!isMinimized) {\n      setUnreadCount(0); // Reset unread count when expanding\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const submitLeadForm = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/leads', leadFormData);\n      const data = await response.json();\n      \n      if (data.success) {\n        setShowLeadForm(false);\n        setLeadFormData({ name: '', email: '', phone: '', company: '', message: '' });\n        \n        const confirmMessage: ChatMessage = {\n          id: `lead-confirm-${Date.now()}`,\n          sender: 'agent',\n          message: \"Thank you! I've captured your information. Someone from our team will contact you within 24 hours.\",\n          timestamp: new Date().toISOString()\n        };\n        setMessages(prev => [...prev, confirmMessage]);\n      }\n    } catch (error) {\n      console.error('Error submitting lead form:', error);\n      const errorMessage: ChatMessage = {\n        id: `lead-error-${Date.now()}`,\n        sender: 'agent',\n        message: \"Sorry, there was an error capturing your information. Please try again or contact us directly.\",\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  };\n\n  const LeadCaptureForm = () => (\n    <div className=\"border-t p-4 bg-muted/20\">\n      <h4 className=\"font-medium mb-3 text-sm\">Let's get your contact information:</h4>\n      <div className=\"space-y-2\">\n        <Input\n          placeholder=\"Your name\"\n          value={leadFormData.name}\n          onChange={(e) => setLeadFormData(prev => ({ ...prev, name: e.target.value }))}\n          className=\"text-sm\"\n          data-testid=\"input-lead-name\"\n        />\n        <Input\n          type=\"email\"\n          placeholder=\"Email address\"\n          value={leadFormData.email}\n          onChange={(e) => setLeadFormData(prev => ({ ...prev, email: e.target.value }))}\n          className=\"text-sm\"\n          data-testid=\"input-lead-email\"\n        />\n        <Input\n          placeholder=\"Phone (optional)\"\n          value={leadFormData.phone}\n          onChange={(e) => setLeadFormData(prev => ({ ...prev, phone: e.target.value }))}\n          className=\"text-sm\"\n          data-testid=\"input-lead-phone\"\n        />\n        <Input\n          placeholder=\"Company\"\n          value={leadFormData.company}\n          onChange={(e) => setLeadFormData(prev => ({ ...prev, company: e.target.value }))}\n          className=\"text-sm\"\n          data-testid=\"input-lead-company\"\n        />\n        <div className=\"flex gap-2 pt-2\">\n          <Button\n            onClick={submitLeadForm}\n            disabled={!leadFormData.name || !leadFormData.email || !leadFormData.company}\n            size=\"sm\"\n            className=\"flex-1\"\n            style={{ backgroundColor: brandColor }}\n            data-testid=\"button-submit-lead\"\n          >\n            Submit\n          </Button>\n          <Button\n            onClick={() => setShowLeadForm(false)}\n            variant=\"outline\"\n            size=\"sm\"\n            data-testid=\"button-cancel-lead\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (position === 'embedded') {\n    return (\n      <Card className=\"w-full h-full flex flex-col\" data-testid=\"chat-widget-embedded\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <MessageCircle className=\"h-5 w-5\" style={{ color: brandColor }} />\n            Chat with {companyName}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex-1 flex flex-col p-0\">\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4 max-h-96\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n                data-testid={`message-${message.sender}`}\n              >\n                <div\n                  className={`max-w-xs lg:max-w-md px-3 py-2 rounded-lg ${\n                    message.sender === 'user'\n                      ? 'bg-primary text-primary-foreground'\n                      : 'bg-muted text-muted-foreground'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.message}</p>\n                  <p className=\"text-xs mt-1 opacity-70\">\n                    {formatTime(message.timestamp)}\n                  </p>\n                </div>\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"flex justify-start\" data-testid=\"loading-indicator\">\n                <div className=\"bg-muted text-muted-foreground max-w-xs px-3 py-2 rounded-lg\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          {showLeadForm && <LeadCaptureForm />}\n          \n          <div className=\"border-t p-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Type your message...\"\n                disabled={isLoading}\n                className=\"flex-1\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                onClick={sendMessage}\n                disabled={isLoading || !inputMessage.trim()}\n                size=\"icon\"\n                style={{ backgroundColor: brandColor }}\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={positionClasses[position]} data-testid=\"chat-widget-floating\">\n      {!isOpen ? (\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"rounded-full w-14 h-14 shadow-lg hover:shadow-xl transition-shadow\"\n          style={{ backgroundColor: brandColor }}\n          data-testid=\"button-open-chat\"\n        >\n          <MessageCircle className=\"h-6 w-6 text-white\" />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-2 -right-2 rounded-full w-6 h-6 flex items-center justify-center text-xs\"\n              data-testid=\"badge-unread-count\"\n            >\n              {unreadCount}\n            </Badge>\n          )}\n        </Button>\n      ) : (\n        <Card className=\"w-80 h-96 flex flex-col shadow-lg\" data-testid=\"chat-widget-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <MessageCircle className=\"h-4 w-4\" style={{ color: brandColor }} />\n              {companyName}\n            </CardTitle>\n            <div className=\"flex gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleMinimize}\n                className=\"h-8 w-8\"\n                data-testid=\"button-minimize-chat\"\n              >\n                {isMinimized ? <Maximize2 className=\"h-4 w-4\" /> : <Minimize2 className=\"h-4 w-4\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsOpen(false)}\n                className=\"h-8 w-8\"\n                data-testid=\"button-close-chat\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          \n          {!isMinimized && (\n            <CardContent className=\"flex-1 flex flex-col p-0\">\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n                    data-testid={`message-${message.sender}`}\n                  >\n                    <div\n                      className={`max-w-xs px-3 py-2 rounded-lg ${\n                        message.sender === 'user'\n                          ? 'text-white'\n                          : 'bg-muted text-muted-foreground'\n                      }`}\n                      style={message.sender === 'user' ? { backgroundColor: brandColor } : {}}\n                    >\n                      <p className=\"text-sm\">{message.message}</p>\n                      <p className=\"text-xs mt-1 opacity-70\">\n                        {formatTime(message.timestamp)}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start\" data-testid=\"loading-indicator\">\n                    <div className=\"bg-muted text-muted-foreground max-w-xs px-3 py-2 rounded-lg\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n              \n              {showLeadForm && <LeadCaptureForm />}\n              \n              <div className=\"border-t p-4\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Type your message...\"\n                    disabled={isLoading}\n                    className=\"flex-1\"\n                    data-testid=\"input-chat-message\"\n                  />\n                  <Button\n                    onClick={sendMessage}\n                    disabled={isLoading || !inputMessage.trim()}\n                    size=\"icon\"\n                    style={{ backgroundColor: brandColor }}\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17205},"client/src/components/products/CodeSnippet.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Copy, Check } from \"lucide-react\";\n\ninterface CodeSnippetProps {\n  code: string;\n  title?: string;\n  language?: string;\n  className?: string;\n}\n\nexport function CodeSnippet({ code, title, language = \"html\", className }: CodeSnippetProps) {\n  const [copied, setCopied] = useState(false);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  return (\n    <Card className={className}>\n      {title && (\n        <div className=\"px-4 py-2 border-b\">\n          <h4 className=\"text-sm font-medium\">{title}</h4>\n        </div>\n      )}\n      <CardContent className=\"p-4\">\n        <div className=\"relative\">\n          <pre className=\"bg-muted p-4 rounded-md overflow-x-auto text-sm font-mono\">\n            <code className={`language-${language}`}>{code}</code>\n          </pre>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={copyToClipboard}\n            className=\"absolute top-2 right-2\"\n            data-testid=\"button-copy-code\"\n          >\n            {copied ? (\n              <>\n                <Check className=\"h-4 w-4 mr-1\" />\n                Copied!\n              </>\n            ) : (\n              <>\n                <Copy className=\"h-4 w-4 mr-1\" />\n                Copy\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1678},"client/src/components/products/OnboardingStep.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, ArrowRight, Loader2 } from \"lucide-react\";\n\ninterface OnboardingStepProps {\n  title: string;\n  description: string;\n  completed?: boolean;\n  loading?: boolean;\n  children?: React.ReactNode;\n  onPrimary?: () => void;\n  onSecondary?: () => void;\n  primaryText?: string;\n  secondaryText?: string;\n  primaryDisabled?: boolean;\n  className?: string;\n}\n\nexport function OnboardingStep({\n  title,\n  description,\n  completed = false,\n  loading = false,\n  children,\n  onPrimary,\n  onSecondary,\n  primaryText = \"Continue\",\n  secondaryText = \"Skip for now\",\n  primaryDisabled = false,\n  className\n}: OnboardingStepProps) {\n  return (\n    <Card className={`${className || ''} ${completed ? 'border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20' : ''}`}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-3\">\n          {completed ? (\n            <div className=\"flex-shrink-0 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center\">\n              <Check className=\"h-4 w-4 text-white\" />\n            </div>\n          ) : (\n            <div className=\"flex-shrink-0 w-6 h-6 bg-muted rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-muted-foreground\">\n                {loading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : '●'}\n              </span>\n            </div>\n          )}\n          <span className={completed ? 'text-green-800 dark:text-green-200' : ''}>\n            {title}\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <p className={`text-muted-foreground ${completed ? 'text-green-700 dark:text-green-300' : ''}`}>\n          {description}\n        </p>\n        \n        {children}\n        \n        {!completed && (\n          <div className=\"flex gap-3 pt-4\">\n            {onPrimary && (\n              <Button \n                onClick={onPrimary}\n                disabled={primaryDisabled || loading}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-onboarding-primary\"\n              >\n                {loading ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <ArrowRight className=\"h-4 w-4\" />\n                )}\n                {primaryText}\n              </Button>\n            )}\n            {onSecondary && (\n              <Button \n                variant=\"outline\"\n                onClick={onSecondary}\n                disabled={loading}\n                data-testid=\"button-onboarding-secondary\"\n              >\n                {secondaryText}\n              </Button>\n            )}\n          </div>\n        )}\n        \n        {completed && (\n          <div className=\"flex items-center gap-2 text-green-700 dark:text-green-300 pt-4\">\n            <Check className=\"h-4 w-4\" />\n            <span className=\"text-sm font-medium\">Completed</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3131},"client/src/components/products/ProductCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusBadge } from \"./StatusBadge\";\nimport { formatPrice } from \"@/lib/pricing/calc\";\nimport { type Module, type ProductActivation } from \"@/lib/pricing/types\";\nimport { MessageCircle, Phone, Share2, ArrowRight, Settings, Eye } from \"lucide-react\";\n\ninterface ProductCardProps {\n  module: Module;\n  activation?: ProductActivation;\n  onActivate?: () => void;\n  onConfigure?: () => void;\n  onView?: () => void;\n  className?: string;\n}\n\nconst moduleIcons = {\n  phone: Phone,\n  chat: MessageCircle,\n  social: Share2\n};\n\nexport function ProductCard({ \n  module, \n  activation, \n  onActivate, \n  onConfigure, \n  onView, \n  className \n}: ProductCardProps) {\n  const Icon = moduleIcons[module.id as keyof typeof moduleIcons] || MessageCircle;\n  const isActive = activation?.status === 'active';\n  const isProvisioning = activation?.status === 'provisioning';\n\n  return (\n    <Card className={`relative transition-all hover:shadow-lg ${className || ''}`} data-testid={`product-card-${module.id}`}>\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <Icon className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">{module.name}</CardTitle>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Badge variant=\"outline\" className=\"text-sm font-semibold\">\n                  {formatPrice(module.price)}/month\n                </Badge>\n                {activation && (\n                  <StatusBadge status={activation.status} />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <p className=\"text-muted-foreground text-sm leading-relaxed\">\n          {module.description}\n        </p>\n\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium\">Key Features:</h4>\n          <ul className=\"space-y-1\">\n            {module.highlights.map((feature, index) => (\n              <li key={index} className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                <div className=\"w-1.5 h-1.5 bg-primary rounded-full flex-shrink-0\" />\n                {feature}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex gap-2\">\n        {!isActive && !isProvisioning && onActivate && (\n          <Button \n            onClick={onActivate}\n            className=\"flex-1 flex items-center gap-2\"\n            data-testid={`button-activate-${module.id}`}\n          >\n            <ArrowRight className=\"h-4 w-4\" />\n            Activate\n          </Button>\n        )}\n        \n        {isProvisioning && (\n          <Button \n            disabled\n            variant=\"outline\"\n            className=\"flex-1\"\n            data-testid={`button-provisioning-${module.id}`}\n          >\n            Setting up...\n          </Button>\n        )}\n        \n        {isActive && (\n          <>\n            {onConfigure && (\n              <Button \n                variant=\"outline\"\n                onClick={onConfigure}\n                className=\"flex items-center gap-2\"\n                data-testid={`button-configure-${module.id}`}\n              >\n                <Settings className=\"h-4 w-4\" />\n                Configure\n              </Button>\n            )}\n            {onView && (\n              <Button \n                onClick={onView}\n                className=\"flex-1 flex items-center gap-2\"\n                data-testid={`button-view-${module.id}`}\n              >\n                <Eye className=\"h-4 w-4\" />\n                View Dashboard\n              </Button>\n            )}\n          </>\n        )}\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":4057},"client/src/components/products/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { type ProductActivation } from \"@/lib/pricing/types\";\n\ninterface StatusBadgeProps {\n  status: ProductActivation['status'];\n  className?: string;\n}\n\nexport function StatusBadge({ status, className }: StatusBadgeProps) {\n  const statusConfig = {\n    inactive: {\n      variant: \"secondary\" as const,\n      text: \"Inactive\",\n      className: \"bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400\"\n    },\n    provisioning: {\n      variant: \"default\" as const,\n      text: \"Provisioning\",\n      className: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\"\n    },\n    active: {\n      variant: \"default\" as const,\n      text: \"Live\",\n      className: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\"\n    }\n  };\n\n  const config = statusConfig[status];\n\n  return (\n    <Badge \n      variant={config.variant}\n      className={`${config.className} ${className || ''}`}\n      data-testid={`status-badge-${status}`}\n    >\n      {config.text}\n    </Badge>\n  );\n}","size_bytes":1058},"client/src/pages/CheckoutPage.tsx":{"content":"// Checkout page implementation based on javascript_stripe integration\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, CreditCard, Shield, CheckCircle } from \"lucide-react\";\nimport { type Module } from \"@/lib/pricing/types\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = ({ modules, total }: { modules: Module[], total: number }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/payment-success?modules=${modules.map(m => m.id).join(',')}&total=${total.toFixed(2)}`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful\", \n        description: \"Thank you for your purchase!\",\n      });\n      // Redirect will be handled by Stripe's return_url\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4 mb-8\">\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          onClick={() => setLocation('/')}\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"title-checkout\">Complete Your Purchase</h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-checkout-description\">\n            Secure payment powered by Stripe\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Order Summary */}\n        <Card data-testid=\"card-order-summary\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-primary\" />\n              Order Summary\n            </CardTitle>\n            <CardDescription>\n              Your selected AI modules\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {modules.map((module) => (\n              <div key={module.id} className=\"flex justify-between items-center p-3 rounded-lg bg-muted/50\" data-testid={`item-module-${module.id}`}>\n                <div>\n                  <h4 className=\"font-medium\" data-testid={`text-module-name-${module.id}`}>{module.name}</h4>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-module-description-${module.id}`}>\n                    {module.description}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold\" data-testid={`text-module-price-${module.id}`}>€{module.price}</p>\n                  <p className=\"text-xs text-muted-foreground\">per month</p>\n                </div>\n              </div>\n            ))}\n            \n            <div className=\"border-t pt-4\">\n              <div className=\"flex justify-between items-center text-lg font-bold\">\n                <span data-testid=\"text-total-label\">Total</span>\n                <span data-testid=\"text-total-amount\">€{total.toFixed(2)}/month</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-billing-info\">\n                Billed monthly • Cancel anytime\n              </p>\n            </div>\n\n            {/* Security Features */}\n            <div className=\"border-t pt-4 space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Shield className=\"h-4 w-4\" />\n                <span data-testid=\"text-security-ssl\">256-bit SSL encryption</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <CreditCard className=\"h-4 w-4\" />\n                <span data-testid=\"text-security-pci\">PCI DSS compliant</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        <Card data-testid=\"card-payment-form\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5 text-primary\" />\n              Payment Details\n            </CardTitle>\n            <CardDescription>\n              Enter your payment information below\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"p-4 border rounded-lg bg-background\">\n                <PaymentElement />\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full h-12 text-lg font-semibold\" \n                disabled={!stripe || !elements || isLoading}\n                data-testid=\"button-complete-payment\"\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\" />\n                    Processing...\n                  </div>\n                ) : (\n                  `Complete Payment - €${total.toFixed(2)}`\n                )}\n              </Button>\n              \n              <p className=\"text-xs text-center text-muted-foreground\" data-testid=\"text-terms\">\n                By completing this purchase, you agree to our Terms of Service and Privacy Policy.\n                You can cancel your subscription at any time.\n              </p>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default function CheckoutPage() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [modules, setModules] = useState<Module[]>([]);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Get URL params for checkout data\n    const urlParams = new URLSearchParams(window.location.search);\n    const moduleIds = urlParams.get('modules')?.split(',') || [];\n    const amount = parseFloat(urlParams.get('total') || '0');\n\n    if (!moduleIds.length || !amount) {\n      setLocation('/');\n      return;\n    }\n\n    // Load module configs from the pricing config\n    import('@/lib/pricing/config').then((config) => {\n      const selectedModules = config.MODULES.filter((m: Module) => moduleIds.includes(m.id));\n      setModules(selectedModules);\n    });\n\n    // Create PaymentIntent\n    apiRequest(\"POST\", \"/api/create-payment-intent\", { \n      amount, \n      selectedModuleIds: moduleIds \n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.success) {\n          setClientSecret(data.clientSecret);\n        } else {\n          throw new Error(data.message || 'Failed to create payment intent');\n        }\n      })\n      .catch((error) => {\n        console.error('Error creating payment intent:', error);\n        setLocation('/');\n      });\n  }, [setLocation]);\n\n  if (!clientSecret || !modules.length) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\" data-testid=\"loading-checkout\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" aria-label=\"Loading\"/>\n          <p className=\"text-muted-foreground\">Preparing your checkout...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Use the actual discounted total from URL params or calculate from modules\n  const urlParams = new URLSearchParams(window.location.search);\n  const urlTotal = parseFloat(urlParams.get('total') || '0');\n  const calculatedTotal = urlTotal || modules.reduce((sum, module) => sum + module.price, 0);\n\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <Elements stripe={stripePromise} options={{ clientSecret }}>\n      <CheckoutForm modules={modules} total={calculatedTotal} />\n    </Elements>\n  );\n}","size_bytes":9136},"client/src/pages/DashboardPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Phone, MessageCircle, Share2, Settings, BarChart3, Users, Clock, CheckCircle } from \"lucide-react\";\n\ninterface Subscription {\n  id: string;\n  moduleId: string;\n  status: string;\n  price: number;\n  startDate: string;\n}\n\ninterface AgentConfig {\n  id: string;\n  moduleId: string;\n  isActive: boolean;\n  configuration: any;\n  updatedAt: string;\n}\n\ninterface DashboardData {\n  subscriptions: Subscription[];\n  agentConfigs: AgentConfig[];\n  stats: {\n    totalChats: number;\n    totalCalls: number;\n    socialPosts: number;\n    leadsGenerated: number;\n  };\n}\n\nexport default function DashboardPage() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Fetch user dashboard data\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: ['/api/dashboard'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const getModuleIcon = (moduleId: string) => {\n    switch (moduleId) {\n      case 'phone': return <Phone className=\"h-5 w-5\" />;\n      case 'chat': return <MessageCircle className=\"h-5 w-5\" />;\n      case 'social': return <Share2 className=\"h-5 w-5\" />;\n      default: return <Settings className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getModuleName = (moduleId: string) => {\n    switch (moduleId) {\n      case 'phone': return 'AI Phone Agent';\n      case 'chat': return 'AI Chat Agent';\n      case 'social': return 'AI Social Media Agent';\n      default: return 'Unknown Module';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const subscriptions = dashboardData?.subscriptions || [];\n  const agentConfigs = dashboardData?.agentConfigs || [];\n  const stats = dashboardData?.stats || { totalChats: 0, totalCalls: 0, socialPosts: 0, leadsGenerated: 0 };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"title-dashboard\">AIDevelo.AI Dashboard</h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-dashboard-subtitle\">\n                Manage your AI agents and monitor performance\n              </p>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-back-home\"\n            >\n              Back to Home\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"tabs-dashboard\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"agents\" data-testid=\"tab-agents\">AI Agents</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card data-testid=\"card-stat-chats\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Chats</CardTitle>\n                  <MessageCircle className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-chats\">{stats.totalChats}</div>\n                  <p className=\"text-xs text-muted-foreground\">Website conversations</p>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-stat-calls\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Phone Calls</CardTitle>\n                  <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-calls\">{stats.totalCalls}</div>\n                  <p className=\"text-xs text-muted-foreground\">Calls handled</p>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-stat-posts\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Social Posts</CardTitle>\n                  <Share2 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-posts\">{stats.socialPosts}</div>\n                  <p className=\"text-xs text-muted-foreground\">Content published</p>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-stat-leads\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Leads Generated</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-leads\">{stats.leadsGenerated}</div>\n                  <p className=\"text-xs text-muted-foreground\">New prospects</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Active Subscriptions */}\n            <Card data-testid=\"card-subscriptions\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  Active Subscriptions\n                </CardTitle>\n                <CardDescription>\n                  Your current AI agent subscriptions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {subscriptions.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-subscriptions\">\n                    No active subscriptions found.\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {subscriptions.map((subscription) => (\n                      <div key={subscription.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`subscription-${subscription.moduleId}`}>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            {getModuleIcon(subscription.moduleId)}\n                            <span className=\"font-medium\">{getModuleName(subscription.moduleId)}</span>\n                          </div>\n                          <Badge variant={subscription.status === 'active' ? 'default' : 'secondary'}>\n                            {subscription.status}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          €{(subscription.price / 100).toFixed(2)}/month\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Started: {new Date(subscription.startDate).toLocaleDateString()}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"agents\" className=\"space-y-6\">\n            <Card data-testid=\"card-agent-configs\">\n              <CardHeader>\n                <CardTitle>AI Agent Configuration</CardTitle>\n                <CardDescription>\n                  Manage and configure your AI agents\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {agentConfigs.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-agents\">\n                    No AI agents configured yet.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {agentConfigs.map((config) => (\n                      <div key={config.id} className=\"border rounded-lg p-4\" data-testid={`agent-config-${config.moduleId}`}>\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center gap-3\">\n                            {getModuleIcon(config.moduleId)}\n                            <div>\n                              <h4 className=\"font-medium\">{getModuleName(config.moduleId)}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Last updated: {new Date(config.updatedAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant={config.isActive ? 'default' : 'secondary'}>\n                              {config.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-configure-${config.moduleId}`}>\n                              Configure\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <Card data-testid=\"card-analytics\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5\" />\n                  Performance Analytics\n                </CardTitle>\n                <CardDescription>\n                  Detailed insights into your AI agent performance\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Analytics Dashboard</h3>\n                  <p>Detailed performance metrics and insights coming soon.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card data-testid=\"card-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Account Settings\n                </CardTitle>\n                <CardDescription>\n                  Manage your account and billing preferences\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Settings className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Settings Panel</h3>\n                  <p>Account management and preferences coming soon.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":12627},"client/src/pages/PaymentSuccessPage.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle2, ArrowLeft, Download, Mail } from \"lucide-react\";\n\nexport default function PaymentSuccessPage() {\n  const [, setLocation] = useLocation();\n  const [paymentDetails, setPaymentDetails] = useState<{\n    modules: string[];\n    total: string;\n  } | null>(null);\n\n  useEffect(() => {\n    // Get payment details from URL params\n    const urlParams = new URLSearchParams(window.location.search);\n    const modules = urlParams.get('modules')?.split(',') || [];\n    const total = urlParams.get('total') || '0';\n    \n    if (modules.length > 0) {\n      setPaymentDetails({ modules, total });\n    }\n  }, []);\n\n  const handleBackToHome = () => {\n    setLocation('/');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted/20 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\" data-testid=\"card-payment-success\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n            <CheckCircle2 className=\"w-10 h-10 text-green-600 dark:text-green-400\" data-testid=\"icon-success\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-3xl font-bold text-green-600 dark:text-green-400\" data-testid=\"title-success\">\n              Payment Successful!\n            </CardTitle>\n            <CardDescription className=\"text-lg mt-2\" data-testid=\"text-success-description\">\n              Thank you for choosing AIDevelo.AI. Your AI modules are being set up.\n            </CardDescription>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {paymentDetails && (\n            <div className=\"bg-muted/50 rounded-lg p-4\" data-testid=\"section-payment-details\">\n              <h3 className=\"font-semibold mb-3\" data-testid=\"title-order-summary\">Order Summary</h3>\n              <div className=\"space-y-2\">\n                {paymentDetails.modules.map((moduleId) => (\n                  <div key={moduleId} className=\"flex justify-between text-sm\" data-testid={`item-purchased-${moduleId}`}>\n                    <span className=\"capitalize\">{moduleId.replace('-', ' ')} Agent</span>\n                    <span className=\"font-medium\">€{moduleId === 'phone' ? '79' : moduleId === 'chat' ? '49' : '59'}/month</span>\n                  </div>\n                ))}\n                <div className=\"border-t pt-2 mt-3\">\n                  <div className=\"flex justify-between font-semibold\" data-testid=\"total-paid\">\n                    <span>Total Paid</span>\n                    <span>€{paymentDetails.total}/month</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"bg-blue-50 dark:bg-blue-950/20 rounded-lg p-4 text-center\" data-testid=\"section-next-steps\">\n              <Mail className=\"w-8 h-8 text-blue-600 dark:text-blue-400 mx-auto mb-2\" />\n              <h4 className=\"font-semibold text-blue-900 dark:text-blue-100\" data-testid=\"title-email-confirmation\">\n                Check Your Email\n              </h4>\n              <p className=\"text-sm text-blue-700 dark:text-blue-300 mt-1\" data-testid=\"text-email-details\">\n                Setup instructions and login details have been sent to your email.\n              </p>\n            </div>\n\n            <div className=\"bg-purple-50 dark:bg-purple-950/20 rounded-lg p-4 text-center\" data-testid=\"section-support\">\n              <Download className=\"w-8 h-8 text-purple-600 dark:text-purple-400 mx-auto mb-2\" />\n              <h4 className=\"font-semibold text-purple-900 dark:text-purple-100\" data-testid=\"title-resources\">\n                Resources Ready\n              </h4>\n              <p className=\"text-sm text-purple-700 dark:text-purple-300 mt-1\" data-testid=\"text-resources-details\">\n                API documentation and integration guides are available in your dashboard.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-4\" data-testid=\"section-important-info\">\n            <h4 className=\"font-semibold text-amber-900 dark:text-amber-100 mb-2\" data-testid=\"title-important\">\n              Important Information\n            </h4>\n            <ul className=\"text-sm text-amber-800 dark:text-amber-200 space-y-1\">\n              <li data-testid=\"info-billing\">• Your subscription will be billed monthly starting today</li>\n              <li data-testid=\"info-cancellation\">• You can cancel anytime from your account settings</li>\n              <li data-testid=\"info-support\">• 24/7 support is available via email or chat</li>\n              <li data-testid=\"info-setup\">• AI module setup typically takes 5-10 minutes</li>\n            </ul>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n            <Button \n              onClick={handleBackToHome}\n              className=\"flex-1\"\n              data-testid=\"button-back-home\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Homepage\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={() => window.open('mailto:support@aidevelo.ai', '_blank')}\n              data-testid=\"button-contact-support\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Contact Support\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5908},"client/src/pages/ProductsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { MODULES } from \"@/lib/pricing/config\";\nimport { calculatePricing, formatPrice } from \"@/lib/pricing/calc\";\nimport { type ActiveProducts, type ProductActivation } from \"@/lib/pricing/types\";\nimport { ProductCard } from \"@/components/products/ProductCard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ShoppingCart } from \"lucide-react\";\n\nconst STORAGE_KEY = \"AIDeveloAI:activeProducts\";\n\nfunction getActiveProducts(): ActiveProducts {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    return stored ? JSON.parse(stored) : {};\n  } catch {\n    return {};\n  }\n}\n\nfunction setActiveProducts(products: ActiveProducts): void {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(products));\n}\n\nexport default function ProductsPage() {\n  const [, navigate] = useLocation();\n  const [activeProducts, setActiveProductsState] = useState<ActiveProducts>(getActiveProducts);\n\n  useEffect(() => {\n    setActiveProducts(activeProducts);\n  }, [activeProducts]);\n\n  const updateProductStatus = (moduleId: string, updates: Partial<ProductActivation>) => {\n    setActiveProductsState(prev => ({\n      ...prev,\n      [moduleId]: {\n        ...prev[moduleId],\n        moduleId,\n        ...updates\n      }\n    }));\n  };\n\n  const handleActivate = (moduleId: string) => {\n    updateProductStatus(moduleId, {\n      status: 'provisioning',\n      activatedAt: new Date().toISOString()\n    });\n    navigate(`/onboarding/${moduleId}`);\n  };\n\n  const handleConfigure = (moduleId: string) => {\n    navigate(`/onboarding/${moduleId}`);\n  };\n\n  const handleViewDashboard = () => {\n    navigate('/dashboard');\n  };\n\n  // Calculate pricing for active products\n  const activeModuleIds = Object.entries(activeProducts)\n    .filter(([, activation]) => activation.status === 'active')\n    .map(([moduleId]) => moduleId);\n  \n  const pricing = calculatePricing(activeModuleIds);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => navigate('/')}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-back-home\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back to Home\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold\" data-testid=\"title-products\">\n                  AI Products\n                </h1>\n                <p className=\"text-muted-foreground\" data-testid=\"text-products-subtitle\">\n                  Activate and manage your AI automation tools\n                </p>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">AIDevelo.AI</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Pricing Summary */}\n        {activeModuleIds.length > 0 && (\n          <Card className=\"mb-8\" data-testid=\"pricing-summary\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ShoppingCart className=\"h-5 w-5\" />\n                Active Products Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm text-muted-foreground\">Active products:</span>\n                    <Badge variant=\"outline\">\n                      {activeModuleIds.length} of {MODULES.length}\n                    </Badge>\n                  </div>\n                  {pricing.discountPercent > 0 && (\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-muted-foreground\">Discount:</span>\n                      <Badge variant=\"default\" className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n                        {pricing.discountPercent}% off\n                      </Badge>\n                    </div>\n                  )}\n                </div>\n                <div className=\"text-right\">\n                  {pricing.discountPercent > 0 && (\n                    <div className=\"text-sm text-muted-foreground line-through\">\n                      {formatPrice(pricing.subtotal)}/month\n                    </div>\n                  )}\n                  <div className=\"text-2xl font-bold\">\n                    {formatPrice(pricing.total)}/month\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Product Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {MODULES.map((module) => (\n            <ProductCard\n              key={module.id}\n              module={module}\n              activation={activeProducts[module.id]}\n              onActivate={() => handleActivate(module.id)}\n              onConfigure={() => handleConfigure(module.id)}\n              onView={handleViewDashboard}\n            />\n          ))}\n        </div>\n\n        {/* Getting Started */}\n        {Object.keys(activeProducts).length === 0 && (\n          <Card className=\"mt-8\">\n            <CardContent className=\"text-center py-8\">\n              <h3 className=\"text-lg font-semibold mb-2\">Get Started with AI Automation</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Choose your first AI product to start automating your business processes.\n                You can activate multiple products and get volume discounts.\n              </p>\n              <div className=\"flex justify-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\">2 products</Badge>\n                  <span>10% discount</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\">3 products</Badge>\n                  <span>15% discount</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6817},"client/src/pages/onboarding/ChatOnboardingPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { OnboardingStep } from \"@/components/products/OnboardingStep\";\nimport { CodeSnippet } from \"@/components/products/CodeSnippet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, MessageCircle, Code, Database, TestTube } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst STORAGE_KEY = \"AIDeveloAI:activeProducts\";\n\nexport default function ChatOnboardingPage() {\n  const [, navigate] = useLocation();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [widgetKey, setWidgetKey] = useState('');\n  const [chatData, setChatData] = useState({\n    websiteUrl: '',\n    knowledgeSource: '',\n    testMessage: ''\n  });\n\n  const steps = [\n    {\n      title: \"Install Widget\",\n      description: \"Add the chat widget to your website\",\n      completed: false\n    },\n    {\n      title: \"Connect Knowledge\",\n      description: \"Upload or connect your knowledge base\",\n      completed: false\n    },\n    {\n      title: \"Test Chat\",\n      description: \"Verify the chat agent works correctly\",\n      completed: false\n    }\n  ];\n\n  const [stepStates, setStepStates] = useState(steps);\n\n  const updateStepStatus = (stepIndex: number, completed: boolean) => {\n    setStepStates(prev => \n      prev.map((step, index) => \n        index === stepIndex ? { ...step, completed } : step\n      )\n    );\n  };\n\n  const handleGetWidget = async () => {\n    setLoading(true);\n    try {\n      const response = await apiRequest('GET', '/api/chat/widget-key');\n      const data = await response.json();\n      \n      if (data.ok && data.widgetKey) {\n        setWidgetKey(data.widgetKey);\n        updateStepStatus(0, true);\n        setCurrentStep(1);\n      }\n    } catch (error) {\n      console.error('Error getting widget key:', error);\n    }\n    setLoading(false);\n  };\n\n  const handleConnectKnowledge = () => {\n    updateStepStatus(1, true);\n    setCurrentStep(2);\n  };\n\n  const handleTestChat = async () => {\n    setLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/chat/verify-install', {\n        widgetKey,\n        origin: chatData.websiteUrl\n      });\n      \n      if (response.ok) {\n        updateStepStatus(2, true);\n        // Mark product as active in localStorage\n        const stored = localStorage.getItem(STORAGE_KEY);\n        const activeProducts = stored ? JSON.parse(stored) : {};\n        activeProducts.chat = {\n          moduleId: 'chat',\n          status: 'active',\n          activatedAt: new Date().toISOString(),\n          onboardingCompleted: true\n        };\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(activeProducts));\n        \n        setTimeout(() => navigate('/products'), 2000);\n      }\n    } catch (error) {\n      console.error('Error testing chat:', error);\n    }\n    setLoading(false);\n  };\n\n  const widgetSnippet = widgetKey ? \n    `<script async src=\"/widget.js\" data-key=\"${widgetKey}\"></script>` : \n    '';\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => navigate('/products')}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-back-products\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back to Products\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold flex items-center gap-3\">\n                  <MessageCircle className=\"h-8 w-8 text-primary\" />\n                  AI Chat Agent Setup\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Add intelligent chat to your website in 3 simple steps\n                </p>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">AIDevelo.AI</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"space-y-6\">\n          {/* Step 1: Install Widget */}\n          <OnboardingStep\n            title={stepStates[0].title}\n            description={stepStates[0].description}\n            completed={stepStates[0].completed}\n            loading={loading && currentStep === 0}\n            onPrimary={currentStep === 0 && !stepStates[0].completed ? handleGetWidget : undefined}\n            primaryText=\"Generate Widget\"\n          >\n            {stepStates[0].completed && widgetSnippet && (\n              <div className=\"space-y-4\">\n                <CodeSnippet\n                  title=\"Copy this code to your website\"\n                  code={widgetSnippet}\n                  language=\"html\"\n                />\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Add this script tag to your website's HTML, ideally before the closing &lt;/body&gt; tag.\n                      The chat widget will appear in the bottom-right corner.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {/* Step 2: Connect Knowledge */}\n          <OnboardingStep\n            title={stepStates[1].title}\n            description={stepStates[1].description}\n            completed={stepStates[1].completed}\n            onPrimary={currentStep === 1 && !stepStates[1].completed ? handleConnectKnowledge : undefined}\n            onSecondary={currentStep === 1 && !stepStates[1].completed ? handleConnectKnowledge : undefined}\n            primaryText=\"Upload File\"\n            secondaryText=\"Use URL\"\n          >\n            {currentStep === 1 && !stepStates[1].completed && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Knowledge Source URL</label>\n                  <Input\n                    type=\"url\"\n                    placeholder=\"https://yoursite.com/faq\"\n                    value={chatData.knowledgeSource}\n                    onChange={(e) => setChatData(prev => ({ ...prev, knowledgeSource: e.target.value }))}\n                    data-testid=\"input-knowledge-url\"\n                  />\n                </div>\n                <Card>\n                  <CardContent className=\"pt-6 space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Upload a PDF file or provide a URL to your FAQ/knowledge base. Your chat agent will use this information to answer customer questions.\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      <strong>Supported formats:</strong> PDF files, website URLs, FAQ pages\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {/* Step 3: Test Chat */}\n          <OnboardingStep\n            title={stepStates[2].title}\n            description={stepStates[2].description}\n            completed={stepStates[2].completed}\n            loading={loading && currentStep === 2}\n            onPrimary={currentStep === 2 && !stepStates[2].completed ? handleTestChat : undefined}\n            primaryText=\"Run Test\"\n            primaryDisabled={!chatData.websiteUrl}\n          >\n            {currentStep === 2 && !stepStates[2].completed && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Website URL</label>\n                  <Input\n                    type=\"url\"\n                    placeholder=\"https://yourwebsite.com\"\n                    value={chatData.websiteUrl}\n                    onChange={(e) => setChatData(prev => ({ ...prev, websiteUrl: e.target.value }))}\n                    data-testid=\"input-website-url\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Test Message</label>\n                  <Input\n                    placeholder=\"What are your business hours?\"\n                    value={chatData.testMessage}\n                    onChange={(e) => setChatData(prev => ({ ...prev, testMessage: e.target.value }))}\n                    data-testid=\"input-test-message\"\n                  />\n                </div>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      We'll verify the widget is installed and test that it responds correctly to customer questions.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {stepStates[2].completed && (\n            <Card className=\"border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 dark:text-green-200 flex items-center gap-2\">\n                  <TestTube className=\"h-5 w-5\" />\n                  Installation verified!\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-green-700 dark:text-green-300\">\n                  Your AI Chat Agent is now live on your website and ready to help customers. Redirecting to products...\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10128},"client/src/pages/onboarding/PhoneOnboardingPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { OnboardingStep } from \"@/components/products/OnboardingStep\";\nimport { CodeSnippet } from \"@/components/products/CodeSnippet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Phone, Calendar, Clock, TestTube } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst STORAGE_KEY = \"AIDeveloAI:activeProducts\";\n\nexport default function PhoneOnboardingPage() {\n  const [, navigate] = useLocation();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [phoneData, setPhoneData] = useState({\n    calendarProvider: '',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      timezone: 'Europe/Berlin'\n    },\n    testPhoneNumber: ''\n  });\n\n  const steps = [\n    {\n      title: \"Connect Phone Provider\",\n      description: \"Set up your phone system integration\",\n      completed: false\n    },\n    {\n      title: \"Connect Calendar\",\n      description: \"Link your calendar for appointment booking\",\n      completed: false\n    },\n    {\n      title: \"Set Business Hours\",\n      description: \"Configure when your phone agent is active\",\n      completed: false\n    },\n    {\n      title: \"Run Test Call\",\n      description: \"Verify everything works correctly\",\n      completed: false\n    }\n  ];\n\n  const [stepStates, setStepStates] = useState(steps);\n\n  const updateStepStatus = (stepIndex: number, completed: boolean) => {\n    setStepStates(prev => \n      prev.map((step, index) => \n        index === stepIndex ? { ...step, completed } : step\n      )\n    );\n  };\n\n  const handleProvisionPhone = async () => {\n    setLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/phone/provision', {\n        calendarProvider: phoneData.calendarProvider\n      });\n      \n      if (response.ok) {\n        updateStepStatus(0, true);\n        updateStepStatus(1, true);\n        setCurrentStep(2);\n      }\n    } catch (error) {\n      console.error('Error provisioning phone:', error);\n    }\n    setLoading(false);\n  };\n\n  const handleConfigureHours = () => {\n    updateStepStatus(2, true);\n    setCurrentStep(3);\n  };\n\n  const handleTestCall = async () => {\n    setLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/phone/test-call', {\n        to: phoneData.testPhoneNumber\n      });\n      \n      if (response.ok) {\n        updateStepStatus(3, true);\n        // Mark product as active in localStorage\n        const stored = localStorage.getItem(STORAGE_KEY);\n        const activeProducts = stored ? JSON.parse(stored) : {};\n        activeProducts.phone = {\n          moduleId: 'phone',\n          status: 'active',\n          activatedAt: new Date().toISOString(),\n          onboardingCompleted: true\n        };\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(activeProducts));\n        \n        setTimeout(() => navigate('/products'), 2000);\n      }\n    } catch (error) {\n      console.error('Error running test call:', error);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => navigate('/products')}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-back-products\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back to Products\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold flex items-center gap-3\">\n                  <Phone className=\"h-8 w-8 text-primary\" />\n                  AI Phone Agent Setup\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Configure your AI phone assistant in 4 simple steps\n                </p>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">AIDevelo.AI</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"space-y-6\">\n          {/* Step 1: Connect Phone Provider */}\n          <OnboardingStep\n            title={stepStates[0].title}\n            description={stepStates[0].description}\n            completed={stepStates[0].completed}\n            loading={loading && currentStep === 0}\n            onPrimary={currentStep === 0 && !stepStates[0].completed ? handleProvisionPhone : undefined}\n            primaryDisabled={!phoneData.calendarProvider}\n          >\n            {currentStep === 0 && !stepStates[0].completed && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Calendar Provider</label>\n                  <Select onValueChange={(value) => setPhoneData(prev => ({ ...prev, calendarProvider: value }))}>\n                    <SelectTrigger data-testid=\"select-calendar-provider\">\n                      <SelectValue placeholder=\"Choose your calendar\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"google\">Google Calendar</SelectItem>\n                      <SelectItem value=\"microsoft\">Microsoft Outlook</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Your phone agent will integrate with Twilio for call handling and automatically sync appointments to your calendar.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {/* Step 2: Connect Calendar (Auto-completed with step 1) */}\n          <OnboardingStep\n            title={stepStates[1].title}\n            description={stepStates[1].description}\n            completed={stepStates[1].completed}\n          />\n\n          {/* Step 3: Set Business Hours */}\n          <OnboardingStep\n            title={stepStates[2].title}\n            description={stepStates[2].description}\n            completed={stepStates[2].completed}\n            onPrimary={currentStep === 2 && !stepStates[2].completed ? handleConfigureHours : undefined}\n          >\n            {currentStep === 2 && !stepStates[2].completed && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Start Time</label>\n                    <Input\n                      type=\"time\"\n                      value={phoneData.businessHours.start}\n                      onChange={(e) => setPhoneData(prev => ({\n                        ...prev,\n                        businessHours: { ...prev.businessHours, start: e.target.value }\n                      }))}\n                      data-testid=\"input-start-time\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">End Time</label>\n                    <Input\n                      type=\"time\"\n                      value={phoneData.businessHours.end}\n                      onChange={(e) => setPhoneData(prev => ({\n                        ...prev,\n                        businessHours: { ...prev.businessHours, end: e.target.value }\n                      }))}\n                      data-testid=\"input-end-time\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {/* Step 4: Run Test Call */}\n          <OnboardingStep\n            title={stepStates[3].title}\n            description={stepStates[3].description}\n            completed={stepStates[3].completed}\n            loading={loading && currentStep === 3}\n            onPrimary={currentStep === 3 && !stepStates[3].completed ? handleTestCall : undefined}\n            primaryText=\"Run Test\"\n            primaryDisabled={!phoneData.testPhoneNumber}\n          >\n            {currentStep === 3 && !stepStates[3].completed && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Test Phone Number</label>\n                  <Input\n                    type=\"tel\"\n                    placeholder=\"+49 123 456 7890\"\n                    value={phoneData.testPhoneNumber}\n                    onChange={(e) => setPhoneData(prev => ({ ...prev, testPhoneNumber: e.target.value }))}\n                    data-testid=\"input-test-phone\"\n                  />\n                </div>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      We'll make a test call to verify your setup. The call will last about 30 seconds.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {stepStates[3].completed && (\n            <Card className=\"border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 dark:text-green-200 flex items-center gap-2\">\n                  <TestTube className=\"h-5 w-5\" />\n                  You're live!\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-green-700 dark:text-green-300\">\n                  Your AI Phone Agent is now active and ready to handle calls. Redirecting to products...\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10486},"client/src/pages/onboarding/SocialOnboardingPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { OnboardingStep } from \"@/components/products/OnboardingStep\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Share2, Facebook, Linkedin, Calendar, TestTube } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst STORAGE_KEY = \"AIDeveloAI:activeProducts\";\n\nexport default function SocialOnboardingPage() {\n  const [, navigate] = useLocation();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [socialData, setSocialData] = useState({\n    connectedPlatforms: [] as string[],\n    postingCadence: '',\n    draftContent: '',\n    scheduleTime: ''\n  });\n\n  const steps = [\n    {\n      title: \"Connect Accounts\",\n      description: \"Link your social media platforms\",\n      completed: false\n    },\n    {\n      title: \"Choose Posting Cadence\",\n      description: \"Set how often you want to post\",\n      completed: false\n    },\n    {\n      title: \"Create First Draft\",\n      description: \"Let AI create your first post\",\n      completed: false\n    },\n    {\n      title: \"Schedule Test Post\",\n      description: \"Queue your first automated post\",\n      completed: false\n    }\n  ];\n\n  const [stepStates, setStepStates] = useState(steps);\n\n  const platforms = [\n    { id: 'facebook', name: 'Facebook', icon: Facebook },\n    { id: 'instagram', name: 'Instagram', icon: Share2 },\n    { id: 'linkedin', name: 'LinkedIn', icon: Linkedin }\n  ];\n\n  const updateStepStatus = (stepIndex: number, completed: boolean) => {\n    setStepStates(prev => \n      prev.map((step, index) => \n        index === stepIndex ? { ...step, completed } : step\n      )\n    );\n  };\n\n  const handleConnectPlatform = async (platform: string) => {\n    setLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/social/connect', {\n        provider: platform\n      });\n      \n      if (response.ok) {\n        setSocialData(prev => ({\n          ...prev,\n          connectedPlatforms: [...prev.connectedPlatforms, platform]\n        }));\n        \n        if (socialData.connectedPlatforms.length >= 0) {\n          updateStepStatus(0, true);\n          setCurrentStep(1);\n        }\n      }\n    } catch (error) {\n      console.error('Error connecting platform:', error);\n    }\n    setLoading(false);\n  };\n\n  const handleSetCadence = () => {\n    updateStepStatus(1, true);\n    setCurrentStep(2);\n  };\n\n  const handleCreateDraft = () => {\n    if (socialData.draftContent) {\n      updateStepStatus(2, true);\n      setCurrentStep(3);\n    }\n  };\n\n  const handleSchedulePost = async () => {\n    setLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/social/schedule-draft', {\n        text: socialData.draftContent,\n        when: socialData.scheduleTime\n      });\n      \n      if (response.ok) {\n        updateStepStatus(3, true);\n        // Mark product as active in localStorage\n        const stored = localStorage.getItem(STORAGE_KEY);\n        const activeProducts = stored ? JSON.parse(stored) : {};\n        activeProducts.social = {\n          moduleId: 'social',\n          status: 'active',\n          activatedAt: new Date().toISOString(),\n          onboardingCompleted: true\n        };\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(activeProducts));\n        \n        setTimeout(() => navigate('/products'), 2000);\n      }\n    } catch (error) {\n      console.error('Error scheduling post:', error);\n    }\n    setLoading(false);\n  };\n\n  const generateDraftContent = () => {\n    const sampleContent = \"🚀 Excited to share that we're transforming how businesses connect with customers through AI automation! From intelligent chat support to automated social media management, the future of customer engagement is here. What's your biggest challenge in customer communication? #AI #Automation #Business\";\n    setSocialData(prev => ({ ...prev, draftContent: sampleContent }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => navigate('/products')}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-back-products\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back to Products\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold flex items-center gap-3\">\n                  <Share2 className=\"h-8 w-8 text-primary\" />\n                  AI Social Media Agent Setup\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Automate your social media presence in 4 simple steps\n                </p>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">AIDevelo.AI</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"space-y-6\">\n          {/* Step 1: Connect Accounts */}\n          <OnboardingStep\n            title={stepStates[0].title}\n            description={stepStates[0].description}\n            completed={stepStates[0].completed}\n            loading={loading && currentStep === 0}\n          >\n            {currentStep === 0 && !stepStates[0].completed && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {platforms.map((platform) => {\n                    const Icon = platform.icon;\n                    const isConnected = socialData.connectedPlatforms.includes(platform.id);\n                    \n                    return (\n                      <Card key={platform.id} className={isConnected ? 'border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20' : ''}>\n                        <CardContent className=\"p-4 text-center\">\n                          <Icon className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n                          <h4 className=\"font-medium mb-2\">{platform.name}</h4>\n                          {isConnected ? (\n                            <Badge variant=\"default\" className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n                              Connected\n                            </Badge>\n                          ) : (\n                            <Button \n                              size=\"sm\"\n                              onClick={() => handleConnectPlatform(platform.id)}\n                              disabled={loading}\n                              data-testid={`button-connect-${platform.id}`}\n                            >\n                              Connect\n                            </Button>\n                          )}\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n                {socialData.connectedPlatforms.length > 0 && (\n                  <Button \n                    onClick={() => { updateStepStatus(0, true); setCurrentStep(1); }}\n                    className=\"w-full\"\n                    data-testid=\"button-continue-step1\"\n                  >\n                    Continue with {socialData.connectedPlatforms.length} platform(s)\n                  </Button>\n                )}\n              </div>\n            )}\n          </OnboardingStep>\n\n          {/* Step 2: Choose Posting Cadence */}\n          <OnboardingStep\n            title={stepStates[1].title}\n            description={stepStates[1].description}\n            completed={stepStates[1].completed}\n            onPrimary={currentStep === 1 && !stepStates[1].completed ? handleSetCadence : undefined}\n            primaryDisabled={!socialData.postingCadence}\n          >\n            {currentStep === 1 && !stepStates[1].completed && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Posting Frequency</label>\n                  <Select onValueChange={(value) => setSocialData(prev => ({ ...prev, postingCadence: value }))}>\n                    <SelectTrigger data-testid=\"select-posting-cadence\">\n                      <SelectValue placeholder=\"How often should we post?\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily (7 posts/week)</SelectItem>\n                      <SelectItem value=\"business-days\">Business Days (5 posts/week)</SelectItem>\n                      <SelectItem value=\"3x-week\">3 times per week</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly (1 post/week)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Your AI agent will automatically create and schedule posts based on your industry, target audience, and trending topics.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {/* Step 3: Create First Draft */}\n          <OnboardingStep\n            title={stepStates[2].title}\n            description={stepStates[2].description}\n            completed={stepStates[2].completed}\n            onPrimary={currentStep === 2 && !stepStates[2].completed ? handleCreateDraft : undefined}\n            primaryDisabled={!socialData.draftContent}\n          >\n            {currentStep === 2 && !stepStates[2].completed && (\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <label className=\"block text-sm font-medium\">Post Content</label>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={generateDraftContent}\n                      data-testid=\"button-generate-content\"\n                    >\n                      Generate with AI\n                    </Button>\n                  </div>\n                  <Textarea\n                    placeholder=\"Create your first post or let AI generate one for you...\"\n                    value={socialData.draftContent}\n                    onChange={(e) => setSocialData(prev => ({ ...prev, draftContent: e.target.value }))}\n                    rows={4}\n                    data-testid=\"textarea-draft-content\"\n                  />\n                </div>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      This will be your first automated post. Our AI will learn from this style to create future content.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {/* Step 4: Schedule Test Post */}\n          <OnboardingStep\n            title={stepStates[3].title}\n            description={stepStates[3].description}\n            completed={stepStates[3].completed}\n            loading={loading && currentStep === 3}\n            onPrimary={currentStep === 3 && !stepStates[3].completed ? handleSchedulePost : undefined}\n            primaryText=\"Schedule Draft\"\n            primaryDisabled={!socialData.scheduleTime}\n          >\n            {currentStep === 3 && !stepStates[3].completed && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Schedule Time</label>\n                  <Input\n                    type=\"datetime-local\"\n                    value={socialData.scheduleTime}\n                    onChange={(e) => setSocialData(prev => ({ ...prev, scheduleTime: e.target.value }))}\n                    min={new Date().toISOString().slice(0, 16)}\n                    data-testid=\"input-schedule-time\"\n                  />\n                </div>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      This post will be queued as a draft. You can review and approve it before it goes live.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </OnboardingStep>\n\n          {stepStates[3].completed && (\n            <Card className=\"border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 dark:text-green-200 flex items-center gap-2\">\n                  <TestTube className=\"h-5 w-5\" />\n                  Draft scheduled!\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-green-700 dark:text-green-300\">\n                  Your AI Social Media Agent is now active and your first post is scheduled. Redirecting to products...\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13967},"server/services/openai.ts":{"content":"// OpenAI service for AI functionality (from javascript_openai integration)\nimport OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n\nlet openai: OpenAI | null = null;\n\nfunction getOpenAIClient(): OpenAI {\n  if (!openai) {\n    if (!process.env.OPENAI_API_KEY) {\n      throw new Error('OpenAI API key not configured. Please set OPENAI_API_KEY environment variable.');\n    }\n    openai = new OpenAI({ \n      apiKey: process.env.OPENAI_API_KEY,\n      timeout: 30000 // 30 second timeout\n    });\n  }\n  return openai;\n}\n\nexport interface ChatResponse {\n  message: string;\n  isActionRequired?: boolean;\n  actionType?: 'book_appointment' | 'capture_lead' | 'escalate_human';\n  actionData?: any;\n}\n\nexport interface KnowledgeBase {\n  companyInfo: string;\n  services: string[];\n  faq: Array<{ question: string; answer: string }>;\n  businessHours: string;\n  contactInfo: {\n    phone?: string;\n    email?: string;\n    address?: string;\n  };\n}\n\n/**\n * Generate intelligent chat response for website chat agent\n */\nexport async function generateChatResponse(\n  message: string, \n  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>,\n  knowledgeBase: KnowledgeBase,\n  businessContext?: string\n): Promise<ChatResponse> {\n  try {\n    const systemPrompt = `You are a helpful AI assistant for ${knowledgeBase.companyInfo || 'this business'}. \n\nBusiness Information:\n- Services: ${knowledgeBase.services.join(', ')}\n- Hours: ${knowledgeBase.businessHours}\n- Contact: ${JSON.stringify(knowledgeBase.contactInfo)}\n\nAvailable Actions:\n- If user wants to book an appointment, respond with \"book_appointment\" action\n- If user provides contact info, respond with \"capture_lead\" action  \n- If you can't help, respond with \"escalate_human\" action\n\nFAQ Knowledge:\n${knowledgeBase.faq.map(item => `Q: ${item.question}\\nA: ${item.answer}`).join('\\n\\n')}\n\nInstructions:\n- Be friendly, professional, and helpful\n- Answer questions about the business using the knowledge base\n- Offer to book appointments when relevant\n- Capture leads when users show interest\n- Respond in JSON format: { \"message\": \"your response\", \"isActionRequired\": boolean, \"actionType\": \"type\", \"actionData\": {} }\n`;\n\n    const messages = [\n      { role: \"system\" as const, content: systemPrompt },\n      ...conversationHistory,\n      { role: \"user\" as const, content: message }\n    ];\n\n    const client = getOpenAIClient();\n    const response = await client.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n      messages,\n      response_format: { type: \"json_object\" },\n    });\n\n    const responseContent = response.choices[0].message.content || '{}';\n    \n    // Validate OpenAI response structure\n    try {\n      const result = JSON.parse(responseContent);\n      \n      return {\n        message: typeof result.message === 'string' ? result.message : \"I'm here to help! How can I assist you today?\",\n        isActionRequired: Boolean(result.isActionRequired),\n        actionType: ['book_appointment', 'capture_lead', 'escalate_human'].includes(result.actionType) ? result.actionType : undefined,\n        actionData: result.actionData || undefined\n      };\n    } catch (parseError) {\n      console.error('Failed to parse OpenAI response:', parseError);\n      return {\n        message: \"I'm here to help! How can I assist you today?\",\n        isActionRequired: false\n      };\n    }\n  } catch (error) {\n    console.error('Error generating chat response:', error);\n    return {\n      message: \"I apologize, but I'm having trouble right now. Please try again or contact us directly.\",\n      isActionRequired: false\n    };\n  }\n}\n\n/**\n * Generate phone call response and determine actions\n */\nexport async function generatePhoneResponse(\n  transcript: string,\n  knowledgeBase: KnowledgeBase,\n  callContext?: any\n): Promise<{\n  response: string;\n  shouldBookAppointment: boolean;\n  appointmentDetails?: any;\n  summary: string;\n}> {\n  try {\n    const systemPrompt = `You are a professional phone assistant for ${knowledgeBase.companyInfo}. \n\nBusiness Information:\n- Services: ${knowledgeBase.services.join(', ')}\n- Hours: ${knowledgeBase.businessHours}\n- Contact: ${JSON.stringify(knowledgeBase.contactInfo)}\n\nInstructions:\n- Handle phone calls professionally\n- Book appointments when requested\n- Provide information about services\n- Take messages when needed\n- Respond in JSON format with: response, shouldBookAppointment, appointmentDetails, summary\n`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: `Phone call transcript: ${transcript}` }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      response: result.response || \"Thank you for calling. How can I help you today?\",\n      shouldBookAppointment: result.shouldBookAppointment || false,\n      appointmentDetails: result.appointmentDetails,\n      summary: result.summary || \"Phone call handled\"\n    };\n  } catch (error) {\n    console.error('Error generating phone response:', error);\n    return {\n      response: \"Thank you for calling. Please hold while I connect you with someone who can help.\",\n      shouldBookAppointment: false,\n      summary: \"Error processing call\"\n    };\n  }\n}\n\n/**\n * Generate social media content\n */\nexport async function generateSocialContent(\n  prompt: string,\n  platform: 'facebook' | 'instagram' | 'linkedin' | 'twitter',\n  brandVoice?: string,\n  companyInfo?: string\n): Promise<{\n  content: string;\n  hashtags: string[];\n  suggestedImagePrompt?: string;\n}> {\n  try {\n    const platformGuidelines = {\n      facebook: \"conversational, engaging, can be longer\",\n      instagram: \"visual-focused, trendy, use emojis\",\n      linkedin: \"professional, business-focused, thought leadership\",\n      twitter: \"concise, under 280 characters, engaging\"\n    };\n\n    const systemPrompt = `Create social media content for ${platform}.\n\nGuidelines for ${platform}: ${platformGuidelines[platform]}\nBrand voice: ${brandVoice || 'professional and friendly'}\nCompany: ${companyInfo || 'this business'}\n\nContent request: ${prompt}\n\nRespond in JSON format with: content, hashtags (array), suggestedImagePrompt\nMake content engaging and platform-appropriate.\n`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: prompt }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      content: result.content || \"Exciting things happening at our business!\",\n      hashtags: result.hashtags || [],\n      suggestedImagePrompt: result.suggestedImagePrompt\n    };\n  } catch (error) {\n    console.error('Error generating social content:', error);\n    return {\n      content: \"Stay tuned for updates!\",\n      hashtags: ['#business', '#update'],\n      suggestedImagePrompt: \"Professional business image\"\n    };\n  }\n}\n\n/**\n * Analyze conversation sentiment and extract lead information\n */\nexport async function analyzeConversation(\n  conversation: string,\n  type: 'chat' | 'phone'\n): Promise<{\n  sentiment: 'positive' | 'neutral' | 'negative';\n  leadScore: number; // 1-10\n  extractedInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    company?: string;\n    interests?: string[];\n  };\n  summary: string;\n}> {\n  try {\n    const systemPrompt = `Analyze this ${type} conversation and extract information.\n\nProvide:\n1. Sentiment: positive, neutral, or negative\n2. Lead score: 1-10 (10 = high intent to purchase)\n3. Extracted contact information\n4. Brief summary\n\nRespond in JSON format with: sentiment, leadScore, extractedInfo, summary\n`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: conversation }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      sentiment: result.sentiment || 'neutral',\n      leadScore: Math.max(1, Math.min(10, result.leadScore || 5)),\n      extractedInfo: result.extractedInfo || {},\n      summary: result.summary || 'Conversation analyzed'\n    };\n  } catch (error) {\n    console.error('Error analyzing conversation:', error);\n    return {\n      sentiment: 'neutral',\n      leadScore: 5,\n      extractedInfo: {},\n      summary: 'Error analyzing conversation'\n    };\n  }\n}\n\nexport { openai };","size_bytes":9084},"server/widget.js":{"content":"(function() {\n  'use strict';\n\n  // Configuration - Use script's origin for API calls to avoid cross-origin issues\n  const currentScript = document.currentScript || (function() {\n    const scripts = document.getElementsByTagName('script');\n    return scripts[scripts.length - 1];\n  })();\n  \n  const API_BASE = new URL(currentScript.src).origin;\n  const WIDGET_ID = 'aidevelo-chat-widget';\n  \n  // Get widget key from current script tag\n  const WIDGET_KEY = currentScript?.getAttribute('data-key');\n  \n  if (!WIDGET_KEY) {\n    console.error('AIDevelo.AI Chat Widget: No widget key found. Please add data-key attribute to the script tag.');\n    return;\n  }\n\n  // State management\n  let isOpen = false;\n  let isMinimized = false;\n  let session = null;\n  let messages = [];\n  let unreadCount = 0;\n\n  // API helper function\n  async function apiRequest(method, endpoint, data = null) {\n    try {\n      const options = {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      \n      if (data) {\n        options.body = JSON.stringify(data);\n      }\n      \n      const response = await fetch(API_BASE + endpoint, options);\n      return response;\n    } catch (error) {\n      console.error('Chat Widget API Error:', error);\n      throw error;\n    }\n  }\n\n  // Create CSS styles\n  function createStyles() {\n    const styles = `\n      #${WIDGET_ID} {\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        z-index: 9999;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n      }\n      \n      .chat-widget-button {\n        width: 56px;\n        height: 56px;\n        border-radius: 50%;\n        background: #00cfff;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 4px 12px rgba(0, 207, 255, 0.3);\n        transition: all 0.3s ease;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n      }\n      \n      .chat-widget-button:hover {\n        transform: scale(1.1);\n        box-shadow: 0 6px 20px rgba(0, 207, 255, 0.4);\n      }\n      \n      .chat-widget-button svg {\n        width: 24px;\n        height: 24px;\n        color: white;\n      }\n      \n      .chat-widget-unread-badge {\n        position: absolute;\n        top: -8px;\n        right: -8px;\n        background: #ef4444;\n        color: white;\n        border-radius: 50%;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 12px;\n        font-weight: bold;\n      }\n      \n      .chat-widget-card {\n        width: 320px;\n        height: 480px;\n        background: white;\n        border-radius: 12px;\n        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);\n        border: 1px solid #e5e7eb;\n        display: flex;\n        flex-direction: column;\n        overflow: hidden;\n      }\n      \n      .chat-widget-header {\n        background: #f9fafb;\n        padding: 16px;\n        border-bottom: 1px solid #e5e7eb;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n      \n      .chat-widget-title {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-weight: 600;\n        font-size: 14px;\n        color: #111827;\n      }\n      \n      .chat-widget-title svg {\n        width: 16px;\n        height: 16px;\n        color: #00cfff;\n      }\n      \n      .chat-widget-controls {\n        display: flex;\n        gap: 4px;\n      }\n      \n      .chat-widget-control-btn {\n        width: 32px;\n        height: 32px;\n        border: none;\n        background: transparent;\n        cursor: pointer;\n        border-radius: 6px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: background 0.2s;\n      }\n      \n      .chat-widget-control-btn:hover {\n        background: #e5e7eb;\n      }\n      \n      .chat-widget-control-btn svg {\n        width: 16px;\n        height: 16px;\n        color: #6b7280;\n      }\n      \n      .chat-widget-messages {\n        flex: 1;\n        overflow-y: auto;\n        padding: 16px;\n        display: flex;\n        flex-direction: column;\n        gap: 12px;\n      }\n      \n      .chat-widget-message {\n        display: flex;\n      }\n      \n      .chat-widget-message.user {\n        justify-content: flex-end;\n      }\n      \n      .chat-widget-message.agent {\n        justify-content: flex-start;\n      }\n      \n      .chat-widget-message-bubble {\n        max-width: 240px;\n        padding: 8px 12px;\n        border-radius: 18px;\n        font-size: 14px;\n        line-height: 1.4;\n      }\n      \n      .chat-widget-message.user .chat-widget-message-bubble {\n        background: #00cfff;\n        color: white;\n      }\n      \n      .chat-widget-message.agent .chat-widget-message-bubble {\n        background: #f3f4f6;\n        color: #374151;\n      }\n      \n      .chat-widget-message-time {\n        font-size: 11px;\n        opacity: 0.7;\n        margin-top: 4px;\n      }\n      \n      .chat-widget-input-area {\n        padding: 16px;\n        border-top: 1px solid #e5e7eb;\n        display: flex;\n        gap: 8px;\n      }\n      \n      .chat-widget-input {\n        flex: 1;\n        border: 1px solid #d1d5db;\n        border-radius: 20px;\n        padding: 8px 16px;\n        font-size: 14px;\n        outline: none;\n        transition: border-color 0.2s;\n      }\n      \n      .chat-widget-input:focus {\n        border-color: #00cfff;\n      }\n      \n      .chat-widget-send-btn {\n        width: 36px;\n        height: 36px;\n        border-radius: 50%;\n        background: #00cfff;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: background 0.2s;\n      }\n      \n      .chat-widget-send-btn:hover {\n        background: #00b8e6;\n      }\n      \n      .chat-widget-send-btn:disabled {\n        background: #9ca3af;\n        cursor: not-allowed;\n      }\n      \n      .chat-widget-send-btn svg {\n        width: 16px;\n        height: 16px;\n        color: white;\n      }\n      \n      .chat-widget-loading {\n        display: flex;\n        justify-content: flex-start;\n      }\n      \n      .chat-widget-loading-bubble {\n        background: #f3f4f6;\n        color: #374151;\n        max-width: 240px;\n        padding: 8px 12px;\n        border-radius: 18px;\n        display: flex;\n        gap: 4px;\n      }\n      \n      .chat-widget-loading-dot {\n        width: 8px;\n        height: 8px;\n        background: #9ca3af;\n        border-radius: 50%;\n        animation: chat-widget-bounce 1.4s ease-in-out infinite both;\n      }\n      \n      .chat-widget-loading-dot:nth-child(1) { animation-delay: -0.32s; }\n      .chat-widget-loading-dot:nth-child(2) { animation-delay: -0.16s; }\n      \n      @keyframes chat-widget-bounce {\n        0%, 80%, 100% {\n          transform: scale(0);\n        } 40% {\n          transform: scale(1);\n        }\n      }\n      \n      .chat-widget-hidden {\n        display: none !important;\n      }\n      \n      /* Dark mode support */\n      @media (prefers-color-scheme: dark) {\n        .chat-widget-card {\n          background: #1f2937;\n          border-color: #374151;\n        }\n        \n        .chat-widget-header {\n          background: #111827;\n          border-color: #374151;\n        }\n        \n        .chat-widget-title {\n          color: #f9fafb;\n        }\n        \n        .chat-widget-control-btn:hover {\n          background: #374151;\n        }\n        \n        .chat-widget-control-btn svg {\n          color: #9ca3af;\n        }\n        \n        .chat-widget-message.agent .chat-widget-message-bubble {\n          background: #374151;\n          color: #f3f4f6;\n        }\n        \n        .chat-widget-input {\n          background: #374151;\n          border-color: #4b5563;\n          color: #f9fafb;\n        }\n        \n        .chat-widget-input:focus {\n          border-color: #00cfff;\n        }\n        \n        .chat-widget-loading-bubble {\n          background: #374151;\n          color: #f3f4f6;\n        }\n      }\n    `;\n    \n    const styleSheet = document.createElement('style');\n    styleSheet.textContent = styles;\n    document.head.appendChild(styleSheet);\n  }\n\n  // Initialize chat session\n  async function initializeChat() {\n    try {\n      const response = await apiRequest('POST', '/api/chat/sessions', {\n        agentConfigId: 'demo-agent-config',\n        visitorId: `visitor-${Date.now()}`,\n        visitorEmail: null,\n        visitorName: null\n      });\n      \n      const responseData = await response.json();\n      \n      if (responseData.data) {\n        session = responseData.data;\n        \n        // Add welcome message\n        const welcomeMessage = {\n          id: `welcome-${Date.now()}`,\n          sender: 'agent',\n          message: 'Hello! How can I help you today?',\n          timestamp: new Date().toISOString()\n        };\n        \n        messages.push(welcomeMessage);\n        renderMessages();\n      }\n    } catch (error) {\n      console.error('Error initializing chat:', error);\n    }\n  }\n\n  // Send message\n  async function sendMessage(messageText) {\n    if (!messageText.trim() || !session) return;\n\n    const userMessage = {\n      id: `user-${Date.now()}`,\n      sender: 'user',\n      message: messageText,\n      timestamp: new Date().toISOString()\n    };\n\n    messages.push(userMessage);\n    renderMessages();\n\n    // Show loading\n    showLoading();\n\n    try {\n      const response = await apiRequest('POST', '/api/chat/messages', {\n        sessionId: session.id,\n        message: messageText,\n        sender: 'user'\n      });\n      \n      const responseData = await response.json();\n\n      if (responseData.data?.message) {\n        const agentMessage = {\n          id: `agent-${Date.now()}`,\n          sender: 'agent',\n          message: responseData.data.message,\n          timestamp: new Date().toISOString()\n        };\n\n        messages.push(agentMessage);\n        \n        // If chat is minimized, increment unread count\n        if (isMinimized) {\n          unreadCount++;\n          updateUnreadBadge();\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: `error-${Date.now()}`,\n        sender: 'agent',\n        message: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date().toISOString()\n      };\n      messages.push(errorMessage);\n    }\n\n    hideLoading();\n    renderMessages();\n  }\n\n  // Format time\n  function formatTime(timestamp) {\n    return new Date(timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  // Show loading indicator\n  function showLoading() {\n    const messagesContainer = document.querySelector(`#${WIDGET_ID} .chat-widget-messages`);\n    const loadingDiv = document.createElement('div');\n    loadingDiv.className = 'chat-widget-loading';\n    loadingDiv.id = 'chat-widget-loading-indicator';\n    loadingDiv.innerHTML = `\n      <div class=\"chat-widget-loading-bubble\">\n        <div class=\"chat-widget-loading-dot\"></div>\n        <div class=\"chat-widget-loading-dot\"></div>\n        <div class=\"chat-widget-loading-dot\"></div>\n      </div>\n    `;\n    messagesContainer.appendChild(loadingDiv);\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n\n  // Hide loading indicator\n  function hideLoading() {\n    const loadingIndicator = document.getElementById('chat-widget-loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.remove();\n    }\n  }\n\n  // Render messages\n  function renderMessages() {\n    const messagesContainer = document.querySelector(`#${WIDGET_ID} .chat-widget-messages`);\n    if (!messagesContainer) return;\n\n    // Remove loading indicator if present\n    hideLoading();\n\n    // Clear existing messages (except loading)\n    const existingMessages = messagesContainer.querySelectorAll('.chat-widget-message');\n    existingMessages.forEach(msg => msg.remove());\n\n    // Add all messages\n    messages.forEach(message => {\n      const messageDiv = document.createElement('div');\n      messageDiv.className = `chat-widget-message ${message.sender}`;\n      messageDiv.innerHTML = `\n        <div class=\"chat-widget-message-bubble\">\n          ${message.message}\n          <div class=\"chat-widget-message-time\">${formatTime(message.timestamp)}</div>\n        </div>\n      `;\n      messagesContainer.appendChild(messageDiv);\n    });\n\n    // Scroll to bottom\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n\n  // Update unread badge\n  function updateUnreadBadge() {\n    const badge = document.querySelector(`#${WIDGET_ID} .chat-widget-unread-badge`);\n    if (badge) {\n      badge.textContent = unreadCount;\n      badge.style.display = unreadCount > 0 ? 'flex' : 'none';\n    }\n  }\n\n  // Toggle chat\n  function toggleChat() {\n    isOpen = !isOpen;\n    const button = document.querySelector(`#${WIDGET_ID} .chat-widget-button`);\n    const card = document.querySelector(`#${WIDGET_ID} .chat-widget-card`);\n    \n    if (isOpen) {\n      button.style.display = 'none';\n      card.style.display = 'flex';\n      if (!session) {\n        initializeChat();\n      }\n    } else {\n      button.style.display = 'flex';\n      card.style.display = 'none';\n    }\n  }\n\n  // Toggle minimize\n  function toggleMinimize() {\n    isMinimized = !isMinimized;\n    const messagesContainer = document.querySelector(`#${WIDGET_ID} .chat-widget-messages`);\n    const inputArea = document.querySelector(`#${WIDGET_ID} .chat-widget-input-area`);\n    const minimizeBtn = document.querySelector(`#${WIDGET_ID} .chat-widget-minimize-btn`);\n    \n    if (isMinimized) {\n      messagesContainer.style.display = 'none';\n      inputArea.style.display = 'none';\n      minimizeBtn.innerHTML = `\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <path d=\"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3\"/>\n        </svg>\n      `;\n    } else {\n      messagesContainer.style.display = 'flex';\n      inputArea.style.display = 'flex';\n      minimizeBtn.innerHTML = `\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <path d=\"M8 3v3a2 2 0 0 1-2 2H3M3 8h3a2 2 0 0 1 2-2V3m13 5h-3a2 2 0 0 1-2-2V3m0 13v-3a2 2 0 0 1 2-2h3\"/>\n        </svg>\n      `;\n      unreadCount = 0;\n      updateUnreadBadge();\n    }\n  }\n\n  // Create widget HTML\n  function createWidget() {\n    const widgetContainer = document.createElement('div');\n    widgetContainer.id = WIDGET_ID;\n    \n    widgetContainer.innerHTML = `\n      <!-- Chat Button -->\n      <button class=\"chat-widget-button\" onclick=\"window.AIDeveloChatWidget.toggleChat()\">\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\n        </svg>\n        <div class=\"chat-widget-unread-badge\" style=\"display: none;\">0</div>\n      </button>\n      \n      <!-- Chat Card -->\n      <div class=\"chat-widget-card\" style=\"display: none;\">\n        <div class=\"chat-widget-header\">\n          <div class=\"chat-widget-title\">\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\n            </svg>\n            AIDevelo.AI\n          </div>\n          <div class=\"chat-widget-controls\">\n            <button class=\"chat-widget-control-btn chat-widget-minimize-btn\" onclick=\"window.AIDeveloChatWidget.toggleMinimize()\">\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M8 3v3a2 2 0 0 1-2 2H3M3 8h3a2 2 0 0 1 2-2V3m13 5h-3a2 2 0 0 1-2-2V3m0 13v-3a2 2 0 0 1 2-2h3\"/>\n              </svg>\n            </button>\n            <button class=\"chat-widget-control-btn\" onclick=\"window.AIDeveloChatWidget.toggleChat()\">\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\n              </svg>\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"chat-widget-messages\"></div>\n        \n        <div class=\"chat-widget-input-area\">\n          <input type=\"text\" class=\"chat-widget-input\" placeholder=\"Type your message...\" />\n          <button class=\"chat-widget-send-btn\" onclick=\"window.AIDeveloChatWidget.handleSend()\">\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"/>\n              <polygon points=\"22,2 15,22 11,13 2,9\"/>\n            </svg>\n          </button>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(widgetContainer);\n  }\n\n  // Handle send button click\n  function handleSend() {\n    const input = document.querySelector(`#${WIDGET_ID} .chat-widget-input`);\n    const message = input.value.trim();\n    if (message) {\n      sendMessage(message);\n      input.value = '';\n    }\n  }\n\n  // Handle enter key in input\n  function handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      handleSend();\n    }\n  }\n\n  // Initialize widget\n  function initWidget() {\n    // Check if widget already exists\n    if (document.getElementById(WIDGET_ID)) {\n      return;\n    }\n\n    createStyles();\n    createWidget();\n    \n    // Add event listeners\n    const input = document.querySelector(`#${WIDGET_ID} .chat-widget-input`);\n    input.addEventListener('keypress', handleKeyPress);\n    \n    // Expose global functions\n    window.AIDeveloChatWidget = {\n      toggleChat,\n      toggleMinimize,\n      handleSend,\n      sendMessage\n    };\n  }\n\n  // Initialize when DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initWidget);\n  } else {\n    initWidget();\n  }\n\n})();","size_bytes":17982}},"version":1}