You are working inside my existing AIDevelo.AI project on Replit (React + TypeScript + Tailwind + Node server).
Do NOT create a new project. Update the current codebase to “plug in” the three products with clean UI and backend stubs.

## BRAND & PRODUCTS
Brand: AIDevelo.AI
Modular products (each can be activated individually):
1) AI Phone Agent — answers calls, books appointments to calendar, saves notes.
2) AI Website Chat Agent — answers FAQs 24/7, captures leads, can book appointments.
3) AI Social Media Agent — drafts/schedules posts, replies to comments/messages.

Goal for this task: add product integration “skeletons” so users can activate a product and go through an onboarding flow. Include UI + server routes + env templating. Keep copy in English.

## FRONTEND – PAGES & COMPONENTS
Create/modify the following with production-quality Tailwind styling, accessible and responsive:

1) Route: `/products`
   - Shows the three product cards with short copy, icon, and “Activate” button.
   - Each card links to its onboarding route.
   - Reuse existing design language; center logo in header (keep it as is if already centered).

2) Onboarding routes (wizard style, 3–4 short steps each):
   - `/onboarding/phone`
     Steps: Connect phone provider (placeholder), connect calendar (Google/Outlook placeholder), set business hours, run test call.
   - `/onboarding/chat`
     Steps: Install widget (show <script> snippet with copy button), connect knowledge (URL/PDF upload placeholder), test chat.
   - `/onboarding/social`
     Steps: Connect accounts (Meta/LinkedIn placeholder), choose posting cadence, create first draft, schedule test post (draft only).

3) State & feature flags:
   - Persist selected/activated product keys in `localStorage` under `AIDeveloAI:activeProducts`.
   - On each onboarding completion, set the flag to `active`.

4) Shared components (create under `src/components/products/`):
   - `ProductCard.tsx` (title, price, bullets, Activate button)
   - `OnboardingStep.tsx` (title, description, primary/secondary actions, success state)
   - `CodeSnippet.tsx` (shows script snippet with copy-to-clipboard)
   - `StatusBadge.tsx` (inactive / provisioning / live)

5) Pricing banner (optional for this step):
   - In `/products` show the current total based on active products using these prices:
     Phone €79, Chat €49, Social €59
     Discounts: 2 products → 10% off, 3 products → 15% off.
   - Calculation util should come from `src/lib/pricing/calc.ts`. If this file doesn’t exist, create it with types.

## BACKEND – SERVER ROUTES (STUBS ONLY)
We already have a Node server in the repo. Add safe, minimal routes that we will later connect to real providers. Put them under `server/` and expose via existing router (e.g., `server/routes.ts`):

- `POST /api/phone/provision`
  Body: `{ calendarProvider: 'google' | 'microsoft' }`
  Action: return `{ status: 'provisioning', phoneNumber: 'placeholder' }`

- `POST /api/phone/test-call`
  Body: `{ to: string }`
  Action: return `{ ok: true, result: 'test-call-scheduled' }`

- `GET /api/chat/widget-key`
  Action: generate and return a deterministic placeholder `widgetKey` (persist to an in-memory map for now)

- `POST /api/chat/verify-install`
  Body: `{ widgetKey: string, origin: string }`
  Action: return `{ installed: true }` (always true for now)

- `POST /api/social/connect`
  Body: `{ provider: 'facebook' | 'instagram' | 'linkedin' }`
  Action: return `{ status: 'connected', provider }` (stub)

- `POST /api/social/schedule-draft`
  Body: `{ text: string, when: string }`
  Action: return `{ queued: true }`

All routes must validate input and return JSON with `{ ok: true/false, ... }`. No secrets or real API calls yet.

## WIDGET SNIPPET
Create `src/public/widget.js` (or serve from `/client/widget.js`) with a trivial placeholder that logs:
```html
<script async src="/widget.js" data-key="WIDGET_KEY"></script>
Add a handler in the Node server to serve /widget.js.

In onboarding (chat step 1), show a copyable snippet with the user’s widgetKey.

ENV & CONFIG
Add .env.example with placeholders:

ini
Code kopieren
STRIPE_SECRET=""
GOOGLE_OAUTH_TOKEN=""
MICROSOFT_GRAPH_TOKEN=""
TELEPHONY_PROVIDER="twilio" # placeholder
Never commit real secrets. Ensure server reads env safely.

TYPES & UTILS
src/lib/pricing/types.ts — define Module type { id: 'phone'|'chat'|'social'; name: string; price: number }

src/lib/pricing/config.ts — export MODULES array with the three products and prices above.

src/lib/pricing/calc.ts — pure function:
input: string[] (selected ids)
output: { subtotal, discountPercent, discountAmount, total }
rules: 2 → 10%, 3 → 15%, else 0%

COPY (English, concise)
Phone Card bullets: “Answers calls 24/7”, “Books appointments to your calendar”, “Saves call notes”

Chat Card bullets: “Instant answers on your website”, “Lead capture & booking”, “Easy script install”

Social Card bullets: “Plan & publish automatically”, “Reply to comments/messages”, “Grow your reach”

Onboarding CTAs: “Continue”, “Skip for now”, “Run test”, “Mark as done”

Success messages: “You’re live!”, “Installation verified”, “Draft scheduled”

ACCEPTANCE CRITERIA
/products lists the 3 products with Activate buttons and links to onboarding routes.

Onboarding pages exist and advance through steps; completion toggles the product to active and persists in localStorage.

Backend routes return valid JSON stubs and are wired from the onboarding UI.

Chat widget snippet and /widget.js are served and visible in the browser console when embedded elsewhere.

No TypeScript errors; UI responsive and accessible (keyboard focus, aria-labels on buttons).

Proceed to implement now in the existing Replit project, reusing the current design where possible. Keep changes minimal, clean, and well-typed.